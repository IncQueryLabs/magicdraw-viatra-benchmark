package com.incquerylabs.magicdraw.benchmark.queries

import "http://www.nomagic.com/magicdraw/UML/2.5.1"

/**
 * Querying all instances of an EClass. 
 */
pattern classes(class : Class) {
	Class(class);
}

/**
 * Querying elements that are not the specified type: single negation.
 */
pattern nonBlockClasses(class : Class) {
	neg find blocks(class);
}

/**
 * Querying all instances of an EClass that have a short "reference chain".
 */
pattern blocks(class : Class) {
    Class.appliedStereotype.name(class, "Block"); 
}

/**
 * Querying all instances of an EClass that have a short "reference chain".
 */
pattern requirements(class : Class) {
	Class.appliedStereotype.name(class, "Requirement"); 
}

/**
 * Querying all instances of an EClass that have a short "reference chain".
 */
private pattern constraintBlocks(class : Class) {
	Class.appliedStereotype.name(class, "Constraint"); 
}

/**
 * Disjunction of blocks and requirements.
 */
pattern blocksOrRequirements(class : Class) {
	find blocks(class);
} or {
	find requirements(class);
}

/**
 * Disjunction reusing the blocksOrRequirements and constraintBlocks patterns and the negation of dependencies.
 */
pattern blocksOrRequirementsOrConstraints(class : Class) {
	find blocksOrRequirements(class);
} or {
	find constraintBlocks(class);
	neg find dependencies(class, _);
	neg find dependencies(_, class);
}

/**
 * Querying all instances of an EClass with an attribute. 
 */
pattern namedElement(element : NamedElement, name : java ^java.lang.String) {
	NamedElement.name(element, name);
}

/**
 * Reusing namedElement and eval the names.
 */
pattern complexNameOfElements(element : NamedElement, complexName : java ^java.lang.String) {
	find namedElement(element, name);
	complexName == eval(name.toFirstUpper + ". "+ name.toFirstLower + "." + name.toUpperCase + "." + name.toLowerCase + "." + name.length); 
}


/**
 * Pattern describing succession relation between two dependencies.
 */
pattern dependencyChains(source : Dependency, target : Dependency) {
    Dependency.supplier(source, elem);
    Dependency.client(target, elem);
}

/*
 * Pattern responsible for detecting circular dependency chains.
 */
pattern circularDependencies(dependency : Dependency) {
    find dependencyChains+(dependency, dependency);
}

/**
 * Source and target of a dependency element.
 */
pattern dependencies(source : NamedElement, target : NamedElement) {
	Dependency.supplier(dependency, target);
	Dependency.client(dependency, source);
}

/**
 * Reusing the dependency pattern and querying simple attributes.
 */
pattern namesOfDependencyEndpoints(source : NamedElement, sourceName : java ^java.lang.String, target : NamedElement, targetName : java ^java.lang.String) {
	find dependencies(source, target);
	NamedElement.name(source, sourceName);
	NamedElement.name(target, targetName);
}

/**
 * Reusing the namesOfDependencyEndpoints pattern and filtering with a check.
 */
pattern alphabeticalDependencies(source : NamedElement, target : NamedElement) {
	find namesOfDependencyEndpoints(source, sourceName, target, targetName);
	check (sourceName < targetName);
}

/**
 * Simple filtering with a check on all instances of an EClass.
 */
pattern elementsWithShortNames(class : NamedElement) {
	NamedElement.name(class, name);
	check (name.length < 10); 
}

/**
 * Cartesian product of classes.
 */
//pattern productOfClasses(lhs : Class, lhsName : java ^java.lang.String, rhs : Class, rhsName : java ^java.lang.String) {
//	Class.name(lhs, lhsName);
//    Class.name(rhs, rhsName);
//}

/**
 * Cartesian product of classes and a filter using a check.
 */
//private pattern hasLongerName(lhs : Class, rhs : Class) {
//    find productOfClasses(lhs, lhsName, rhs, rhsName);
//    check (lhsName.length < rhsName.length); 
//}

/**
 * Selecting an element reusing a Cartesian product.
 */
//pattern elementWithShortestName(element : Class) {
//	find requirements(element); // If this in not here, we run out of memory
//	neg find hasLongerName(_, element);
//}

/**
 * A transition that connects two states with the following properties
 * - Source state is a member of a composite state
 * - Target state is a member of the same state machine, however not contained in a composite state
 * - Target state has an outgoing transition towards a final state
 * 
 */
pattern transitionPointingOutOfCompState(source : State, target : Vertex, transition : Transition) {
	Transition.source(transition, source);
	Transition.target(transition, target);
	
	//pattern for target side element
	Vertex.container(target, targetRegion);
	Region.stateMachine(targetRegion, _);
	Vertex.outgoing(target, targetVertexTransition);
	Transition.target(targetVertexTransition, finalState);
	FinalState(finalState);
	
	//Pattern for source side element
	find parentState+(source, sourceParent);
	State.container.stateMachine(sourceParent, _ );
	
}


/**
 * A loop transition that
 * - Has a trigger
 * - Has some effect that is an activity
 * - Has no guard
 * - defines an event
 * 
 */
pattern loopTransitionWithTriggerEffectEventNoGuard(state : State, transition : Transition, trigger : Trigger, event : Event, effect : Activity) {
	Transition.source(transition, state);
	Transition.target(transition, state);
	Transition.kind(transition, ::external);
	Transition.trigger(transition, trigger);
	Transition.effect(transition, effect);
	neg find transitionWithGuard(transition, _);
	Trigger.event(trigger, event);
}

private pattern transitionWithGuard(trans : Transition, guard : Constraint){
	Transition.guard(trans, guard);
}

/**
 * Simple pattern for transitive closures.
 */
pattern parentState(state : State, parentState : State) {
	State.region(parentState, subregion);
	Region.subvertex(subregion, state);
} 

/**
 * Using recursion, eval and disjunction.
 * Cannot be evaluated using local search because of recursion!
 */
//pattern qualifiedStateName(state : State, name : java ^java.lang.String) {
//	find parentState(state, parentState);
//    State.name(state, simpleName);
//    find qualifiedStateName(parentState, parentName);
//    name == eval (parentName + "." + simpleName);
//} or { 
//    neg find parentState(state, _);
//    State.name(state, name);
//}

/**
 * Simple pattern for aggregators.
 */
pattern subregions(state : State, subregion : Region) {
  	State.region(state, subregion);
}
 
/**
 * Reusing a simple pattern with the "count" aggregator.
 */
pattern numberOfSubregions(state : State, regionCount : java ^java.lang.Integer) {
  	regionCount == count find subregions(state, _subregion);
}

/**
 * Reusing a simple pattern with transitive closure.
 */
//pattern transitiveSubstates(state : State, transitiveSubstate : State) {	
//	find parentState+(transitiveSubstate, state);
//}

/**
 * Returns states with short names.
 */
pattern statesWithShortNames(state : State) {
	State.name(state, name);
	check(name.length < 6);
}

/**
 * Returns transitions with their targets. Made for reuse.
 */
pattern incomingTransitions(transition : Transition, targetState : State) {
	Transition.target(transition, targetState);
}

/**
 * Reusing a simple pattern with transitive closure.
 */
pattern transitiveSubstates(state : State, transitiveSubstate : State) {
	find parentState+(transitiveSubstate, state);
}

/**
 * Reusing a simple pattern with a check expression before the transitive closure.
 */
pattern transitiveSubstatesWithCheck(state : State, transitiveSubstate : State) {
	find statesWithShortNames(state);
	find parentState+(transitiveSubstate, state);
}

/**
 * Reusing a simple pattern with a check expression. Made for reuse.
 */
pattern statesWithMoreIncomingTransitions(state : State)  {
	transitionCount == count find incomingTransitions(_, state);
	check (transitionCount > 1);
}

/**
 * Reusing a simple pattern with a check expression before the transitive closure.
 */
pattern transitiveSubstatesWithCheck2(state : State, transitiveSubstate : State) {
	transitionCount == count find incomingTransitions(_, state);
	check (transitionCount > 1);
	find parentState+(transitiveSubstate, state);
}

/**
 * Reusing a simple pattern with a check expression before the transitive closure.
 */
pattern transitiveSubstatesWithCheck3(state : State, transitiveSubstate : State) {
	find statesWithMoreIncomingTransitions(state);
	find parentState+(transitiveSubstate, state);
}

/**
 * Reusing a transitive closure pattern with the count aggregator.
 */
pattern numberOfTransitiveSubstates(state : State, transitiveSubstateCount : java ^java.lang.Integer) {
	transitiveSubstateCount == count find transitiveSubstates(state, _);
}

/**
 * Reusing a transitive closure and count aggregator pattern with the max aggregator.
 */
pattern stateWithMostSubstates(state : State) {
    // the number of substates of this state
    find numberOfTransitiveSubstates(state, count);
    // is the maximum from all states
	count == max find numberOfTransitiveSubstates(_, #substateCount);
}

pattern allBenchMarkedQueries(param : NamedElement) {
	find blocksOrRequirementsOrConstraints(param);
} or {
	find transitiveSubstatesWithCheck3(param, _);
} or {
	find alphabeticalDependencies(param, _);
} or {
	find circularDependencies(param);
} or {
	find loopTransitionWithTriggerEffectEventNoGuard(param, _, _, _, _);
} or {
	find transitionPointingOutOfCompState(param, _, _);
} 