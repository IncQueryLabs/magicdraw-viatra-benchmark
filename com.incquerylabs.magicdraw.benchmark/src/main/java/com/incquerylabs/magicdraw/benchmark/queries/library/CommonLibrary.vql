package com.incquerylabs.magicdraw.benchmark.queries.library

import "http://www.nomagic.com/magicdraw/UML/2.5.1.1"

//Matches if the parameter `general` is connected by a singlegeneralization relation to parameter `classifier`
pattern generalizedClassifier(Classifier : Classifier, General : Classifier) {
	Generalization.general(gen, General);
	Generalization.specific(gen, Classifier);
}

//Matches if the parameter `general` is connected with a series of generalization relations to parameter `classifier`
pattern indirectGeneralization(Classifier : Classifier, General : Classifier) {
	find generalizedClassifier +(Classifier, General);
}

//Matches if the parameter`classifier` can be substituted with the parameter`classifier`: they are either the same, or there is an `indirectGeneralization`relationship between them. 
pattern compatibleClassifier(Classifier : Classifier, General : Classifier) {
	find generalizedClassifier *(Classifier, General);
}

//Matches the parameter `element` and its direct owning Package
pattern owningPackage(Element : Package, Owner : Package) {
	Package.owningPackage(Element, Owner);
}

//Matches the parameter `element` with its direct or indirect owning packages or itself
pattern owningPackageOrSelf(Element : Package, Owner : Package) {
	find owningPackage *(Element, Owner);
}

//Collects the InstanceSpecification of the given Element having the stereotype with the given name
pattern stereotypedElement(Element : Element, Stereotype : Stereotype, ProfileName : String, StereotypeName : String) {
	Element.appliedStereotype(Element, Stereotype);
	find compatibleClassifier(Stereotype, superStereotype);
	Stereotype.owningPackage(superStereotype, owner);
	find owningPackageOrSelf(owner, profile);
	Profile.name(profile, ProfileName);
	Stereotype.name(superStereotype, StereotypeName);
}

//Matches the value of the slot with the given name
pattern taggedValue(Element : Element, Stereotype : Stereotype, FeatureName : String, TaggedValue : TaggedValue) {
	Element.taggedValue(Element, TaggedValue);
	TaggedValue.tagDefinition(TaggedValue, tagDefinition);
	find compatibleClassifier(Stereotype, superStereotype);
	Stereotype.ownedAttribute(superStereotype, tagDefinition);
	Property.name(tagDefinition, FeatureName);
}

pattern extractTaggedValue(TaggedValue : TaggedValue, Value : java Object) {
	StringTaggedValue.value(TaggedValue, Value);
} or {
	BooleanTaggedValue.value(TaggedValue, Value);
} or {
	IntegerTaggedValue.value(TaggedValue, Value);
} or {
	RealTaggedValue.value(TaggedValue, Value);
} or {
	ElementTaggedValue.value(TaggedValue, Value);
}