package com.incquerylabs.magicdraw.benchmark.queries.library

import "http://www.nomagic.com/magicdraw/UML/2.5.1"

// Actuals - Connectivity

/*
 * Pattern that queries elements with the stereotype 'ActualResourceRelationship' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InformationFlow' object with the stereotype ActualResourceRelationship.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualResourceRelationship(element : InformationFlow, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualResourceRelationship");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualResourceRelationship'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'ActualResourceRelationship'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualResourceRelationship_URI(element : InformationFlow, valuespec : LiteralString) {
	find ActualResourceRelationship(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualResourceRelationship'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'ActualResourceRelationship'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualResourceRelationship_conformsTo(element : InformationFlow, value : Element) {
	find ActualResourceRelationship(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'FillsPost' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype FillsPost.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
FillsPost(element : Abstraction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "FillsPost");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'FillsPost'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'FillsPost'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern FillsPost_URI(element : Abstraction, valuespec : LiteralString) {
	find FillsPost(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'FillsPost'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'FillsPost'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
FillsPost_actualMeasurementSet(element : Abstraction, value : Element) {
	find FillsPost(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'FillsPost'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'FillsPost'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern FillsPost_conformsTo(element : Abstraction, value : Element) {
	find FillsPost(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'FillsPost'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'FillsPost'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern FillsPost_endDate(element : Abstraction, value : Element) {
	find FillsPost(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'FillsPost'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'FillsPost'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern FillsPost_measurementSet(element : Abstraction, value : Element) {
	find FillsPost(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'FillsPost'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'FillsPost'.
 * value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern FillsPost_sourceContext(element : Abstraction, value : Classifier) {
	find FillsPost(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'FillsPost'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'FillsPost'.
 * value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern
FillsPost_sourcePropertyPath(element : Abstraction, value : Property) {
	find FillsPost(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'FillsPost'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'FillsPost'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern FillsPost_startDate(element : Abstraction, value : Element) {
	find FillsPost(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'FillsPost'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'FillsPost'.
 * value : Classifier : A value of the attribute 'targetContext'.
 */
pattern FillsPost_targetContext(element : Abstraction, value : Classifier) {
	find FillsPost(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'FillsPost'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'FillsPost'.
 * value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern
FillsPost_targetPropertyPath(element : Abstraction, value : Property) {
	find FillsPost(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

// Actuals - Constraints

/*
 * Pattern that queries elements with the stereotype 'ActualService' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualService.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualService(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualService");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualService'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualService'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualService_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualService(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'appliesFor' attribute of elements with the stereotype 'ActualService'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualService'.
 * value : Element : A value of the attribute 'appliesFor'.
 */
pattern
ActualService_appliesFor(element : InstanceSpecification, value : Element) {
	find ActualService(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "appliesFor", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualService'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualService'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualService_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualService(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualService'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualService'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern
ActualService_endDate(element : InstanceSpecification, value : Element) {
	find ActualService(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualService'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualService'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern
ActualService_startDate(element : InstanceSpecification, value : Element) {
	find ActualService(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ProvidedServiceLevel' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ProvidedServiceLevel.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ProvidedServiceLevel(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ProvidedServiceLevel");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProvidedServiceLevel'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ProvidedServiceLevel'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ProvidedServiceLevel_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ProvidedServiceLevel(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'appliesFor' attribute of elements with the stereotype 'ProvidedServiceLevel'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ProvidedServiceLevel'.
 * value : Element : A value of the attribute 'appliesFor'.
 */
pattern
ProvidedServiceLevel_appliesFor(element : InstanceSpecification, value : Element) {
	find ProvidedServiceLevel(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "appliesFor", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProvidedServiceLevel'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ProvidedServiceLevel'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ProvidedServiceLevel_conformsTo(element : InstanceSpecification, value : Element) {
	find ProvidedServiceLevel(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ProvidedServiceLevel'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ProvidedServiceLevel'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern
ProvidedServiceLevel_endDate(element : InstanceSpecification, value : Element) {
	find ProvidedServiceLevel(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ProvidedServiceLevel'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ProvidedServiceLevel'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern
ProvidedServiceLevel_startDate(element : InstanceSpecification, value : Element) {
	find ProvidedServiceLevel(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ProvidesCompetence' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype ProvidesCompetence.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ProvidesCompetence(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ProvidesCompetence");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProvidesCompetence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProvidesCompetence'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ProvidesCompetence_URI(element : Dependency, valuespec : LiteralString) {
	find ProvidesCompetence(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ProvidesCompetence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProvidesCompetence'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ProvidesCompetence_actualMeasurementSet(element : Dependency, value : Element) {
	find ProvidesCompetence(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProvidesCompetence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProvidesCompetence'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProvidesCompetence_conformsTo(element : Dependency, value : Element) {
	find ProvidesCompetence(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ProvidesCompetence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProvidesCompetence'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ProvidesCompetence_measurementSet(element : Dependency, value : Element) {
	find ProvidesCompetence(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'RequiredServiceLevel' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype RequiredServiceLevel.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
RequiredServiceLevel(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "RequiredServiceLevel");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'RequiredServiceLevel'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'RequiredServiceLevel'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
RequiredServiceLevel_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find RequiredServiceLevel(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'appliesFor' attribute of elements with the stereotype 'RequiredServiceLevel'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'RequiredServiceLevel'.
 * value : Element : A value of the attribute 'appliesFor'.
 */
pattern
RequiredServiceLevel_appliesFor(element : InstanceSpecification, value : Element) {
	find RequiredServiceLevel(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "appliesFor", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'RequiredServiceLevel'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'RequiredServiceLevel'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
RequiredServiceLevel_conformsTo(element : InstanceSpecification, value : Element) {
	find RequiredServiceLevel(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'RequiredServiceLevel'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'RequiredServiceLevel'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern
RequiredServiceLevel_endDate(element : InstanceSpecification, value : Element) {
	find RequiredServiceLevel(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'RequiredServiceLevel'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'RequiredServiceLevel'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern
RequiredServiceLevel_startDate(element : InstanceSpecification, value : Element) {
	find RequiredServiceLevel(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

// Actuals - Structure

/*
 * Pattern that queries elements with the stereotype 'ActualOrganizationRole' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Slot' object with the stereotype ActualOrganizationRole.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualOrganizationRole(element : Slot, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualOrganizationRole");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualOrganizationRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualOrganizationRole'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualOrganizationRole_URI(element : Slot, valuespec : LiteralString) {
	find ActualOrganizationRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualOrganizationRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualOrganizationRole'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActualOrganizationRole_conformsTo(element : Slot, value : Element) {
	find ActualOrganizationRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualOrganizationRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualOrganizationRole'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern ActualOrganizationRole_endDate(element : Slot, value : Element) {
	find ActualOrganizationRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualOrganizationRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualOrganizationRole'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern ActualOrganizationRole_startDate(element : Slot, value : Element) {
	find ActualOrganizationRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ActualResourceRole' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Slot' object with the stereotype ActualResourceRole.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualResourceRole(element : Slot, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualResourceRole");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualResourceRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualResourceRole'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActualResourceRole_URI(element : Slot, valuespec : LiteralString) {
	find ActualResourceRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualResourceRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualResourceRole'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActualResourceRole_conformsTo(element : Slot, value : Element) {
	find ActualResourceRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualResourceRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualResourceRole'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern ActualResourceRole_endDate(element : Slot, value : Element) {
	find ActualResourceRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualResourceRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualResourceRole'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern ActualResourceRole_startDate(element : Slot, value : Element) {
	find ActualResourceRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

// Actuals - Taxonomy

/*
 * Pattern that queries elements with the stereotype 'ActualOrganization' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualOrganization.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualOrganization(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualOrganization");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualOrganization_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualOrganization(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualCondition' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * value : Element : A value of the attribute 'actualCondition'.
 */
pattern
ActualOrganization_actualCondition(element : InstanceSpecification, value : Element) {
	find ActualOrganization(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "actualCondition", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualOrganization_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualOrganization(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern
ActualOrganization_endDate(element : InstanceSpecification, value : Element) {
	find ActualOrganization(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern
ActualOrganization_milestone(element : InstanceSpecification, value : Element) {
	find ActualOrganization(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'ratifiedStandards' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * value : Element : A value of the attribute 'ratifiedStandards'.
 */
pattern
ActualOrganization_ratifiedStandards(element : InstanceSpecification, value : Element) {
	find ActualOrganization(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "ratifiedStandards", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'serviceType' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * valuespec : LiteralString : A value of the attribute 'serviceType'.
 */
pattern
ActualOrganization_serviceType(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualOrganization(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "serviceType", valuespec);
}

/*
 * Pattern that queries the 'shortName' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * valuespec : LiteralString : A value of the attribute 'shortName'.
 */
pattern
ActualOrganization_shortName(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualOrganization(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "shortName", valuespec);
}

/*
 * Pattern that queries the 'stakeholderConcern' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * value : Element : A value of the attribute 'stakeholderConcern'.
 */
pattern
ActualOrganization_stakeholderConcern(element : InstanceSpecification, value : Element) {
	find ActualOrganization(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "stakeholderConcern", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern
ActualOrganization_startDate(element : InstanceSpecification, value : Element) {
	find ActualOrganization(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ActualOrganizationalResource' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualOrganizationalResource.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualOrganizationalResource(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualOrganizationalResource");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualOrganizationalResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganizationalResource'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualOrganizationalResource_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualOrganizationalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualCondition' attribute of elements with the stereotype 'ActualOrganizationalResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganizationalResource'.
 * value : Element : A value of the attribute 'actualCondition'.
 */
pattern
ActualOrganizationalResource_actualCondition(element : InstanceSpecification, value : Element) {
	find ActualOrganizationalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "actualCondition", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualOrganizationalResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganizationalResource'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualOrganizationalResource_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualOrganizationalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualOrganizationalResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganizationalResource'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern
ActualOrganizationalResource_endDate(element : InstanceSpecification, value : Element) {
	find ActualOrganizationalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'ActualOrganizationalResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganizationalResource'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern
ActualOrganizationalResource_milestone(element : InstanceSpecification, value : Element) {
	find ActualOrganizationalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'stakeholderConcern' attribute of elements with the stereotype 'ActualOrganizationalResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganizationalResource'.
 * value : Element : A value of the attribute 'stakeholderConcern'.
 */
pattern
ActualOrganizationalResource_stakeholderConcern(element : InstanceSpecification, value : Element) {
	find ActualOrganizationalResource(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "stakeholderConcern", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualOrganizationalResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganizationalResource'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern
ActualOrganizationalResource_startDate(element : InstanceSpecification, value : Element) {
	find ActualOrganizationalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ActualPerson' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualPerson.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualPerson(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualPerson");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualPerson'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPerson'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualPerson_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualPerson(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualCondition' attribute of elements with the stereotype 'ActualPerson'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPerson'.
 * value : Element : A value of the attribute 'actualCondition'.
 */
pattern
ActualPerson_actualCondition(element : InstanceSpecification, value : Element) {
	find ActualPerson(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "actualCondition", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualPerson'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPerson'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualPerson_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualPerson(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualPerson'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPerson'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern
ActualPerson_endDate(element : InstanceSpecification, value : Element) {
	find ActualPerson(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'ActualPerson'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPerson'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern
ActualPerson_milestone(element : InstanceSpecification, value : Element) {
	find ActualPerson(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'stakeholderConcern' attribute of elements with the stereotype 'ActualPerson'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPerson'.
 * value : Element : A value of the attribute 'stakeholderConcern'.
 */
pattern
ActualPerson_stakeholderConcern(element : InstanceSpecification, value : Element) {
	find ActualPerson(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "stakeholderConcern", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualPerson'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPerson'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern
ActualPerson_startDate(element : InstanceSpecification, value : Element) {
	find ActualPerson(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ActualPost' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualPost.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualPost(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualPost");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualPost'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPost'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualPost_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualPost(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualCondition' attribute of elements with the stereotype 'ActualPost'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPost'.
 * value : Element : A value of the attribute 'actualCondition'.
 */
pattern
ActualPost_actualCondition(element : InstanceSpecification, value : Element) {
	find ActualPost(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "actualCondition", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualPost'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPost'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualPost_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualPost(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualPost'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPost'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern ActualPost_endDate(element : InstanceSpecification, value : Element) {
	find ActualPost(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'ActualPost'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPost'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern
ActualPost_milestone(element : InstanceSpecification, value : Element) {
	find ActualPost(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'stakeholderConcern' attribute of elements with the stereotype 'ActualPost'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPost'.
 * value : Element : A value of the attribute 'stakeholderConcern'.
 */
pattern
ActualPost_stakeholderConcern(element : InstanceSpecification, value : Element) {
	find ActualPost(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "stakeholderConcern", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualPost'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPost'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern
ActualPost_startDate(element : InstanceSpecification, value : Element) {
	find ActualPost(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ActualResource' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualResource.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualResource(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualResource");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResource'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualResource_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualCondition' attribute of elements with the stereotype 'ActualResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResource'.
 * value : Element : A value of the attribute 'actualCondition'.
 */
pattern
ActualResource_actualCondition(element : InstanceSpecification, value : Element) {
	find ActualResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "actualCondition", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResource'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualResource_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResource'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern
ActualResource_endDate(element : InstanceSpecification, value : Element) {
	find ActualResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'ActualResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResource'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern
ActualResource_milestone(element : InstanceSpecification, value : Element) {
	find ActualResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResource'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern
ActualResource_startDate(element : InstanceSpecification, value : Element) {
	find ActualResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ActualResponsibility' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualResponsibility.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualResponsibility(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualResponsibility");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualResponsibility'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResponsibility'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualResponsibility_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualResponsibility(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualCondition' attribute of elements with the stereotype 'ActualResponsibility'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResponsibility'.
 * value : Element : A value of the attribute 'actualCondition'.
 */
pattern
ActualResponsibility_actualCondition(element : InstanceSpecification, value : Element) {
	find ActualResponsibility(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "actualCondition", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualResponsibility'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResponsibility'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualResponsibility_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualResponsibility(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualResponsibility'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResponsibility'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern
ActualResponsibility_endDate(element : InstanceSpecification, value : Element) {
	find ActualResponsibility(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'ActualResponsibility'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResponsibility'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern
ActualResponsibility_milestone(element : InstanceSpecification, value : Element) {
	find ActualResponsibility(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'stakeholderConcern' attribute of elements with the stereotype 'ActualResponsibility'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResponsibility'.
 * value : Element : A value of the attribute 'stakeholderConcern'.
 */
pattern
ActualResponsibility_stakeholderConcern(element : InstanceSpecification, value : Element) {
	find ActualResponsibility(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "stakeholderConcern", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualResponsibility'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResponsibility'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern
ActualResponsibility_startDate(element : InstanceSpecification, value : Element) {
	find ActualResponsibility(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ActualResponsibleResource' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualResponsibleResource.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualResponsibleResource(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualResponsibleResource");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualResponsibleResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResponsibleResource'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualResponsibleResource_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualResponsibleResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualCondition' attribute of elements with the stereotype 'ActualResponsibleResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResponsibleResource'.
 * value : Element : A value of the attribute 'actualCondition'.
 */
pattern
ActualResponsibleResource_actualCondition(element : InstanceSpecification, value : Element) {
	find ActualResponsibleResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "actualCondition", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualResponsibleResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResponsibleResource'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualResponsibleResource_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualResponsibleResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualResponsibleResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResponsibleResource'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern
ActualResponsibleResource_endDate(element : InstanceSpecification, value : Element) {
	find ActualResponsibleResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'ActualResponsibleResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResponsibleResource'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern
ActualResponsibleResource_milestone(element : InstanceSpecification, value : Element) {
	find ActualResponsibleResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'stakeholderConcern' attribute of elements with the stereotype 'ActualResponsibleResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResponsibleResource'.
 * value : Element : A value of the attribute 'stakeholderConcern'.
 */
pattern
ActualResponsibleResource_stakeholderConcern(element : InstanceSpecification, value : Element) {
	find ActualResponsibleResource(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "stakeholderConcern", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualResponsibleResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualResponsibleResource'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern
ActualResponsibleResource_startDate(element : InstanceSpecification, value : Element) {
	find ActualResponsibleResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'FieldedCapability' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype FieldedCapability.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
FieldedCapability(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "FieldedCapability");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'FieldedCapability'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'FieldedCapability'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
FieldedCapability_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find FieldedCapability(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualCondition' attribute of elements with the stereotype 'FieldedCapability'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'FieldedCapability'.
 * value : Element : A value of the attribute 'actualCondition'.
 */
pattern
FieldedCapability_actualCondition(element : InstanceSpecification, value : Element) {
	find FieldedCapability(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "actualCondition", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'FieldedCapability'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'FieldedCapability'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
FieldedCapability_conformsTo(element : InstanceSpecification, value : Element) {
	find FieldedCapability(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'FieldedCapability'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'FieldedCapability'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern
FieldedCapability_endDate(element : InstanceSpecification, value : Element) {
	find FieldedCapability(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'FieldedCapability'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'FieldedCapability'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern
FieldedCapability_milestone(element : InstanceSpecification, value : Element) {
	find FieldedCapability(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'FieldedCapability'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'FieldedCapability'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern
FieldedCapability_startDate(element : InstanceSpecification, value : Element) {
	find FieldedCapability(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

// Actuals - Traceability

/*
 * Pattern that queries elements with the stereotype 'OwnsProcess' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype OwnsProcess.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OwnsProcess(element : Abstraction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OwnsProcess");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OwnsProcess'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsProcess'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OwnsProcess_URI(element : Abstraction, valuespec : LiteralString) {
	find OwnsProcess(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'OwnsProcess'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsProcess'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
OwnsProcess_actualMeasurementSet(element : Abstraction, value : Element) {
	find OwnsProcess(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OwnsProcess'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsProcess'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OwnsProcess_conformsTo(element : Abstraction, value : Element) {
	find OwnsProcess(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'OwnsProcess'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsProcess'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern OwnsProcess_measurementSet(element : Abstraction, value : Element) {
	find OwnsProcess(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'OwnsProcess'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsProcess'.
 * value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern OwnsProcess_sourceContext(element : Abstraction, value : Classifier) {
	find OwnsProcess(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'OwnsProcess'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsProcess'.
 * value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern
OwnsProcess_sourcePropertyPath(element : Abstraction, value : Property) {
	find OwnsProcess(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'OwnsProcess'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsProcess'.
 * value : Classifier : A value of the attribute 'targetContext'.
 */
pattern OwnsProcess_targetContext(element : Abstraction, value : Classifier) {
	find OwnsProcess(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'OwnsProcess'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsProcess'.
 * value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern
OwnsProcess_targetPropertyPath(element : Abstraction, value : Property) {
	find OwnsProcess(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

// Metadata - Connectivity

/*
 * Pattern that queries elements with the stereotype 'Exchange' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InformationFlow' object with the stereotype Exchange.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Exchange(element : InformationFlow, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Exchange");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Exchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Exchange'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Exchange_URI(element : InformationFlow, valuespec : LiteralString) {
	find Exchange(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'Exchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Exchange'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
Exchange_actualMeasurementSet(element : InformationFlow, value : Element) {
	find Exchange(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Exchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Exchange'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Exchange_conformsTo(element : InformationFlow, value : Element) {
	find Exchange(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'Exchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Exchange'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern Exchange_measurementSet(element : InformationFlow, value : Element) {
	find Exchange(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Resource' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype Resource.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Resource(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Resource");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Resource'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Resource'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Resource_URI(element : Element, valuespec : LiteralString) {
	find Resource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Resource'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Resource'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Resource_conformsTo(element : Element, value : Element) {
	find Resource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

// Metadata - Constraints

/*
 * Pattern that queries elements with the stereotype 'Rule' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Constraint' object with the stereotype Rule.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Rule(element : Constraint, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Rule");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Rule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'Rule'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Rule_URI(element : Constraint, valuespec : LiteralString) {
	find Rule(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'Rule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'Rule'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern Rule_actualMeasurementSet(element : Constraint, value : Element) {
	find Rule(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Rule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'Rule'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Rule_conformsTo(element : Constraint, value : Element) {
	find Rule(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'Rule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'Rule'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern Rule_measurementSet(element : Constraint, value : Element) {
	find Rule(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'ruleKind' attribute of elements with the stereotype 'Rule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'Rule'.
 * value : EnumerationLiteral : A value of the attribute 'ruleKind'.
 */
pattern Rule_ruleKind(element : Constraint, value : EnumerationLiteral) {
	find Rule(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "ruleKind", valuespec);
	InstanceValue.instance(valuespec, value);
}

// Metadata - Information

/*
 * Pattern that queries elements with the stereotype 'ArchitectureMetadata' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Comment' object with the stereotype ArchitectureMetadata.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ArchitectureMetadata(element : Comment, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ArchitectureMetadata");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ArchitectureMetadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'ArchitectureMetadata'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ArchitectureMetadata_URI(element : Comment, valuespec : LiteralString) {
	find ArchitectureMetadata(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ArchitectureMetadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'ArchitectureMetadata'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ArchitectureMetadata_actualMeasurementSet(element : Comment, value : Element) {
	find ArchitectureMetadata(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'category' attribute of elements with the stereotype 'ArchitectureMetadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'ArchitectureMetadata'.
 * valuespec : LiteralString : A value of the attribute 'category'.
 */
pattern
ArchitectureMetadata_category(element : Comment, valuespec : LiteralString) {
	find ArchitectureMetadata(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "category", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ArchitectureMetadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'ArchitectureMetadata'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ArchitectureMetadata_conformsTo(element : Comment, value : Element) {
	find ArchitectureMetadata(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'dublinCoreElement' attribute of elements with the stereotype 'ArchitectureMetadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'ArchitectureMetadata'.
 * valuespec : LiteralString : A value of the attribute 'dublinCoreElement'.
 */
pattern
ArchitectureMetadata_dublinCoreElement(element : Comment, valuespec : LiteralString) {
	find ArchitectureMetadata(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "dublinCoreElement", valuespec);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ArchitectureMetadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'ArchitectureMetadata'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ArchitectureMetadata_measurementSet(element : Comment, value : Element) {
	find ArchitectureMetadata(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'metaDataScheme' attribute of elements with the stereotype 'ArchitectureMetadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'ArchitectureMetadata'.
 * valuespec : LiteralString : A value of the attribute 'metaDataScheme'.
 */
pattern
ArchitectureMetadata_metaDataScheme(element : Comment, valuespec : LiteralString) {
	find ArchitectureMetadata(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "metaDataScheme", valuespec);
}

/*
 * Pattern that queries the 'name' attribute of elements with the stereotype 'ArchitectureMetadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'ArchitectureMetadata'.
 * valuespec : LiteralString : A value of the attribute 'name'.
 */
pattern
ArchitectureMetadata_name(element : Comment, valuespec : LiteralString) {
	find ArchitectureMetadata(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "name", valuespec);
}

/*
 * Pattern that queries elements with the stereotype 'Information' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Comment' object with the stereotype Information.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Information(element : Comment, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Information");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Information'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Information'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Information_URI(element : Comment, valuespec : LiteralString) {
	find Information(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'Information'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Information'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern Information_actualMeasurementSet(element : Comment, value : Element) {
	find Information(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Information'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Information'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Information_conformsTo(element : Comment, value : Element) {
	find Information(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'informationKind' attribute of elements with the stereotype 'Information'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Information'.
 * value : EnumerationLiteral : A value of the attribute 'informationKind'.
 */
pattern
Information_informationKind(element : Comment, value : EnumerationLiteral) {
	find Information(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "informationKind", valuespec);
	InstanceValue.instance(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'Information'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Information'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern Information_measurementSet(element : Comment, value : Element) {
	find Information(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Metadata' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Comment' object with the stereotype Metadata.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Metadata(element : Comment, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Metadata");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Metadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Metadata'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Metadata_URI(element : Comment, valuespec : LiteralString) {
	find Metadata(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'Metadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Metadata'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern Metadata_actualMeasurementSet(element : Comment, value : Element) {
	find Metadata(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'category' attribute of elements with the stereotype 'Metadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Metadata'.
 * valuespec : LiteralString : A value of the attribute 'category'.
 */
pattern Metadata_category(element : Comment, valuespec : LiteralString) {
	find Metadata(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "category", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Metadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Metadata'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Metadata_conformsTo(element : Comment, value : Element) {
	find Metadata(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'dublinCoreElement' attribute of elements with the stereotype 'Metadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Metadata'.
 * valuespec : LiteralString : A value of the attribute 'dublinCoreElement'.
 */
pattern
Metadata_dublinCoreElement(element : Comment, valuespec : LiteralString) {
	find Metadata(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "dublinCoreElement", valuespec);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'Metadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Metadata'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern Metadata_measurementSet(element : Comment, value : Element) {
	find Metadata(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'metaDataScheme' attribute of elements with the stereotype 'Metadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Metadata'.
 * valuespec : LiteralString : A value of the attribute 'metaDataScheme'.
 */
pattern
Metadata_metaDataScheme(element : Comment, valuespec : LiteralString) {
	find Metadata(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "metaDataScheme", valuespec);
}

/*
 * Pattern that queries the 'name' attribute of elements with the stereotype 'Metadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Metadata'.
 * valuespec : LiteralString : A value of the attribute 'name'.
 */
pattern Metadata_name(element : Comment, valuespec : LiteralString) {
	find Metadata(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "name", valuespec);
}

// Metadata - Processes

/*
 * Pattern that queries elements with the stereotype 'Activity' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Activity' object with the stereotype Activity.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Activity(element : Activity, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Activity");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Activity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Activity'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Activity_URI(element : Activity, valuespec : LiteralString) {
	find Activity(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'activityPerformableUnderCondition' attribute of elements with the stereotype 'Activity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Activity'.
 * value : Element : A value of the attribute 'activityPerformableUnderCondition'.
 */
pattern
Activity_activityPerformableUnderCondition(element : Activity, value : Element) {
	find Activity(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "activityPerformableUnderCondition", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'Activity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Activity'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern Activity_actualMeasurementSet(element : Activity, value : Element) {
	find Activity(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Activity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Activity'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Activity_conformsTo(element : Activity, value : Element) {
	find Activity(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'Activity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Activity'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern Activity_measurementSet(element : Activity, value : Element) {
	find Activity(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'CapableElement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype CapableElement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
CapableElement(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "CapableElement");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'CapableElement'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'CapableElement'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern CapableElement_URI(element : Element, valuespec : LiteralString) {
	find CapableElement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'CapableElement'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'CapableElement'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern CapableElement_conformsTo(element : Element, value : Element) {
	find CapableElement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'IsCapableToPerform' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype IsCapableToPerform.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
IsCapableToPerform(element : Abstraction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "IsCapableToPerform");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'IsCapableToPerform'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'IsCapableToPerform'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
IsCapableToPerform_URI(element : Abstraction, valuespec : LiteralString) {
	find IsCapableToPerform(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'IsCapableToPerform'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'IsCapableToPerform'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
IsCapableToPerform_actualMeasurementSet(element : Abstraction, value : Element) {
	find IsCapableToPerform(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'IsCapableToPerform'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'IsCapableToPerform'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
IsCapableToPerform_conformsTo(element : Abstraction, value : Element) {
	find IsCapableToPerform(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'IsCapableToPerform'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'IsCapableToPerform'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
IsCapableToPerform_measurementSet(element : Abstraction, value : Element) {
	find IsCapableToPerform(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'IsCapableToPerform'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'IsCapableToPerform'.
 * value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern
IsCapableToPerform_sourceContext(element : Abstraction, value : Classifier) {
	find IsCapableToPerform(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'IsCapableToPerform'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'IsCapableToPerform'.
 * value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern
IsCapableToPerform_sourcePropertyPath(element : Abstraction, value : Property) {
	find IsCapableToPerform(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'IsCapableToPerform'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'IsCapableToPerform'.
 * value : Classifier : A value of the attribute 'targetContext'.
 */
pattern
IsCapableToPerform_targetContext(element : Abstraction, value : Classifier) {
	find IsCapableToPerform(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'IsCapableToPerform'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'IsCapableToPerform'.
 * value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern
IsCapableToPerform_targetPropertyPath(element : Abstraction, value : Property) {
	find IsCapableToPerform(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'PerformsInContext' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype PerformsInContext.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
PerformsInContext(element : Abstraction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "PerformsInContext");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'PerformsInContext'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'PerformsInContext'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
PerformsInContext_URI(element : Abstraction, valuespec : LiteralString) {
	find PerformsInContext(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'PerformsInContext'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'PerformsInContext'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
PerformsInContext_actualMeasurementSet(element : Abstraction, value : Element) {
	find PerformsInContext(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'PerformsInContext'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'PerformsInContext'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern PerformsInContext_conformsTo(element : Abstraction, value : Element) {
	find PerformsInContext(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'PerformsInContext'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'PerformsInContext'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
PerformsInContext_measurementSet(element : Abstraction, value : Element) {
	find PerformsInContext(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'PerformsInContext'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'PerformsInContext'.
 * value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern
PerformsInContext_sourceContext(element : Abstraction, value : Classifier) {
	find PerformsInContext(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'PerformsInContext'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'PerformsInContext'.
 * value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern
PerformsInContext_sourcePropertyPath(element : Abstraction, value : Property) {
	find PerformsInContext(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'PerformsInContext'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'PerformsInContext'.
 * value : Classifier : A value of the attribute 'targetContext'.
 */
pattern
PerformsInContext_targetContext(element : Abstraction, value : Classifier) {
	find PerformsInContext(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'PerformsInContext'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'PerformsInContext'.
 * value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern
PerformsInContext_targetPropertyPath(element : Abstraction, value : Property) {
	find PerformsInContext(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

// Metadata - Taxonomy

/*
 * Pattern that queries elements with the stereotype 'ActualCondition' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualCondition.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualCondition(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualCondition");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualCondition'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualCondition'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualCondition_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualCondition(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualCondition'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualCondition'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualCondition_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualCondition(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualCondition'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualCondition'.
 * value : LiteralString : A value of the attribute 'endDate'.
 */
pattern
ActualCondition_endDate(element : InstanceSpecification, value : LiteralString) {
	find ActualCondition(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualCondition'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualCondition'.
 * value : LiteralString : A value of the attribute 'startDate'.
 */
pattern
ActualCondition_startDate(element : InstanceSpecification, value : LiteralString) {
	find ActualCondition(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ActualEnvironment' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualEnvironment.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualEnvironment(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualEnvironment");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualEnvironment'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualEnvironment'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualEnvironment_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualEnvironment(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualEnvironment'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualEnvironment'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualEnvironment_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualEnvironment(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualEnvironment'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualEnvironment'.
 * value : LiteralString : A value of the attribute 'endDate'.
 */
pattern
ActualEnvironment_endDate(element : InstanceSpecification, value : LiteralString) {
	find ActualEnvironment(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualEnvironment'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualEnvironment'.
 * value : LiteralString : A value of the attribute 'startDate'.
 */
pattern
ActualEnvironment_startDate(element : InstanceSpecification, value : LiteralString) {
	find ActualEnvironment(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ActualLocation' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualLocation.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualLocation(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualLocation");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualLocation'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualLocation'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualLocation_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualLocation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'address' attribute of elements with the stereotype 'ActualLocation'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualLocation'.
 * valuespec : LiteralString : A value of the attribute 'address'.
 */
pattern
ActualLocation_address(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualLocation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "address", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualLocation'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualLocation'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualLocation_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualLocation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'customKind' attribute of elements with the stereotype 'ActualLocation'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualLocation'.
 * valuespec : LiteralString : A value of the attribute 'customKind'.
 */
pattern
ActualLocation_customKind(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualLocation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "customKind", valuespec);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualLocation'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualLocation'.
 * value : LiteralString : A value of the attribute 'endDate'.
 */
pattern
ActualLocation_endDate(element : InstanceSpecification, value : LiteralString) {
	find ActualLocation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'locationKind' attribute of elements with the stereotype 'ActualLocation'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualLocation'.
 * value : EnumerationLiteral : A value of the attribute 'locationKind'.
 */
pattern
ActualLocation_locationKind(element : InstanceSpecification, value : EnumerationLiteral) {
	find ActualLocation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "locationKind", valuespec);
	InstanceValue.instance(valuespec, value);
}

/*
 * Pattern that queries the 'locationNamedByAddress' attribute of elements with the stereotype 'ActualLocation'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualLocation'.
 * valuespec : LiteralBoolean : A value of the attribute 'locationNamedByAddress'.
 */
pattern
ActualLocation_locationNamedByAddress(element : InstanceSpecification, valuespec : LiteralBoolean) {
	find ActualLocation(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "locationNamedByAddress", valuespec);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualLocation'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualLocation'.
 * value : LiteralString : A value of the attribute 'startDate'.
 */
pattern
ActualLocation_startDate(element : InstanceSpecification, value : LiteralString) {
	find ActualLocation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ActualMeasurement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Slot' object with the stereotype ActualMeasurement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualMeasurement(element : Slot, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualMeasurement");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualMeasurement'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualMeasurement'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActualMeasurement_URI(element : Slot, valuespec : LiteralString) {
	find ActualMeasurement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualMeasurement'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualMeasurement'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActualMeasurement_conformsTo(element : Slot, value : Element) {
	find ActualMeasurement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualMeasurement'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualMeasurement'.
 * value : LiteralString : A value of the attribute 'endDate'.
 */
pattern ActualMeasurement_endDate(element : Slot, value : LiteralString) {
	find ActualMeasurement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'intention' attribute of elements with the stereotype 'ActualMeasurement'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualMeasurement'.
 * value : EnumerationLiteral : A value of the attribute 'intention'.
 */
pattern
ActualMeasurement_intention(element : Slot, value : EnumerationLiteral) {
	find ActualMeasurement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "intention", valuespec);
	InstanceValue.instance(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualMeasurement'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualMeasurement'.
 * value : LiteralString : A value of the attribute 'startDate'.
 */
pattern ActualMeasurement_startDate(element : Slot, value : LiteralString) {
	find ActualMeasurement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ActualMeasurementSet' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualMeasurementSet.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualMeasurementSet(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualMeasurementSet");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualMeasurementSet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualMeasurementSet'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualMeasurementSet_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualMeasurementSet(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'appliesFor' attribute of elements with the stereotype 'ActualMeasurementSet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualMeasurementSet'.
 * value : Element : A value of the attribute 'appliesFor'.
 */
pattern
ActualMeasurementSet_appliesFor(element : InstanceSpecification, value : Element) {
	find ActualMeasurementSet(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "appliesFor", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualMeasurementSet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualMeasurementSet'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualMeasurementSet_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualMeasurementSet(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualMeasurementSet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualMeasurementSet'.
 * value : LiteralString : A value of the attribute 'endDate'.
 */
pattern
ActualMeasurementSet_endDate(element : InstanceSpecification, value : LiteralString) {
	find ActualMeasurementSet(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualMeasurementSet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualMeasurementSet'.
 * value : LiteralString : A value of the attribute 'startDate'.
 */
pattern
ActualMeasurementSet_startDate(element : InstanceSpecification, value : LiteralString) {
	find ActualMeasurementSet(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ActualPropertySet' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualPropertySet.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualPropertySet(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualPropertySet");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualPropertySet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPropertySet'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualPropertySet_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualPropertySet(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualPropertySet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPropertySet'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualPropertySet_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualPropertySet(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualPropertySet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPropertySet'.
 * value : LiteralString : A value of the attribute 'endDate'.
 */
pattern
ActualPropertySet_endDate(element : InstanceSpecification, value : LiteralString) {
	find ActualPropertySet(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualPropertySet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPropertySet'.
 * value : LiteralString : A value of the attribute 'startDate'.
 */
pattern
ActualPropertySet_startDate(element : InstanceSpecification, value : LiteralString) {
	find ActualPropertySet(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ActualState' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype ActualState.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualState(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualState");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualState'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ActualState'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActualState_URI(element : Element, valuespec : LiteralString) {
	find ActualState(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualState'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ActualState'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActualState_conformsTo(element : Element, value : Element) {
	find ActualState(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualState'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ActualState'.
 * value : LiteralString : A value of the attribute 'endDate'.
 */
pattern ActualState_endDate(element : Element, value : LiteralString) {
	find ActualState(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualState'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ActualState'.
 * value : LiteralString : A value of the attribute 'startDate'.
 */
pattern ActualState_startDate(element : Element, value : LiteralString) {
	find ActualState(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Alias' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Comment' object with the stereotype Alias.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Alias(element : Comment, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Alias");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Alias'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Alias'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Alias_URI(element : Comment, valuespec : LiteralString) {
	find Alias(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'Alias'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Alias'.
 * value : InstanceSpecification : A value of the attribute 'actualMeasurementSet'.
 */
pattern
Alias_actualMeasurementSet(element : Comment, value : InstanceSpecification) {
	find Alias(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Alias'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Alias'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Alias_conformsTo(element : Comment, value : Element) {
	find Alias(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'Alias'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Alias'.
 * value : DataType : A value of the attribute 'measurementSet'.
 */
pattern Alias_measurementSet(element : Comment, value : DataType) {
	find Alias(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'nameOwner' attribute of elements with the stereotype 'Alias'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Alias'.
 * valuespec : LiteralString : A value of the attribute 'nameOwner'.
 */
pattern Alias_nameOwner(element : Comment, valuespec : LiteralString) {
	find Alias(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "nameOwner", valuespec);
}

/*
 * Pattern that queries elements with the stereotype 'Condition' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'DataType' object with the stereotype Condition.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Condition(element : DataType, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Condition");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Condition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Condition'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Condition_URI(element : DataType, valuespec : LiteralString) {
	find Condition(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conditionKind' attribute of elements with the stereotype 'Condition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Condition'.
 * valuespec : LiteralString : A value of the attribute 'conditionKind'.
 */
pattern
Condition_conditionKind(element : DataType, valuespec : LiteralString) {
	find Condition(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conditionKind", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Condition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Condition'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Condition_conformsTo(element : DataType, value : Element) {
	find Condition(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'quantityKind' attribute of elements with the stereotype 'Condition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Condition'.
 * value : InstanceSpecification : A value of the attribute 'quantityKind'.
 */
pattern
Condition_quantityKind(element : DataType, value : InstanceSpecification) {
	find Condition(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "quantityKind", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'unit' attribute of elements with the stereotype 'Condition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Condition'.
 * value : InstanceSpecification : A value of the attribute 'unit'.
 */
pattern Condition_unit(element : DataType, value : InstanceSpecification) {
	find Condition(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "unit", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Definition' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Comment' object with the stereotype Definition.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Definition(element : Comment, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Definition");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Definition'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Definition'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Definition_URI(element : Comment, valuespec : LiteralString) {
	find Definition(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'Definition'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Definition'.
 * value : InstanceSpecification : A value of the attribute 'actualMeasurementSet'.
 */
pattern
Definition_actualMeasurementSet(element : Comment, value : InstanceSpecification) {
	find Definition(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'author' attribute of elements with the stereotype 'Definition'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Definition'.
 * valuespec : LiteralString : A value of the attribute 'author'.
 */
pattern Definition_author(element : Comment, valuespec : LiteralString) {
	find Definition(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "author", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Definition'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Definition'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Definition_conformsTo(element : Comment, value : Element) {
	find Definition(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'Definition'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Definition'.
 * value : DataType : A value of the attribute 'measurementSet'.
 */
pattern Definition_measurementSet(element : Comment, value : DataType) {
	find Definition(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Environment' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'DataType' object with the stereotype Environment.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Environment(element : DataType, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Environment");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Environment'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Environment'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Environment_URI(element : DataType, valuespec : LiteralString) {
	find Environment(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conditionKind' attribute of elements with the stereotype 'Environment'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Environment'.
 * valuespec : LiteralString : A value of the attribute 'conditionKind'.
 */
pattern
Environment_conditionKind(element : DataType, valuespec : LiteralString) {
	find Environment(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conditionKind", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Environment'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Environment'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Environment_conformsTo(element : DataType, value : Element) {
	find Environment(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'kind' attribute of elements with the stereotype 'Environment'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Environment'.
 * value : EnumerationLiteral : A value of the attribute 'kind'.
 */
pattern Environment_kind(element : DataType, value : EnumerationLiteral) {
	find Environment(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "kind", valuespec);
	InstanceValue.instance(valuespec, value);
}

/*
 * Pattern that queries the 'quantityKind' attribute of elements with the stereotype 'Environment'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Environment'.
 * value : InstanceSpecification : A value of the attribute 'quantityKind'.
 */
pattern
Environment_quantityKind(element : DataType, value : InstanceSpecification) {
	find Environment(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "quantityKind", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'unit' attribute of elements with the stereotype 'Environment'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Environment'.
 * value : InstanceSpecification : A value of the attribute 'unit'.
 */
pattern Environment_unit(element : DataType, value : InstanceSpecification) {
	find Environment(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "unit", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'EnvironmentProperty' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype EnvironmentProperty.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
EnvironmentProperty(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "EnvironmentProperty");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'EnvironmentProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'EnvironmentProperty'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
EnvironmentProperty_URI(element : Property, valuespec : LiteralString) {
	find EnvironmentProperty(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'EnvironmentProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'EnvironmentProperty'.
 * value : InstanceSpecification : A value of the attribute 'actualMeasurementSet'.
 */
pattern
EnvironmentProperty_actualMeasurementSet(element : Property, value : InstanceSpecification) {
	find EnvironmentProperty(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'EnvironmentProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'EnvironmentProperty'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern EnvironmentProperty_conformsTo(element : Property, value : Element) {
	find EnvironmentProperty(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'EnvironmentProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'EnvironmentProperty'.
 * value : DataType : A value of the attribute 'measurementSet'.
 */
pattern
EnvironmentProperty_measurementSet(element : Property, value : DataType) {
	find EnvironmentProperty(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'GeoPoliticalExtentType' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'DataType' object with the stereotype GeoPoliticalExtentType.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
GeoPoliticalExtentType(element : DataType, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "GeoPoliticalExtentType");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
GeoPoliticalExtentType_URI(element : DataType, valuespec : LiteralString) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conditionKind' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * valuespec : LiteralString : A value of the attribute 'conditionKind'.
 */
pattern
GeoPoliticalExtentType_conditionKind(element : DataType, valuespec : LiteralString) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conditionKind", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
GeoPoliticalExtentType_conformsTo(element : DataType, value : Element) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'customKind' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * valuespec : LiteralString : A value of the attribute 'customKind'.
 */
pattern
GeoPoliticalExtentType_customKind(element : DataType, valuespec : LiteralString) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "customKind", valuespec);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * value : Element : A value of the attribute 'function'.
 */
pattern GeoPoliticalExtentType_function(element : DataType, value : Element) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'kind' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * value : EnumerationLiteral : A value of the attribute 'kind'.
 */
pattern
GeoPoliticalExtentType_kind(element : DataType, value : EnumerationLiteral) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "kind", valuespec);
	InstanceValue.instance(valuespec, value);
}

/*
 * Pattern that queries the 'quantityKind' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * value : InstanceSpecification : A value of the attribute 'quantityKind'.
 */
pattern
GeoPoliticalExtentType_quantityKind(element : DataType, value : InstanceSpecification) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "quantityKind", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'unit' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * value : InstanceSpecification : A value of the attribute 'unit'.
 */
pattern
GeoPoliticalExtentType_unit(element : DataType, value : InstanceSpecification) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "unit", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ISO8601DateTime' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'LiteralString' object with the stereotype ISO8601DateTime.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ISO8601DateTime(element : LiteralString, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ISO8601DateTime");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ISO8601DateTime'.
 *
 * Parameters:
 * element: 'LiteralString' object with the stereotype 'ISO8601DateTime'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ISO8601DateTime_URI(element : LiteralString, valuespec : LiteralString) {
	find ISO8601DateTime(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ISO8601DateTime'.
 *
 * Parameters:
 * element: 'LiteralString' object with the stereotype 'ISO8601DateTime'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ISO8601DateTime_conformsTo(element : LiteralString, value : Element) {
	find ISO8601DateTime(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Location' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'DataType' object with the stereotype Location.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Location(element : DataType, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Location");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Location'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Location'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Location_URI(element : DataType, valuespec : LiteralString) {
	find Location(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conditionKind' attribute of elements with the stereotype 'Location'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Location'.
 * valuespec : LiteralString : A value of the attribute 'conditionKind'.
 */
pattern
Location_conditionKind(element : DataType, valuespec : LiteralString) {
	find Location(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conditionKind", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Location'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Location'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Location_conformsTo(element : DataType, value : Element) {
	find Location(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'customKind' attribute of elements with the stereotype 'Location'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Location'.
 * valuespec : LiteralString : A value of the attribute 'customKind'.
 */
pattern Location_customKind(element : DataType, valuespec : LiteralString) {
	find Location(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "customKind", valuespec);
}

/*
 * Pattern that queries the 'kind' attribute of elements with the stereotype 'Location'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Location'.
 * value : EnumerationLiteral : A value of the attribute 'kind'.
 */
pattern Location_kind(element : DataType, value : EnumerationLiteral) {
	find Location(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "kind", valuespec);
	InstanceValue.instance(valuespec, value);
}

/*
 * Pattern that queries the 'quantityKind' attribute of elements with the stereotype 'Location'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Location'.
 * value : InstanceSpecification : A value of the attribute 'quantityKind'.
 */
pattern
Location_quantityKind(element : DataType, value : InstanceSpecification) {
	find Location(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "quantityKind", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'unit' attribute of elements with the stereotype 'Location'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Location'.
 * value : InstanceSpecification : A value of the attribute 'unit'.
 */
pattern Location_unit(element : DataType, value : InstanceSpecification) {
	find Location(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "unit", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'LocationHolder' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype LocationHolder.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
LocationHolder(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "LocationHolder");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'LocationHolder'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'LocationHolder'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern LocationHolder_URI(element : Element, valuespec : LiteralString) {
	find LocationHolder(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'LocationHolder'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'LocationHolder'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern LocationHolder_conformsTo(element : Element, value : Element) {
	find LocationHolder(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'LocationHolder'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'LocationHolder'.
 * value : InstanceSpecification : A value of the attribute 'physicalLocation'.
 */
pattern
LocationHolder_physicalLocation(element : Element, value : InstanceSpecification) {
	find LocationHolder(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'LocationHolder'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'LocationHolder'.
 * value : DataType : A value of the attribute 'requiredEnvironment'.
 */
pattern
LocationHolder_requiredEnvironment(element : Element, value : DataType) {
	find LocationHolder(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'MeasurableElement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype MeasurableElement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
MeasurableElement(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "MeasurableElement");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'MeasurableElement'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'MeasurableElement'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern MeasurableElement_URI(element : Element, valuespec : LiteralString) {
	find MeasurableElement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'MeasurableElement'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'MeasurableElement'.
 * value : InstanceSpecification : A value of the attribute 'actualMeasurementSet'.
 */
pattern
MeasurableElement_actualMeasurementSet(element : Element, value : InstanceSpecification) {
	find MeasurableElement(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'MeasurableElement'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'MeasurableElement'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern MeasurableElement_conformsTo(element : Element, value : Element) {
	find MeasurableElement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'MeasurableElement'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'MeasurableElement'.
 * value : DataType : A value of the attribute 'measurementSet'.
 */
pattern
MeasurableElement_measurementSet(element : Element, value : DataType) {
	find MeasurableElement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Measurement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype Measurement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Measurement(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Measurement");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Measurement'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Measurement'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Measurement_URI(element : Property, valuespec : LiteralString) {
	find Measurement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'Measurement'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Measurement'.
 * value : InstanceSpecification : A value of the attribute 'actualMeasurementSet'.
 */
pattern
Measurement_actualMeasurementSet(element : Property, value : InstanceSpecification) {
	find Measurement(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Measurement'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Measurement'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Measurement_conformsTo(element : Property, value : Element) {
	find Measurement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'environmentalContext' attribute of elements with the stereotype 'Measurement'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Measurement'.
 * value : DataType : A value of the attribute 'environmentalContext'.
 */
pattern
Measurement_environmentalContext(element : Property, value : DataType) {
	find Measurement(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "environmentalContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'Measurement'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Measurement'.
 * value : DataType : A value of the attribute 'measurementSet'.
 */
pattern Measurement_measurementSet(element : Property, value : DataType) {
	find Measurement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'MeasurementSet' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'DataType' object with the stereotype MeasurementSet.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
MeasurementSet(element : DataType, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "MeasurementSet");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'MeasurementSet'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'MeasurementSet'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern MeasurementSet_URI(element : DataType, valuespec : LiteralString) {
	find MeasurementSet(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'appliesFor' attribute of elements with the stereotype 'MeasurementSet'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'MeasurementSet'.
 * value : Element : A value of the attribute 'appliesFor'.
 */
pattern MeasurementSet_appliesFor(element : DataType, value : Element) {
	find MeasurementSet(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "appliesFor", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'MeasurementSet'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'MeasurementSet'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern MeasurementSet_conformsTo(element : DataType, value : Element) {
	find MeasurementSet(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'quantityKind' attribute of elements with the stereotype 'MeasurementSet'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'MeasurementSet'.
 * value : InstanceSpecification : A value of the attribute 'quantityKind'.
 */
pattern
MeasurementSet_quantityKind(element : DataType, value : InstanceSpecification) {
	find MeasurementSet(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "quantityKind", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'unit' attribute of elements with the stereotype 'MeasurementSet'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'MeasurementSet'.
 * value : InstanceSpecification : A value of the attribute 'unit'.
 */
pattern
MeasurementSet_unit(element : DataType, value : InstanceSpecification) {
	find MeasurementSet(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "unit", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'PropertySet' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype PropertySet.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
PropertySet(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "PropertySet");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'PropertySet'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'PropertySet'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern PropertySet_URI(element : Element, valuespec : LiteralString) {
	find PropertySet(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'PropertySet'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'PropertySet'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern PropertySet_conformsTo(element : Element, value : Element) {
	find PropertySet(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'SameAs' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype SameAs.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
SameAs(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "SameAs");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SameAs'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'SameAs'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern SameAs_URI(element : Dependency, valuespec : LiteralString) {
	find SameAs(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'SameAs'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'SameAs'.
 * value : InstanceSpecification : A value of the attribute 'actualMeasurementSet'.
 */
pattern
SameAs_actualMeasurementSet(element : Dependency, value : InstanceSpecification) {
	find SameAs(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SameAs'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'SameAs'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern SameAs_conformsTo(element : Dependency, value : Element) {
	find SameAs(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'SameAs'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'SameAs'.
 * value : DataType : A value of the attribute 'measurementSet'.
 */
pattern SameAs_measurementSet(element : Dependency, value : DataType) {
	find SameAs(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Metadata - Traceability

/*
 * Pattern that queries elements with the stereotype 'ArchitecturalReference' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype ArchitecturalReference.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ArchitecturalReference(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ArchitecturalReference");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ArchitecturalReference'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArchitecturalReference'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ArchitecturalReference_URI(element : Dependency, valuespec : LiteralString) {
	find ArchitecturalReference(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ArchitecturalReference'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArchitecturalReference'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ArchitecturalReference_actualMeasurementSet(element : Dependency, value : Element) {
	find ArchitecturalReference(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ArchitecturalReference'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArchitecturalReference'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ArchitecturalReference_conformsTo(element : Dependency, value : Element) {
	find ArchitecturalReference(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ArchitecturalReference'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArchitecturalReference'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ArchitecturalReference_measurementSet(element : Dependency, value : Element) {
	find ArchitecturalReference(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Implements' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype Implements.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Implements(element : Abstraction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Implements");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Implements'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Implements'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Implements_URI(element : Abstraction, valuespec : LiteralString) {
	find Implements(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'Implements'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Implements'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
Implements_actualMeasurementSet(element : Abstraction, value : Element) {
	find Implements(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Implements'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Implements'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Implements_conformsTo(element : Abstraction, value : Element) {
	find Implements(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'Implements'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Implements'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern Implements_measurementSet(element : Abstraction, value : Element) {
	find Implements(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'Implements'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Implements'.
 * value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern Implements_sourceContext(element : Abstraction, value : Classifier) {
	find Implements(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'Implements'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Implements'.
 * value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern
Implements_sourcePropertyPath(element : Abstraction, value : Property) {
	find Implements(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'Implements'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Implements'.
 * value : Classifier : A value of the attribute 'targetContext'.
 */
pattern Implements_targetContext(element : Abstraction, value : Classifier) {
	find Implements(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'Implements'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Implements'.
 * value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern
Implements_targetPropertyPath(element : Abstraction, value : Property) {
	find Implements(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

// Operational - Connectivity

/*
 * Pattern that queries elements with the stereotype 'OperationalConnector' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Connector' object with the stereotype OperationalConnector.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalConnector(element : Connector, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalConnector");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'OperationalConnector'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
OperationalConnector_URI(element : Connector, valuespec : LiteralString) {
	find OperationalConnector(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'OperationalConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'OperationalConnector'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
OperationalConnector_actualMeasurementSet(element : Connector, value : Element) {
	find OperationalConnector(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'OperationalConnector'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
OperationalConnector_conformsTo(element : Connector, value : Element) {
	find OperationalConnector(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'OperationalConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'OperationalConnector'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
OperationalConnector_measurementSet(element : Connector, value : Element) {
	find OperationalConnector(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'OperationalExchange' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InformationFlow' object with the stereotype OperationalExchange.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalExchange(element : InformationFlow, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalExchange");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalExchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'OperationalExchange'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
OperationalExchange_URI(element : InformationFlow, valuespec : LiteralString) {
	find OperationalExchange(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'OperationalExchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'OperationalExchange'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
OperationalExchange_actualMeasurementSet(element : InformationFlow, value : Element) {
	find OperationalExchange(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalExchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'OperationalExchange'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
OperationalExchange_conformsTo(element : InformationFlow, value : Element) {
	find OperationalExchange(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'exchangeKind' attribute of elements with the stereotype 'OperationalExchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'OperationalExchange'.
 * value : EnumerationLiteral : A value of the attribute 'exchangeKind'.
 */
pattern
OperationalExchange_exchangeKind(element : InformationFlow, value : EnumerationLiteral) {
	find OperationalExchange(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "exchangeKind", valuespec);
	InstanceValue.instance(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'OperationalExchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'OperationalExchange'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
OperationalExchange_measurementSet(element : InformationFlow, value : Element) {
	find OperationalExchange(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'trustlevel' attribute of elements with the stereotype 'OperationalExchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'OperationalExchange'.
 * valuespec : LiteralReal : A value of the attribute 'trustlevel'.
 */
pattern
OperationalExchange_trustlevel(element : InformationFlow, valuespec : LiteralReal) {
	find OperationalExchange(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "trustlevel", valuespec);
}

/*
 * Pattern that queries elements with the stereotype 'OperationalExchangeItem' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype OperationalExchangeItem.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalExchangeItem(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalExchangeItem");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalExchangeItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OperationalExchangeItem'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
OperationalExchangeItem_URI(element : Element, valuespec : LiteralString) {
	find OperationalExchangeItem(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'activity' attribute of elements with the stereotype 'OperationalExchangeItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OperationalExchangeItem'.
 * value : Element : A value of the attribute 'activity'.
 */
pattern OperationalExchangeItem_activity(element : Element, value : Element) {
	find OperationalExchangeItem(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "activity", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalExchangeItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OperationalExchangeItem'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
OperationalExchangeItem_conformsTo(element : Element, value : Element) {
	find OperationalExchangeItem(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'OperationalInterface' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype OperationalInterface.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalInterface(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalInterface");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalInterface'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalInterface'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OperationalInterface_URI(element : Class, valuespec : LiteralString) {
	find OperationalInterface(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalInterface'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalInterface'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalInterface_conformsTo(element : Class, value : Element) {
	find OperationalInterface(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'OperationalInterface'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalInterface'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
OperationalInterface_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find OperationalInterface(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries elements with the stereotype 'OperationalSignal' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Signal' object with the stereotype OperationalSignal.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalSignal(element : Signal, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalSignal");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalSignal'.
 *
 * Parameters:
 * element: 'Signal' object with the stereotype 'OperationalSignal'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OperationalSignal_URI(element : Signal, valuespec : LiteralString) {
	find OperationalSignal(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalSignal'.
 *
 * Parameters:
 * element: 'Signal' object with the stereotype 'OperationalSignal'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalSignal_conformsTo(element : Signal, value : Element) {
	find OperationalSignal(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'OperationalSignalProperty' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype OperationalSignalProperty.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalSignalProperty(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalSignalProperty");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalSignalProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'OperationalSignalProperty'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
OperationalSignalProperty_URI(element : Property, valuespec : LiteralString) {
	find OperationalSignalProperty(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'OperationalSignalProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'OperationalSignalProperty'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
OperationalSignalProperty_actualMeasurementSet(element : Property, value : Element) {
	find OperationalSignalProperty(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalSignalProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'OperationalSignalProperty'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
OperationalSignalProperty_conformsTo(element : Property, value : Element) {
	find OperationalSignalProperty(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'OperationalSignalProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'OperationalSignalProperty'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
OperationalSignalProperty_measurementSet(element : Property, value : Element) {
	find OperationalSignalProperty(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Operational - Constraints

/*
 * Pattern that queries elements with the stereotype 'OperationalConstraint' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Constraint' object with the stereotype OperationalConstraint.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalConstraint(element : Constraint, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalConstraint");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'OperationalConstraint'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
OperationalConstraint_URI(element : Constraint, valuespec : LiteralString) {
	find OperationalConstraint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'OperationalConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'OperationalConstraint'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
OperationalConstraint_actualMeasurementSet(element : Constraint, value : Element) {
	find OperationalConstraint(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'OperationalConstraint'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
OperationalConstraint_conformsTo(element : Constraint, value : Element) {
	find OperationalConstraint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'OperationalConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'OperationalConstraint'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
OperationalConstraint_measurementSet(element : Constraint, value : Element) {
	find OperationalConstraint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'ruleKind' attribute of elements with the stereotype 'OperationalConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'OperationalConstraint'.
 * value : EnumerationLiteral : A value of the attribute 'ruleKind'.
 */
pattern
OperationalConstraint_ruleKind(element : Constraint, value : EnumerationLiteral) {
	find OperationalConstraint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "ruleKind", valuespec);
	InstanceValue.instance(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'SubjectOfOperationalConstraint' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype SubjectOfOperationalConstraint.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
SubjectOfOperationalConstraint(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "SubjectOfOperationalConstraint");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SubjectOfOperationalConstraint'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfOperationalConstraint'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
SubjectOfOperationalConstraint_URI(element : Element, valuespec : LiteralString) {
	find SubjectOfOperationalConstraint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SubjectOfOperationalConstraint'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfOperationalConstraint'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
SubjectOfOperationalConstraint_conformsTo(element : Element, value : Element) {
	find SubjectOfOperationalConstraint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

// Operational - Information

/*
 * Pattern that queries elements with the stereotype 'InformationElement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype InformationElement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
InformationElement(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "InformationElement");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'InformationElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'InformationElement'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern InformationElement_URI(element : Class, valuespec : LiteralString) {
	find InformationElement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'InformationElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'InformationElement'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern
InformationElement_categoryCategorizesAsset(element : Class, value : Element) {
	find InformationElement(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'InformationElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'InformationElement'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern InformationElement_conformsTo(element : Class, value : Element) {
	find InformationElement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'InformationElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'InformationElement'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
InformationElement_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find InformationElement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'InformationElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'InformationElement'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern
InformationElement_physicalLocation(element : Class, value : Element) {
	find InformationElement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'InformationElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'InformationElement'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern
InformationElement_requiredEnvironment(element : Class, value : Element) {
	find InformationElement(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

// Operational - Interaction Scenarios

/*
 * Pattern that queries elements with the stereotype 'OperationalMessage' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Message' object with the stereotype OperationalMessage.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalMessage(element : Message, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalMessage");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'OperationalMessage'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OperationalMessage_URI(element : Message, valuespec : LiteralString) {
	find OperationalMessage(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'OperationalMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'OperationalMessage'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
OperationalMessage_actualMeasurementSet(element : Message, value : Element) {
	find OperationalMessage(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'OperationalMessage'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalMessage_conformsTo(element : Message, value : Element) {
	find OperationalMessage(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'OperationalMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'OperationalMessage'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
OperationalMessage_measurementSet(element : Message, value : Element) {
	find OperationalMessage(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Operational - Processes

/*
 * Pattern that queries elements with the stereotype 'OperationalActivity' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Activity' object with the stereotype OperationalActivity.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalActivity(element : Activity, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalActivity");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'OperationalActivity'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
OperationalActivity_URI(element : Activity, valuespec : LiteralString) {
	find OperationalActivity(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'activityPerformableUnderCondition' attribute of elements with the stereotype 'OperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'OperationalActivity'.
 * value : Element : A value of the attribute 'activityPerformableUnderCondition'.
 */
pattern
OperationalActivity_activityPerformableUnderCondition(element : Activity, value : Element) {
	find OperationalActivity(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "activityPerformableUnderCondition", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'OperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'OperationalActivity'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
OperationalActivity_actualMeasurementSet(element : Activity, value : Element) {
	find OperationalActivity(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'affectedResource' attribute of elements with the stereotype 'OperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'OperationalActivity'.
 * value : Element : A value of the attribute 'affectedResource'.
 */
pattern
OperationalActivity_affectedResource(element : Activity, value : Element) {
	find OperationalActivity(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "affectedResource", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'OperationalActivity'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalActivity_conformsTo(element : Activity, value : Element) {
	find OperationalActivity(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'OperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'OperationalActivity'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
OperationalActivity_measurementSet(element : Activity, value : Element) {
	find OperationalActivity(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'OperationalActivityAction' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'CallBehaviorAction' object with the stereotype OperationalActivityAction.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalActivityAction(element : CallBehaviorAction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalActivityAction");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'OperationalActivityAction'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
OperationalActivityAction_URI(element : CallBehaviorAction, valuespec : LiteralString) {
	find OperationalActivityAction(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'OperationalActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'OperationalActivityAction'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
OperationalActivityAction_actualMeasurementSet(element : CallBehaviorAction, value : Element) {
	find OperationalActivityAction(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'OperationalActivityAction'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
OperationalActivityAction_conformsTo(element : CallBehaviorAction, value : Element) {
	find OperationalActivityAction(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'OperationalActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'OperationalActivityAction'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
OperationalActivityAction_measurementSet(element : CallBehaviorAction, value : Element) {
	find OperationalActivityAction(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'OperationalActivityEdge' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'ActivityEdge' object with the stereotype OperationalActivityEdge.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalActivityEdge(element : ActivityEdge, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalActivityEdge");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalActivityEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'OperationalActivityEdge'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
OperationalActivityEdge_URI(element : ActivityEdge, valuespec : LiteralString) {
	find OperationalActivityEdge(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'OperationalActivityEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'OperationalActivityEdge'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
OperationalActivityEdge_actualMeasurementSet(element : ActivityEdge, value : Element) {
	find OperationalActivityEdge(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalActivityEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'OperationalActivityEdge'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
OperationalActivityEdge_conformsTo(element : ActivityEdge, value : Element) {
	find OperationalActivityEdge(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'OperationalActivityEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'OperationalActivityEdge'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
OperationalActivityEdge_measurementSet(element : ActivityEdge, value : Element) {
	find OperationalActivityEdge(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'OperationalControlFlow' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'ControlFlow' object with the stereotype OperationalControlFlow.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalControlFlow(element : ControlFlow, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalControlFlow");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalControlFlow'.
 *
 * Parameters:
 * element: 'ControlFlow' object with the stereotype 'OperationalControlFlow'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
OperationalControlFlow_URI(element : ControlFlow, valuespec : LiteralString) {
	find OperationalControlFlow(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'OperationalControlFlow'.
 *
 * Parameters:
 * element: 'ControlFlow' object with the stereotype 'OperationalControlFlow'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
OperationalControlFlow_actualMeasurementSet(element : ControlFlow, value : Element) {
	find OperationalControlFlow(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalControlFlow'.
 *
 * Parameters:
 * element: 'ControlFlow' object with the stereotype 'OperationalControlFlow'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
OperationalControlFlow_conformsTo(element : ControlFlow, value : Element) {
	find OperationalControlFlow(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'OperationalControlFlow'.
 *
 * Parameters:
 * element: 'ControlFlow' object with the stereotype 'OperationalControlFlow'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
OperationalControlFlow_measurementSet(element : ControlFlow, value : Element) {
	find OperationalControlFlow(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'OperationalObjectFlow' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'ObjectFlow' object with the stereotype OperationalObjectFlow.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalObjectFlow(element : ObjectFlow, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalObjectFlow");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalObjectFlow'.
 *
 * Parameters:
 * element: 'ObjectFlow' object with the stereotype 'OperationalObjectFlow'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
OperationalObjectFlow_URI(element : ObjectFlow, valuespec : LiteralString) {
	find OperationalObjectFlow(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'OperationalObjectFlow'.
 *
 * Parameters:
 * element: 'ObjectFlow' object with the stereotype 'OperationalObjectFlow'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
OperationalObjectFlow_actualMeasurementSet(element : ObjectFlow, value : Element) {
	find OperationalObjectFlow(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalObjectFlow'.
 *
 * Parameters:
 * element: 'ObjectFlow' object with the stereotype 'OperationalObjectFlow'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
OperationalObjectFlow_conformsTo(element : ObjectFlow, value : Element) {
	find OperationalObjectFlow(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'OperationalObjectFlow'.
 *
 * Parameters:
 * element: 'ObjectFlow' object with the stereotype 'OperationalObjectFlow'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
OperationalObjectFlow_measurementSet(element : ObjectFlow, value : Element) {
	find OperationalObjectFlow(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'StandardOperationalActivity' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Activity' object with the stereotype StandardOperationalActivity.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
StandardOperationalActivity(element : Activity, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "StandardOperationalActivity");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'StandardOperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'StandardOperationalActivity'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
StandardOperationalActivity_URI(element : Activity, valuespec : LiteralString) {
	find StandardOperationalActivity(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'activityPerformableUnderCondition' attribute of elements with the stereotype 'StandardOperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'StandardOperationalActivity'.
 * value : Element : A value of the attribute 'activityPerformableUnderCondition'.
 */
pattern
StandardOperationalActivity_activityPerformableUnderCondition(element : Activity, value : Element) {
	find StandardOperationalActivity(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "activityPerformableUnderCondition", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'StandardOperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'StandardOperationalActivity'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
StandardOperationalActivity_actualMeasurementSet(element : Activity, value : Element) {
	find StandardOperationalActivity(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'affectedResource' attribute of elements with the stereotype 'StandardOperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'StandardOperationalActivity'.
 * value : Element : A value of the attribute 'affectedResource'.
 */
pattern
StandardOperationalActivity_affectedResource(element : Activity, value : Element) {
	find StandardOperationalActivity(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "affectedResource", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'StandardOperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'StandardOperationalActivity'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
StandardOperationalActivity_conformsTo(element : Activity, value : Element) {
	find StandardOperationalActivity(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'StandardOperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'StandardOperationalActivity'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
StandardOperationalActivity_measurementSet(element : Activity, value : Element) {
	find StandardOperationalActivity(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Operational - States

/*
 * Pattern that queries elements with the stereotype 'OperationalStateDescription' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'StateMachine' object with the stereotype OperationalStateDescription.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalStateDescription(element : StateMachine, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalStateDescription");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalStateDescription'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'OperationalStateDescription'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
OperationalStateDescription_URI(element : StateMachine, valuespec : LiteralString) {
	find OperationalStateDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'OperationalStateDescription'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'OperationalStateDescription'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
OperationalStateDescription_actualMeasurementSet(element : StateMachine, value : Element) {
	find OperationalStateDescription(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalStateDescription'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'OperationalStateDescription'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
OperationalStateDescription_conformsTo(element : StateMachine, value : Element) {
	find OperationalStateDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'OperationalStateDescription'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'OperationalStateDescription'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
OperationalStateDescription_measurementSet(element : StateMachine, value : Element) {
	find OperationalStateDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Operational - Structure

/*
 * Pattern that queries elements with the stereotype 'KnownResource' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype KnownResource.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
KnownResource(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "KnownResource");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'KnownResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'KnownResource'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern KnownResource_URI(element : Class, valuespec : LiteralString) {
	find KnownResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'KnownResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'KnownResource'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern
KnownResource_categoryCategorizesAsset(element : Class, value : Element) {
	find KnownResource(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'KnownResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'KnownResource'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern KnownResource_conformsTo(element : Class, value : Element) {
	find KnownResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'KnownResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'KnownResource'.
 * value : Element : A value of the attribute 'function'.
 */
pattern KnownResource_function(element : Class, value : Element) {
	find KnownResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'KnownResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'KnownResource'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
KnownResource_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find KnownResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'isStandardConfiguration' attribute of elements with the stereotype 'KnownResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'KnownResource'.
 * valuespec : LiteralBoolean : A value of the attribute 'isStandardConfiguration'.
 */
pattern
KnownResource_isStandardConfiguration(element : Class, valuespec : LiteralBoolean) {
	find KnownResource(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "isStandardConfiguration", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'KnownResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'KnownResource'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern KnownResource_physicalLocation(element : Class, value : Element) {
	find KnownResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'KnownResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'KnownResource'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern KnownResource_requiredEnvironment(element : Class, value : Element) {
	find KnownResource(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'OperationalAgent' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype OperationalAgent.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalAgent(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalAgent");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalAgent'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalAgent'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OperationalAgent_URI(element : Class, valuespec : LiteralString) {
	find OperationalAgent(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'OperationalAgent'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalAgent'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern
OperationalAgent_categoryCategorizesAsset(element : Class, value : Element) {
	find OperationalAgent(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalAgent'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalAgent'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalAgent_conformsTo(element : Class, value : Element) {
	find OperationalAgent(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'OperationalAgent'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalAgent'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
OperationalAgent_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find OperationalAgent(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'OperationalAgent'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalAgent'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern OperationalAgent_physicalLocation(element : Class, value : Element) {
	find OperationalAgent(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'OperationalAgent'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalAgent'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern
OperationalAgent_requiredEnvironment(element : Class, value : Element) {
	find OperationalAgent(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'OperationalArchitecture' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype OperationalArchitecture.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalArchitecture(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalArchitecture");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalArchitecture'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
OperationalArchitecture_URI(element : Class, valuespec : LiteralString) {
	find OperationalArchitecture(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'OperationalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalArchitecture'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern
OperationalArchitecture_categoryCategorizesAsset(element : Class, value : Element) {
	find OperationalArchitecture(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalArchitecture'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalArchitecture_conformsTo(element : Class, value : Element) {
	find OperationalArchitecture(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'desribedBy' attribute of elements with the stereotype 'OperationalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalArchitecture'.
 * value : Element : A value of the attribute 'desribedBy'.
 */
pattern OperationalArchitecture_desribedBy(element : Class, value : Element) {
	find OperationalArchitecture(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "desribedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'OperationalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalArchitecture'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
OperationalArchitecture_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find OperationalArchitecture(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'OperationalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalArchitecture'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern
OperationalArchitecture_physicalLocation(element : Class, value : Element) {
	find OperationalArchitecture(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'OperationalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalArchitecture'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern
OperationalArchitecture_requiredEnvironment(element : Class, value : Element) {
	find OperationalArchitecture(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'OperationalMethod' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Operation' object with the stereotype OperationalMethod.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalMethod(element : Operation, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalMethod");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalMethod'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'OperationalMethod'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
OperationalMethod_URI(element : Operation, valuespec : LiteralString) {
	find OperationalMethod(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'OperationalMethod'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'OperationalMethod'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
OperationalMethod_actualMeasurementSet(element : Operation, value : Element) {
	find OperationalMethod(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalMethod'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'OperationalMethod'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalMethod_conformsTo(element : Operation, value : Element) {
	find OperationalMethod(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'OperationalMethod'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'OperationalMethod'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
OperationalMethod_measurementSet(element : Operation, value : Element) {
	find OperationalMethod(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'OperationalParameter' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Parameter' object with the stereotype OperationalParameter.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalParameter(element : Parameter, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalParameter");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'OperationalParameter'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
OperationalParameter_URI(element : Parameter, valuespec : LiteralString) {
	find OperationalParameter(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'OperationalParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'OperationalParameter'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
OperationalParameter_actualMeasurementSet(element : Parameter, value : Element) {
	find OperationalParameter(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'OperationalParameter'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
OperationalParameter_conformsTo(element : Parameter, value : Element) {
	find OperationalParameter(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'OperationalParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'OperationalParameter'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
OperationalParameter_measurementSet(element : Parameter, value : Element) {
	find OperationalParameter(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'OperationalPerformer' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype OperationalPerformer.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalPerformer(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalPerformer");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalPerformer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalPerformer'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OperationalPerformer_URI(element : Class, valuespec : LiteralString) {
	find OperationalPerformer(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'OperationalPerformer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalPerformer'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern
OperationalPerformer_categoryCategorizesAsset(element : Class, value : Element) {
	find OperationalPerformer(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalPerformer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalPerformer'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalPerformer_conformsTo(element : Class, value : Element) {
	find OperationalPerformer(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'OperationalPerformer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalPerformer'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
OperationalPerformer_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find OperationalPerformer(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'OperationalPerformer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalPerformer'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern
OperationalPerformer_physicalLocation(element : Class, value : Element) {
	find OperationalPerformer(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'OperationalPerformer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalPerformer'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern
OperationalPerformer_requiredEnvironment(element : Class, value : Element) {
	find OperationalPerformer(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'OperationalPort' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Port' object with the stereotype OperationalPort.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalPort(element : Port, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalPort");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalPort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'OperationalPort'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OperationalPort_URI(element : Port, valuespec : LiteralString) {
	find OperationalPort(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'OperationalPort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'OperationalPort'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
OperationalPort_actualMeasurementSet(element : Port, value : Element) {
	find OperationalPort(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalPort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'OperationalPort'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalPort_conformsTo(element : Port, value : Element) {
	find OperationalPort(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'OperationalPort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'OperationalPort'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern OperationalPort_measurementSet(element : Port, value : Element) {
	find OperationalPort(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'OperationalRole' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype OperationalRole.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalRole(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalRole");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'OperationalRole'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OperationalRole_URI(element : Property, valuespec : LiteralString) {
	find OperationalRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'OperationalRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'OperationalRole'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
OperationalRole_actualMeasurementSet(element : Property, value : Element) {
	find OperationalRole(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'OperationalRole'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalRole_conformsTo(element : Property, value : Element) {
	find OperationalRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'OperationalRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'OperationalRole'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern OperationalRole_measurementSet(element : Property, value : Element) {
	find OperationalRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'OperationalRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'OperationalRole'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern
OperationalRole_physicalLocation(element : Property, value : Element) {
	find OperationalRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'OperationalRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'OperationalRole'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern
OperationalRole_requiredEnvironment(element : Property, value : Element) {
	find OperationalRole(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ProblemDomain' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ProblemDomain.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ProblemDomain(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ProblemDomain");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProblemDomain'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProblemDomain'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProblemDomain_URI(element : Property, valuespec : LiteralString) {
	find ProblemDomain(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ProblemDomain'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProblemDomain'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ProblemDomain_actualMeasurementSet(element : Property, value : Element) {
	find ProblemDomain(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProblemDomain'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProblemDomain'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProblemDomain_conformsTo(element : Property, value : Element) {
	find ProblemDomain(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ProblemDomain'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProblemDomain'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern ProblemDomain_measurementSet(element : Property, value : Element) {
	find ProblemDomain(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'ProblemDomain'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProblemDomain'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern ProblemDomain_physicalLocation(element : Property, value : Element) {
	find ProblemDomain(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'ProblemDomain'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProblemDomain'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern
ProblemDomain_requiredEnvironment(element : Property, value : Element) {
	find ProblemDomain(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

// Operational - Taxonomy

/*
 * Pattern that queries elements with the stereotype 'ArbitraryConnector' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype ArbitraryConnector.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ArbitraryConnector(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ArbitraryConnector");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ArbitraryConnector'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArbitraryConnector'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ArbitraryConnector_URI(element : Dependency, valuespec : LiteralString) {
	find ArbitraryConnector(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ArbitraryConnector'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArbitraryConnector'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ArbitraryConnector_actualMeasurementSet(element : Dependency, value : Element) {
	find ArbitraryConnector(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ArbitraryConnector'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArbitraryConnector'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ArbitraryConnector_conformsTo(element : Dependency, value : Element) {
	find ArbitraryConnector(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ArbitraryConnector'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArbitraryConnector'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ArbitraryConnector_measurementSet(element : Dependency, value : Element) {
	find ArbitraryConnector(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ConceptItem' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype ConceptItem.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ConceptItem(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ConceptItem");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ConceptItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ConceptItem'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ConceptItem_URI(element : Element, valuespec : LiteralString) {
	find ConceptItem(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ConceptItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ConceptItem'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ConceptItem_conformsTo(element : Element, value : Element) {
	find ConceptItem(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ConceptRole' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ConceptRole.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ConceptRole(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ConceptRole");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ConceptRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ConceptRole'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ConceptRole_URI(element : Property, valuespec : LiteralString) {
	find ConceptRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ConceptRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ConceptRole'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ConceptRole_actualMeasurementSet(element : Property, value : Element) {
	find ConceptRole(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ConceptRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ConceptRole'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ConceptRole_conformsTo(element : Property, value : Element) {
	find ConceptRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ConceptRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ConceptRole'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern ConceptRole_measurementSet(element : Property, value : Element) {
	find ConceptRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'HighLevelOperationalConcept' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype HighLevelOperationalConcept.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
HighLevelOperationalConcept(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "HighLevelOperationalConcept");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'HighLevelOperationalConcept'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'HighLevelOperationalConcept'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
HighLevelOperationalConcept_URI(element : Class, valuespec : LiteralString) {
	find HighLevelOperationalConcept(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'HighLevelOperationalConcept'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'HighLevelOperationalConcept'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
HighLevelOperationalConcept_conformsTo(element : Class, value : Element) {
	find HighLevelOperationalConcept(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'HighLevelOperationalConcept'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'HighLevelOperationalConcept'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
HighLevelOperationalConcept_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find HighLevelOperationalConcept(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

// Personnel - Connectivity

/*
 * Pattern that queries elements with the stereotype 'Command' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InformationFlow' object with the stereotype Command.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Command(element : InformationFlow, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Command");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Command'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Command'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Command_URI(element : InformationFlow, valuespec : LiteralString) {
	find Command(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'Command'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Command'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
Command_actualMeasurementSet(element : InformationFlow, value : Element) {
	find Command(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Command'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Command'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Command_conformsTo(element : InformationFlow, value : Element) {
	find Command(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'exchangeKind' attribute of elements with the stereotype 'Command'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Command'.
 * value : EnumerationLiteral : A value of the attribute 'exchangeKind'.
 */
pattern
Command_exchangeKind(element : InformationFlow, value : EnumerationLiteral) {
	find Command(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "exchangeKind", valuespec);
	InstanceValue.instance(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'Command'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Command'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern Command_measurementSet(element : InformationFlow, value : Element) {
	find Command(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Control' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InformationFlow' object with the stereotype Control.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Control(element : InformationFlow, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Control");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Control'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Control'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Control_URI(element : InformationFlow, valuespec : LiteralString) {
	find Control(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'Control'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Control'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
Control_actualMeasurementSet(element : InformationFlow, value : Element) {
	find Control(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Control'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Control'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Control_conformsTo(element : InformationFlow, value : Element) {
	find Control(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'exchangeKind' attribute of elements with the stereotype 'Control'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Control'.
 * value : EnumerationLiteral : A value of the attribute 'exchangeKind'.
 */
pattern
Control_exchangeKind(element : InformationFlow, value : EnumerationLiteral) {
	find Control(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "exchangeKind", valuespec);
	InstanceValue.instance(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'Control'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Control'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern Control_measurementSet(element : InformationFlow, value : Element) {
	find Control(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Personnel - Constraints

/*
 * Pattern that queries elements with the stereotype 'Competence' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Competence.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Competence(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Competence");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Competence'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Competence'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Competence_URI(element : Class, valuespec : LiteralString) {
	find Competence(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Competence'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Competence'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Competence_conformsTo(element : Class, value : Element) {
	find Competence(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'Competence'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Competence'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
Competence_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find Competence(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries elements with the stereotype 'CompetenceForRole' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype CompetenceForRole.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
CompetenceForRole(element : Abstraction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "CompetenceForRole");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'CompetenceForRole'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CompetenceForRole'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
CompetenceForRole_URI(element : Abstraction, valuespec : LiteralString) {
	find CompetenceForRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'CompetenceForRole'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CompetenceForRole'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
CompetenceForRole_actualMeasurementSet(element : Abstraction, value : Element) {
	find CompetenceForRole(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'CompetenceForRole'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CompetenceForRole'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern CompetenceForRole_conformsTo(element : Abstraction, value : Element) {
	find CompetenceForRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'CompetenceForRole'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CompetenceForRole'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
CompetenceForRole_measurementSet(element : Abstraction, value : Element) {
	find CompetenceForRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'CompetenceForRole'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CompetenceForRole'.
 * value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern
CompetenceForRole_sourceContext(element : Abstraction, value : Classifier) {
	find CompetenceForRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'CompetenceForRole'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CompetenceForRole'.
 * value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern
CompetenceForRole_sourcePropertyPath(element : Abstraction, value : Property) {
	find CompetenceForRole(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'CompetenceForRole'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CompetenceForRole'.
 * value : Classifier : A value of the attribute 'targetContext'.
 */
pattern
CompetenceForRole_targetContext(element : Abstraction, value : Classifier) {
	find CompetenceForRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'CompetenceForRole'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CompetenceForRole'.
 * value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern
CompetenceForRole_targetPropertyPath(element : Abstraction, value : Property) {
	find CompetenceForRole(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'RequiresCompetence' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype RequiresCompetence.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
RequiresCompetence(element : Abstraction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "RequiresCompetence");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'RequiresCompetence'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'RequiresCompetence'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
RequiresCompetence_URI(element : Abstraction, valuespec : LiteralString) {
	find RequiresCompetence(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'RequiresCompetence'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'RequiresCompetence'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
RequiresCompetence_actualMeasurementSet(element : Abstraction, value : Element) {
	find RequiresCompetence(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'RequiresCompetence'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'RequiresCompetence'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
RequiresCompetence_conformsTo(element : Abstraction, value : Element) {
	find RequiresCompetence(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'RequiresCompetence'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'RequiresCompetence'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
RequiresCompetence_measurementSet(element : Abstraction, value : Element) {
	find RequiresCompetence(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'RequiresCompetence'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'RequiresCompetence'.
 * value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern
RequiresCompetence_sourceContext(element : Abstraction, value : Classifier) {
	find RequiresCompetence(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'RequiresCompetence'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'RequiresCompetence'.
 * value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern
RequiresCompetence_sourcePropertyPath(element : Abstraction, value : Property) {
	find RequiresCompetence(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'RequiresCompetence'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'RequiresCompetence'.
 * value : Classifier : A value of the attribute 'targetContext'.
 */
pattern
RequiresCompetence_targetContext(element : Abstraction, value : Classifier) {
	find RequiresCompetence(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'RequiresCompetence'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'RequiresCompetence'.
 * value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern
RequiresCompetence_targetPropertyPath(element : Abstraction, value : Property) {
	find RequiresCompetence(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

// Personnel - Processes

/*
 * Pattern that queries elements with the stereotype 'CompetenceToConduct' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype CompetenceToConduct.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
CompetenceToConduct(element : Abstraction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "CompetenceToConduct");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'CompetenceToConduct'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CompetenceToConduct'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
CompetenceToConduct_URI(element : Abstraction, valuespec : LiteralString) {
	find CompetenceToConduct(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'CompetenceToConduct'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CompetenceToConduct'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
CompetenceToConduct_actualMeasurementSet(element : Abstraction, value : Element) {
	find CompetenceToConduct(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'CompetenceToConduct'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CompetenceToConduct'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
CompetenceToConduct_conformsTo(element : Abstraction, value : Element) {
	find CompetenceToConduct(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'CompetenceToConduct'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CompetenceToConduct'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
CompetenceToConduct_measurementSet(element : Abstraction, value : Element) {
	find CompetenceToConduct(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'CompetenceToConduct'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CompetenceToConduct'.
 * value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern
CompetenceToConduct_sourceContext(element : Abstraction, value : Classifier) {
	find CompetenceToConduct(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'CompetenceToConduct'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CompetenceToConduct'.
 * value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern
CompetenceToConduct_sourcePropertyPath(element : Abstraction, value : Property) {
	find CompetenceToConduct(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'CompetenceToConduct'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CompetenceToConduct'.
 * value : Classifier : A value of the attribute 'targetContext'.
 */
pattern
CompetenceToConduct_targetContext(element : Abstraction, value : Classifier) {
	find CompetenceToConduct(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'CompetenceToConduct'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CompetenceToConduct'.
 * value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern
CompetenceToConduct_targetPropertyPath(element : Abstraction, value : Property) {
	find CompetenceToConduct(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

// Personnel - Taxonomy

/*
 * Pattern that queries elements with the stereotype 'Organization' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Organization.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Organization(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Organization");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Organization_URI(element : Class, valuespec : LiteralString) {
	find Organization(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern
Organization_categoryCategorizesAsset(element : Class, value : Element) {
	find Organization(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Organization_conformsTo(element : Class, value : Element) {
	find Organization(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * value : Element : A value of the attribute 'function'.
 */
pattern Organization_function(element : Class, value : Element) {
	find Organization(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
Organization_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find Organization(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'isStandardConfiguration' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * valuespec : LiteralBoolean : A value of the attribute 'isStandardConfiguration'.
 */
pattern
Organization_isStandardConfiguration(element : Class, valuespec : LiteralBoolean) {
	find Organization(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "isStandardConfiguration", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern Organization_physicalLocation(element : Class, value : Element) {
	find Organization(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern Organization_requiredEnvironment(element : Class, value : Element) {
	find Organization(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'stakeholderConcern' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * value : Element : A value of the attribute 'stakeholderConcern'.
 */
pattern Organization_stakeholderConcern(element : Class, value : Element) {
	find Organization(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "stakeholderConcern", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'OrganizationalResource' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype OrganizationalResource.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OrganizationalResource(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OrganizationalResource");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
OrganizationalResource_URI(element : Class, valuespec : LiteralString) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern
OrganizationalResource_categoryCategorizesAsset(element : Class, value : Element) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OrganizationalResource_conformsTo(element : Class, value : Element) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * value : Element : A value of the attribute 'function'.
 */
pattern OrganizationalResource_function(element : Class, value : Element) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
OrganizationalResource_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'isStandardConfiguration' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * valuespec : LiteralBoolean : A value of the attribute 'isStandardConfiguration'.
 */
pattern
OrganizationalResource_isStandardConfiguration(element : Class, valuespec : LiteralBoolean) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "isStandardConfiguration", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern
OrganizationalResource_physicalLocation(element : Class, value : Element) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern
OrganizationalResource_requiredEnvironment(element : Class, value : Element) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'stakeholderConcern' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * value : Element : A value of the attribute 'stakeholderConcern'.
 */
pattern
OrganizationalResource_stakeholderConcern(element : Class, value : Element) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "stakeholderConcern", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Person' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Person.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Person(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Person");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Person'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Person'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Person_URI(element : Class, valuespec : LiteralString) {
	find Person(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'Person'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Person'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern Person_categoryCategorizesAsset(element : Class, value : Element) {
	find Person(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Person'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Person'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Person_conformsTo(element : Class, value : Element) {
	find Person(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'Person'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Person'.
 * value : Element : A value of the attribute 'function'.
 */
pattern Person_function(element : Class, value : Element) {
	find Person(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'Person'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Person'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern Person_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find Person(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'isStandardConfiguration' attribute of elements with the stereotype 'Person'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Person'.
 * valuespec : LiteralBoolean : A value of the attribute 'isStandardConfiguration'.
 */
pattern
Person_isStandardConfiguration(element : Class, valuespec : LiteralBoolean) {
	find Person(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "isStandardConfiguration", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'Person'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Person'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern Person_physicalLocation(element : Class, value : Element) {
	find Person(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'Person'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Person'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern Person_requiredEnvironment(element : Class, value : Element) {
	find Person(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'stakeholderConcern' attribute of elements with the stereotype 'Person'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Person'.
 * value : Element : A value of the attribute 'stakeholderConcern'.
 */
pattern Person_stakeholderConcern(element : Class, value : Element) {
	find Person(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "stakeholderConcern", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Post' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Post.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Post(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Post");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Post_URI(element : Class, valuespec : LiteralString) {
	find Post(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern Post_categoryCategorizesAsset(element : Class, value : Element) {
	find Post(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Post_conformsTo(element : Class, value : Element) {
	find Post(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * value : Element : A value of the attribute 'function'.
 */
pattern Post_function(element : Class, value : Element) {
	find Post(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern Post_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find Post(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'isStandardConfiguration' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * valuespec : LiteralBoolean : A value of the attribute 'isStandardConfiguration'.
 */
pattern
Post_isStandardConfiguration(element : Class, valuespec : LiteralBoolean) {
	find Post(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "isStandardConfiguration", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern Post_physicalLocation(element : Class, value : Element) {
	find Post(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern Post_requiredEnvironment(element : Class, value : Element) {
	find Post(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'stakeholderConcern' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * value : Element : A value of the attribute 'stakeholderConcern'.
 */
pattern Post_stakeholderConcern(element : Class, value : Element) {
	find Post(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "stakeholderConcern", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Responsibility' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Responsibility.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Responsibility(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Responsibility");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Responsibility_URI(element : Class, valuespec : LiteralString) {
	find Responsibility(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern
Responsibility_categoryCategorizesAsset(element : Class, value : Element) {
	find Responsibility(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Responsibility_conformsTo(element : Class, value : Element) {
	find Responsibility(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * value : Element : A value of the attribute 'function'.
 */
pattern Responsibility_function(element : Class, value : Element) {
	find Responsibility(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
Responsibility_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find Responsibility(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'isStandardConfiguration' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * valuespec : LiteralBoolean : A value of the attribute 'isStandardConfiguration'.
 */
pattern
Responsibility_isStandardConfiguration(element : Class, valuespec : LiteralBoolean) {
	find Responsibility(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "isStandardConfiguration", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern Responsibility_physicalLocation(element : Class, value : Element) {
	find Responsibility(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern Responsibility_requiredEnvironment(element : Class, value : Element) {
	find Responsibility(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'stakeholderConcern' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * value : Element : A value of the attribute 'stakeholderConcern'.
 */
pattern Responsibility_stakeholderConcern(element : Class, value : Element) {
	find Responsibility(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "stakeholderConcern", valuespec);
	ElementValue.element(valuespec, value);
}

// Personnel - Traceability

/*
 * Pattern that queries elements with the stereotype 'ResponsibleFor' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype ResponsibleFor.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ResponsibleFor(element : Abstraction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ResponsibleFor");
}

/*
 * Pattern that queries the 'ResponsibleRoleKind' attribute of elements with the stereotype 'ResponsibleFor'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'ResponsibleFor'.
 * value : EnumerationLiteral : A value of the attribute 'ResponsibleRoleKind'.
 */
pattern
ResponsibleFor_ResponsibleRoleKind(element : Abstraction, value : EnumerationLiteral) {
	find ResponsibleFor(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "ResponsibleRoleKind", valuespec);
	InstanceValue.instance(valuespec, value);
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResponsibleFor'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'ResponsibleFor'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResponsibleFor_URI(element : Abstraction, valuespec : LiteralString) {
	find ResponsibleFor(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ResponsibleFor'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'ResponsibleFor'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ResponsibleFor_actualMeasurementSet(element : Abstraction, value : Element) {
	find ResponsibleFor(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResponsibleFor'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'ResponsibleFor'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResponsibleFor_conformsTo(element : Abstraction, value : Element) {
	find ResponsibleFor(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ResponsibleFor'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'ResponsibleFor'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern ResponsibleFor_endDate(element : Abstraction, value : Element) {
	find ResponsibleFor(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ResponsibleFor'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'ResponsibleFor'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ResponsibleFor_measurementSet(element : Abstraction, value : Element) {
	find ResponsibleFor(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'ResponsibleFor'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'ResponsibleFor'.
 * value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern
ResponsibleFor_sourceContext(element : Abstraction, value : Classifier) {
	find ResponsibleFor(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'ResponsibleFor'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'ResponsibleFor'.
 * value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern
ResponsibleFor_sourcePropertyPath(element : Abstraction, value : Property) {
	find ResponsibleFor(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ResponsibleFor'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'ResponsibleFor'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern ResponsibleFor_startDate(element : Abstraction, value : Element) {
	find ResponsibleFor(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'ResponsibleFor'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'ResponsibleFor'.
 * value : Classifier : A value of the attribute 'targetContext'.
 */
pattern
ResponsibleFor_targetContext(element : Abstraction, value : Classifier) {
	find ResponsibleFor(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'ResponsibleFor'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'ResponsibleFor'.
 * value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern
ResponsibleFor_targetPropertyPath(element : Abstraction, value : Property) {
	find ResponsibleFor(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

// Project - Connectivity

/*
 * Pattern that queries elements with the stereotype 'MilestoneDependency' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype MilestoneDependency.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
MilestoneDependency(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "MilestoneDependency");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'MilestoneDependency'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'MilestoneDependency'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
MilestoneDependency_URI(element : Dependency, valuespec : LiteralString) {
	find MilestoneDependency(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'MilestoneDependency'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'MilestoneDependency'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
MilestoneDependency_actualMeasurementSet(element : Dependency, value : Element) {
	find MilestoneDependency(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'MilestoneDependency'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'MilestoneDependency'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
MilestoneDependency_conformsTo(element : Dependency, value : Element) {
	find MilestoneDependency(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'MilestoneDependency'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'MilestoneDependency'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
MilestoneDependency_measurementSet(element : Dependency, value : Element) {
	find MilestoneDependency(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ProjectSequence' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype ProjectSequence.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ProjectSequence(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ProjectSequence");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProjectSequence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProjectSequence'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProjectSequence_URI(element : Dependency, valuespec : LiteralString) {
	find ProjectSequence(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ProjectSequence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProjectSequence'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ProjectSequence_actualMeasurementSet(element : Dependency, value : Element) {
	find ProjectSequence(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProjectSequence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProjectSequence'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProjectSequence_conformsTo(element : Dependency, value : Element) {
	find ProjectSequence(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ProjectSequence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProjectSequence'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ProjectSequence_measurementSet(element : Dependency, value : Element) {
	find ProjectSequence(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Project - Processes

/*
 * Pattern that queries elements with the stereotype 'ProjectActivity' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Activity' object with the stereotype ProjectActivity.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ProjectActivity(element : Activity, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ProjectActivity");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProjectActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ProjectActivity'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProjectActivity_URI(element : Activity, valuespec : LiteralString) {
	find ProjectActivity(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'activityPerformableUnderCondition' attribute of elements with the stereotype 'ProjectActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ProjectActivity'.
 * value : Element : A value of the attribute 'activityPerformableUnderCondition'.
 */
pattern
ProjectActivity_activityPerformableUnderCondition(element : Activity, value : Element) {
	find ProjectActivity(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "activityPerformableUnderCondition", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ProjectActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ProjectActivity'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ProjectActivity_actualMeasurementSet(element : Activity, value : Element) {
	find ProjectActivity(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'affectedResource' attribute of elements with the stereotype 'ProjectActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ProjectActivity'.
 * value : Element : A value of the attribute 'affectedResource'.
 */
pattern
ProjectActivity_affectedResource(element : Activity, value : Element) {
	find ProjectActivity(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "affectedResource", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProjectActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ProjectActivity'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProjectActivity_conformsTo(element : Activity, value : Element) {
	find ProjectActivity(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ProjectActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ProjectActivity'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern ProjectActivity_measurementSet(element : Activity, value : Element) {
	find ProjectActivity(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ProjectActivityAction' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'CallBehaviorAction' object with the stereotype ProjectActivityAction.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ProjectActivityAction(element : CallBehaviorAction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ProjectActivityAction");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProjectActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ProjectActivityAction'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ProjectActivityAction_URI(element : CallBehaviorAction, valuespec : LiteralString) {
	find ProjectActivityAction(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ProjectActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ProjectActivityAction'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ProjectActivityAction_actualMeasurementSet(element : CallBehaviorAction, value : Element) {
	find ProjectActivityAction(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProjectActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ProjectActivityAction'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ProjectActivityAction_conformsTo(element : CallBehaviorAction, value : Element) {
	find ProjectActivityAction(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ProjectActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ProjectActivityAction'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ProjectActivityAction_measurementSet(element : CallBehaviorAction, value : Element) {
	find ProjectActivityAction(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Project - Roadmap

/*
 * Pattern that queries elements with the stereotype 'ActualProject' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualProject.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualProject(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualProject");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualProject_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualProject(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualCondition' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * value : Element : A value of the attribute 'actualCondition'.
 */
pattern
ActualProject_actualCondition(element : InstanceSpecification, value : Element) {
	find ActualProject(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "actualCondition", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualProject_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualProject(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern
ActualProject_endDate(element : InstanceSpecification, value : Element) {
	find ActualProject(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * value : InstanceSpecification : A value of the attribute 'milestone'.
 */
pattern
ActualProject_milestone(element : InstanceSpecification, value : InstanceSpecification) {
	find ActualProject(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'ownedMilestone' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * value : InstanceSpecification : A value of the attribute 'ownedMilestone'.
 */
pattern
ActualProject_ownedMilestone(element : InstanceSpecification, value : InstanceSpecification) {
	find ActualProject(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "ownedMilestone", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'projectKind' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * value : EnumerationLiteral : A value of the attribute 'projectKind'.
 */
pattern
ActualProject_projectKind(element : InstanceSpecification, value : EnumerationLiteral) {
	find ActualProject(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "projectKind", valuespec);
	InstanceValue.instance(valuespec, value);
}

/*
 * Pattern that queries the 'stakeholderConcern' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * value : Element : A value of the attribute 'stakeholderConcern'.
 */
pattern
ActualProject_stakeholderConcern(element : InstanceSpecification, value : Element) {
	find ActualProject(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "stakeholderConcern", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern
ActualProject_startDate(element : InstanceSpecification, value : Element) {
	find ActualProject(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ActualProjectMilestone' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualProjectMilestone.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualProjectMilestone(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualProjectMilestone");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualProjectMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProjectMilestone'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualProjectMilestone_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualProjectMilestone(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualResource' attribute of elements with the stereotype 'ActualProjectMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProjectMilestone'.
 * value : Element : A value of the attribute 'actualResource'.
 */
pattern
ActualProjectMilestone_actualResource(element : InstanceSpecification, value : Element) {
	find ActualProjectMilestone(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "actualResource", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualProjectMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProjectMilestone'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualProjectMilestone_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualProjectMilestone(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualProjectMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProjectMilestone'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern
ActualProjectMilestone_endDate(element : InstanceSpecification, value : Element) {
	find ActualProjectMilestone(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'kind' attribute of elements with the stereotype 'ActualProjectMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProjectMilestone'.
 * value : EnumerationLiteral : A value of the attribute 'kind'.
 */
pattern
ActualProjectMilestone_kind(element : InstanceSpecification, value : EnumerationLiteral) {
	find ActualProjectMilestone(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "kind", valuespec);
	InstanceValue.instance(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualProjectMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProjectMilestone'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern
ActualProjectMilestone_startDate(element : InstanceSpecification, value : Element) {
	find ActualProjectMilestone(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'versionReleased' attribute of elements with the stereotype 'ActualProjectMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProjectMilestone'.
 * value : Element : A value of the attribute 'versionReleased'.
 */
pattern
ActualProjectMilestone_versionReleased(element : InstanceSpecification, value : Element) {
	find ActualProjectMilestone(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "versionReleased", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'versionWithdrawn' attribute of elements with the stereotype 'ActualProjectMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProjectMilestone'.
 * value : Element : A value of the attribute 'versionWithdrawn'.
 */
pattern
ActualProjectMilestone_versionWithdrawn(element : InstanceSpecification, value : Element) {
	find ActualProjectMilestone(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "versionWithdrawn", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ActualProjectMilestoneRole' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Slot' object with the stereotype ActualProjectMilestoneRole.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualProjectMilestoneRole(element : Slot, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualProjectMilestoneRole");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProjectMilestoneRole'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualProjectMilestoneRole_URI(element : Slot, valuespec : LiteralString) {
	find ActualProjectMilestoneRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProjectMilestoneRole'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualProjectMilestoneRole_conformsTo(element : Slot, value : Element) {
	find ActualProjectMilestoneRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProjectMilestoneRole'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern ActualProjectMilestoneRole_endDate(element : Slot, value : Element) {
	find ActualProjectMilestoneRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProjectMilestoneRole'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern
ActualProjectMilestoneRole_startDate(element : Slot, value : Element) {
	find ActualProjectMilestoneRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ActualProjectRole' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Slot' object with the stereotype ActualProjectRole.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualProjectRole(element : Slot, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualProjectRole");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualProjectRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProjectRole'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActualProjectRole_URI(element : Slot, valuespec : LiteralString) {
	find ActualProjectRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualProjectRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProjectRole'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActualProjectRole_conformsTo(element : Slot, value : Element) {
	find ActualProjectRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualProjectRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProjectRole'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern ActualProjectRole_endDate(element : Slot, value : Element) {
	find ActualProjectRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualProjectRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProjectRole'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern ActualProjectRole_startDate(element : Slot, value : Element) {
	find ActualProjectRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

// Project - Structure

/*
 * Pattern that queries elements with the stereotype 'ProjectMilestoneRole' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ProjectMilestoneRole.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ProjectMilestoneRole(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ProjectMilestoneRole");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectMilestoneRole'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ProjectMilestoneRole_URI(element : Property, valuespec : LiteralString) {
	find ProjectMilestoneRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectMilestoneRole'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ProjectMilestoneRole_actualMeasurementSet(element : Property, value : Element) {
	find ProjectMilestoneRole(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectMilestoneRole'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProjectMilestoneRole_conformsTo(element : Property, value : Element) {
	find ProjectMilestoneRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectMilestoneRole'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ProjectMilestoneRole_measurementSet(element : Property, value : Element) {
	find ProjectMilestoneRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ProjectRole' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ProjectRole.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ProjectRole(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ProjectRole");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProjectRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectRole'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProjectRole_URI(element : Property, valuespec : LiteralString) {
	find ProjectRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ProjectRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectRole'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ProjectRole_actualMeasurementSet(element : Property, value : Element) {
	find ProjectRole(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProjectRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectRole'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProjectRole_conformsTo(element : Property, value : Element) {
	find ProjectRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ProjectRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectRole'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern ProjectRole_measurementSet(element : Property, value : Element) {
	find ProjectRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'ProjectRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectRole'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern ProjectRole_physicalLocation(element : Property, value : Element) {
	find ProjectRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'ProjectRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectRole'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern ProjectRole_requiredEnvironment(element : Property, value : Element) {
	find ProjectRole(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'roleKind' attribute of elements with the stereotype 'ProjectRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectRole'.
 * value : EnumerationLiteral : A value of the attribute 'roleKind'.
 */
pattern ProjectRole_roleKind(element : Property, value : EnumerationLiteral) {
	find ProjectRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "roleKind", valuespec);
	InstanceValue.instance(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ProjectStatus' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Slot' object with the stereotype ProjectStatus.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ProjectStatus(element : Slot, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ProjectStatus");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProjectStatus'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ProjectStatus'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProjectStatus_URI(element : Slot, valuespec : LiteralString) {
	find ProjectStatus(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProjectStatus'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ProjectStatus'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProjectStatus_conformsTo(element : Slot, value : Element) {
	find ProjectStatus(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ProjectStatus'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ProjectStatus'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern ProjectStatus_endDate(element : Slot, value : Element) {
	find ProjectStatus(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ProjectStatus'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ProjectStatus'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern ProjectStatus_startDate(element : Slot, value : Element) {
	find ProjectStatus(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ProjectTheme' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ProjectTheme.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ProjectTheme(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ProjectTheme");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProjectTheme'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectTheme'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProjectTheme_URI(element : Property, valuespec : LiteralString) {
	find ProjectTheme(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ProjectTheme'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectTheme'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ProjectTheme_actualMeasurementSet(element : Property, value : Element) {
	find ProjectTheme(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProjectTheme'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectTheme'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProjectTheme_conformsTo(element : Property, value : Element) {
	find ProjectTheme(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ProjectTheme'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectTheme'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern ProjectTheme_measurementSet(element : Property, value : Element) {
	find ProjectTheme(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'StatusIndicators' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Enumeration' object with the stereotype StatusIndicators.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
StatusIndicators(element : Enumeration, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "StatusIndicators");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'StatusIndicators'.
 *
 * Parameters:
 * element: 'Enumeration' object with the stereotype 'StatusIndicators'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
StatusIndicators_URI(element : Enumeration, valuespec : LiteralString) {
	find StatusIndicators(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'StatusIndicators'.
 *
 * Parameters:
 * element: 'Enumeration' object with the stereotype 'StatusIndicators'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
StatusIndicators_actualMeasurementSet(element : Enumeration, value : Element) {
	find StatusIndicators(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'StatusIndicators'.
 *
 * Parameters:
 * element: 'Enumeration' object with the stereotype 'StatusIndicators'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern StatusIndicators_conformsTo(element : Enumeration, value : Element) {
	find StatusIndicators(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'StatusIndicators'.
 *
 * Parameters:
 * element: 'Enumeration' object with the stereotype 'StatusIndicators'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
StatusIndicators_measurementSet(element : Enumeration, value : Element) {
	find StatusIndicators(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'quantityKind' attribute of elements with the stereotype 'StatusIndicators'.
 *
 * Parameters:
 * element: 'Enumeration' object with the stereotype 'StatusIndicators'.
 * value : InstanceSpecification : A value of the attribute 'quantityKind'.
 */
pattern
StatusIndicators_quantityKind(element : Enumeration, value : InstanceSpecification) {
	find StatusIndicators(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "quantityKind", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'unit' attribute of elements with the stereotype 'StatusIndicators'.
 *
 * Parameters:
 * element: 'Enumeration' object with the stereotype 'StatusIndicators'.
 * value : InstanceSpecification : A value of the attribute 'unit'.
 */
pattern
StatusIndicators_unit(element : Enumeration, value : InstanceSpecification) {
	find StatusIndicators(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "unit", valuespec);
	ElementValue.element(valuespec, value);
}

// Project - Taxonomy

/*
 * Pattern that queries elements with the stereotype 'Project' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Project.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Project(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Project");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Project'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Project_URI(element : Class, valuespec : LiteralString) {
	find Project(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Project'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern Project_categoryCategorizesAsset(element : Class, value : Element) {
	find Project(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Project'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Project_conformsTo(element : Class, value : Element) {
	find Project(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Project'.
 * value : Element : A value of the attribute 'function'.
 */
pattern Project_function(element : Class, value : Element) {
	find Project(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Project'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern Project_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find Project(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'isStandardConfiguration' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Project'.
 * valuespec : LiteralBoolean : A value of the attribute 'isStandardConfiguration'.
 */
pattern
Project_isStandardConfiguration(element : Class, valuespec : LiteralBoolean) {
	find Project(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "isStandardConfiguration", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Project'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern Project_physicalLocation(element : Class, value : Element) {
	find Project(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Project'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern Project_requiredEnvironment(element : Class, value : Element) {
	find Project(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'stakeholderConcern' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Project'.
 * value : Element : A value of the attribute 'stakeholderConcern'.
 */
pattern Project_stakeholderConcern(element : Class, value : Element) {
	find Project(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "stakeholderConcern", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ProjectMilestone' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype ProjectMilestone.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ProjectMilestone(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ProjectMilestone");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProjectMilestone'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProjectMilestone'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProjectMilestone_URI(element : Class, valuespec : LiteralString) {
	find ProjectMilestone(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProjectMilestone'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProjectMilestone'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProjectMilestone_conformsTo(element : Class, value : Element) {
	find ProjectMilestone(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'ProjectMilestone'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProjectMilestone'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
ProjectMilestone_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find ProjectMilestone(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'resource' attribute of elements with the stereotype 'ProjectMilestone'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProjectMilestone'.
 * value : Element : A value of the attribute 'resource'.
 */
pattern ProjectMilestone_resource(element : Class, value : Element) {
	find ProjectMilestone(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "resource", valuespec);
	ElementValue.element(valuespec, value);
}

// Resources - Connectivity

/*
 * Pattern that queries elements with the stereotype 'ResourceConnector' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Connector' object with the stereotype ResourceConnector.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ResourceConnector(element : Connector, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ResourceConnector");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceConnector'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ResourceConnector_URI(element : Connector, valuespec : LiteralString) {
	find ResourceConnector(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ResourceConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceConnector'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ResourceConnector_actualMeasurementSet(element : Connector, value : Element) {
	find ResourceConnector(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'boundaryCondition' attribute of elements with the stereotype 'ResourceConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceConnector'.
 * value : Element : A value of the attribute 'boundaryCondition'.
 */
pattern
ResourceConnector_boundaryCondition(element : Connector, value : Element) {
	find ResourceConnector(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "boundaryCondition", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceConnector'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceConnector_conformsTo(element : Connector, value : Element) {
	find ResourceConnector(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'implements' attribute of elements with the stereotype 'ResourceConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceConnector'.
 * value : Element : A value of the attribute 'implements'.
 */
pattern ResourceConnector_implements(element : Connector, value : Element) {
	find ResourceConnector(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "implements", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ResourceConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceConnector'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ResourceConnector_measurementSet(element : Connector, value : Element) {
	find ResourceConnector(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ResourceExchange' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InformationFlow' object with the stereotype ResourceExchange.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ResourceExchange(element : InformationFlow, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ResourceExchange");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceExchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'ResourceExchange'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ResourceExchange_URI(element : InformationFlow, valuespec : LiteralString) {
	find ResourceExchange(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ResourceExchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'ResourceExchange'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ResourceExchange_actualMeasurementSet(element : InformationFlow, value : Element) {
	find ResourceExchange(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceExchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'ResourceExchange'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ResourceExchange_conformsTo(element : InformationFlow, value : Element) {
	find ResourceExchange(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'exchangeKind' attribute of elements with the stereotype 'ResourceExchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'ResourceExchange'.
 * value : EnumerationLiteral : A value of the attribute 'exchangeKind'.
 */
pattern
ResourceExchange_exchangeKind(element : InformationFlow, value : EnumerationLiteral) {
	find ResourceExchange(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "exchangeKind", valuespec);
	InstanceValue.instance(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ResourceExchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'ResourceExchange'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ResourceExchange_measurementSet(element : InformationFlow, value : Element) {
	find ResourceExchange(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ResourceInterface' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype ResourceInterface.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ResourceInterface(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ResourceInterface");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceInterface'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceInterface'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceInterface_URI(element : Class, valuespec : LiteralString) {
	find ResourceInterface(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceInterface'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceInterface'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceInterface_conformsTo(element : Class, value : Element) {
	find ResourceInterface(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'ResourceInterface'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceInterface'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
ResourceInterface_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find ResourceInterface(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries elements with the stereotype 'ResourceSignal' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Signal' object with the stereotype ResourceSignal.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ResourceSignal(element : Signal, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ResourceSignal");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceSignal'.
 *
 * Parameters:
 * element: 'Signal' object with the stereotype 'ResourceSignal'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceSignal_URI(element : Signal, valuespec : LiteralString) {
	find ResourceSignal(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceSignal'.
 *
 * Parameters:
 * element: 'Signal' object with the stereotype 'ResourceSignal'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceSignal_conformsTo(element : Signal, value : Element) {
	find ResourceSignal(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'ResourceSignal'.
 *
 * Parameters:
 * element: 'Signal' object with the stereotype 'ResourceSignal'.
 * value : Element : A value of the attribute 'function'.
 */
pattern ResourceSignal_function(element : Signal, value : Element) {
	find ResourceSignal(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ResourceSignalProperty' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ResourceSignalProperty.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ResourceSignalProperty(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ResourceSignalProperty");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceSignalProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ResourceSignalProperty'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ResourceSignalProperty_URI(element : Property, valuespec : LiteralString) {
	find ResourceSignalProperty(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ResourceSignalProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ResourceSignalProperty'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ResourceSignalProperty_actualMeasurementSet(element : Property, value : Element) {
	find ResourceSignalProperty(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceSignalProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ResourceSignalProperty'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ResourceSignalProperty_conformsTo(element : Property, value : Element) {
	find ResourceSignalProperty(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ResourceSignalProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ResourceSignalProperty'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ResourceSignalProperty_measurementSet(element : Property, value : Element) {
	find ResourceSignalProperty(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Resources - Constraints

/*
 * Pattern that queries elements with the stereotype 'ResourceConstraint' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Constraint' object with the stereotype ResourceConstraint.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ResourceConstraint(element : Constraint, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ResourceConstraint");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ResourceConstraint'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ResourceConstraint_URI(element : Constraint, valuespec : LiteralString) {
	find ResourceConstraint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ResourceConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ResourceConstraint'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ResourceConstraint_actualMeasurementSet(element : Constraint, value : Element) {
	find ResourceConstraint(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ResourceConstraint'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceConstraint_conformsTo(element : Constraint, value : Element) {
	find ResourceConstraint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ResourceConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ResourceConstraint'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ResourceConstraint_measurementSet(element : Constraint, value : Element) {
	find ResourceConstraint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'ruleKind' attribute of elements with the stereotype 'ResourceConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ResourceConstraint'.
 * value : EnumerationLiteral : A value of the attribute 'ruleKind'.
 */
pattern
ResourceConstraint_ruleKind(element : Constraint, value : EnumerationLiteral) {
	find ResourceConstraint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "ruleKind", valuespec);
	InstanceValue.instance(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'SubjectOfResourceConstraint' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype SubjectOfResourceConstraint.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
SubjectOfResourceConstraint(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "SubjectOfResourceConstraint");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SubjectOfResourceConstraint'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfResourceConstraint'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
SubjectOfResourceConstraint_URI(element : Element, valuespec : LiteralString) {
	find SubjectOfResourceConstraint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SubjectOfResourceConstraint'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfResourceConstraint'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
SubjectOfResourceConstraint_conformsTo(element : Element, value : Element) {
	find SubjectOfResourceConstraint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

// Resources - Flows

/*
 * Pattern that queries elements with the stereotype 'ResourceExchangeItem' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype ResourceExchangeItem.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ResourceExchangeItem(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ResourceExchangeItem");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceExchangeItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ResourceExchangeItem'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ResourceExchangeItem_URI(element : Element, valuespec : LiteralString) {
	find ResourceExchangeItem(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceExchangeItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ResourceExchangeItem'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceExchangeItem_conformsTo(element : Element, value : Element) {
	find ResourceExchangeItem(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'ResourceExchangeItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ResourceExchangeItem'.
 * value : Element : A value of the attribute 'function'.
 */
pattern ResourceExchangeItem_function(element : Element, value : Element) {
	find ResourceExchangeItem(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

// Resources - Information

/*
 * Pattern that queries elements with the stereotype 'DataElement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype DataElement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
DataElement(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "DataElement");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'DataElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'DataElement'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern DataElement_URI(element : Class, valuespec : LiteralString) {
	find DataElement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'DataElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'DataElement'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern
DataElement_categoryCategorizesAsset(element : Class, value : Element) {
	find DataElement(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'DataElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'DataElement'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern DataElement_conformsTo(element : Class, value : Element) {
	find DataElement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'DataElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'DataElement'.
 * value : Element : A value of the attribute 'function'.
 */
pattern DataElement_function(element : Class, value : Element) {
	find DataElement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'DataElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'DataElement'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
DataElement_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find DataElement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'DataElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'DataElement'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern DataElement_physicalLocation(element : Class, value : Element) {
	find DataElement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'DataElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'DataElement'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern DataElement_requiredEnvironment(element : Class, value : Element) {
	find DataElement(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'DataModel' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Package' object with the stereotype DataModel.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
DataModel(element : Package, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "DataModel");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'DataModel'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'DataModel'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern DataModel_URI(element : Package, valuespec : LiteralString) {
	find DataModel(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'DataModel'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'DataModel'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern DataModel_conformsTo(element : Package, value : Element) {
	find DataModel(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'DataModel'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'DataModel'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern DataModel_endDate(element : Package, value : Element) {
	find DataModel(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'kind' attribute of elements with the stereotype 'DataModel'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'DataModel'.
 * value : EnumerationLiteral : A value of the attribute 'kind'.
 */
pattern DataModel_kind(element : Package, value : EnumerationLiteral) {
	find DataModel(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "kind", valuespec);
	InstanceValue.instance(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'DataModel'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'DataModel'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern DataModel_startDate(element : Package, value : Element) {
	find DataModel(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

// Resources - Interaction Scenarios

/*
 * Pattern that queries elements with the stereotype 'ResourceMessage' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Message' object with the stereotype ResourceMessage.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ResourceMessage(element : Message, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ResourceMessage");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ResourceMessage'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceMessage_URI(element : Message, valuespec : LiteralString) {
	find ResourceMessage(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ResourceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ResourceMessage'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ResourceMessage_actualMeasurementSet(element : Message, value : Element) {
	find ResourceMessage(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ResourceMessage'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceMessage_conformsTo(element : Message, value : Element) {
	find ResourceMessage(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ResourceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ResourceMessage'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern ResourceMessage_measurementSet(element : Message, value : Element) {
	find ResourceMessage(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Resources - Processes

/*
 * Pattern that queries elements with the stereotype 'Function' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Activity' object with the stereotype Function.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Function(element : Activity, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Function");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Function'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Function'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Function_URI(element : Activity, valuespec : LiteralString) {
	find Function(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'activityPerformableUnderCondition' attribute of elements with the stereotype 'Function'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Function'.
 * value : Element : A value of the attribute 'activityPerformableUnderCondition'.
 */
pattern
Function_activityPerformableUnderCondition(element : Activity, value : Element) {
	find Function(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "activityPerformableUnderCondition", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'Function'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Function'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern Function_actualMeasurementSet(element : Activity, value : Element) {
	find Function(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'affectedResource' attribute of elements with the stereotype 'Function'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Function'.
 * value : Element : A value of the attribute 'affectedResource'.
 */
pattern Function_affectedResource(element : Activity, value : Element) {
	find Function(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "affectedResource", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Function'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Function'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Function_conformsTo(element : Activity, value : Element) {
	find Function(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'Function'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Function'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern Function_measurementSet(element : Activity, value : Element) {
	find Function(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'FunctionAction' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'CallBehaviorAction' object with the stereotype FunctionAction.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
FunctionAction(element : CallBehaviorAction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "FunctionAction");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'FunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'FunctionAction'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
FunctionAction_URI(element : CallBehaviorAction, valuespec : LiteralString) {
	find FunctionAction(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'FunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'FunctionAction'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
FunctionAction_actualMeasurementSet(element : CallBehaviorAction, value : Element) {
	find FunctionAction(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'FunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'FunctionAction'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
FunctionAction_conformsTo(element : CallBehaviorAction, value : Element) {
	find FunctionAction(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'FunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'FunctionAction'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
FunctionAction_measurementSet(element : CallBehaviorAction, value : Element) {
	find FunctionAction(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'FunctionControlFlow' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'ControlFlow' object with the stereotype FunctionControlFlow.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
FunctionControlFlow(element : ControlFlow, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "FunctionControlFlow");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'FunctionControlFlow'.
 *
 * Parameters:
 * element: 'ControlFlow' object with the stereotype 'FunctionControlFlow'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
FunctionControlFlow_URI(element : ControlFlow, valuespec : LiteralString) {
	find FunctionControlFlow(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'FunctionControlFlow'.
 *
 * Parameters:
 * element: 'ControlFlow' object with the stereotype 'FunctionControlFlow'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
FunctionControlFlow_actualMeasurementSet(element : ControlFlow, value : Element) {
	find FunctionControlFlow(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'FunctionControlFlow'.
 *
 * Parameters:
 * element: 'ControlFlow' object with the stereotype 'FunctionControlFlow'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
FunctionControlFlow_conformsTo(element : ControlFlow, value : Element) {
	find FunctionControlFlow(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'FunctionControlFlow'.
 *
 * Parameters:
 * element: 'ControlFlow' object with the stereotype 'FunctionControlFlow'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
FunctionControlFlow_measurementSet(element : ControlFlow, value : Element) {
	find FunctionControlFlow(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'FunctionEdge' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'ActivityEdge' object with the stereotype FunctionEdge.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
FunctionEdge(element : ActivityEdge, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "FunctionEdge");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'FunctionEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'FunctionEdge'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern FunctionEdge_URI(element : ActivityEdge, valuespec : LiteralString) {
	find FunctionEdge(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'FunctionEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'FunctionEdge'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
FunctionEdge_actualMeasurementSet(element : ActivityEdge, value : Element) {
	find FunctionEdge(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'FunctionEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'FunctionEdge'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern FunctionEdge_conformsTo(element : ActivityEdge, value : Element) {
	find FunctionEdge(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'FunctionEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'FunctionEdge'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern FunctionEdge_measurementSet(element : ActivityEdge, value : Element) {
	find FunctionEdge(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'FunctionObjectFlow' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'ObjectFlow' object with the stereotype FunctionObjectFlow.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
FunctionObjectFlow(element : ObjectFlow, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "FunctionObjectFlow");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'FunctionObjectFlow'.
 *
 * Parameters:
 * element: 'ObjectFlow' object with the stereotype 'FunctionObjectFlow'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
FunctionObjectFlow_URI(element : ObjectFlow, valuespec : LiteralString) {
	find FunctionObjectFlow(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'FunctionObjectFlow'.
 *
 * Parameters:
 * element: 'ObjectFlow' object with the stereotype 'FunctionObjectFlow'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
FunctionObjectFlow_actualMeasurementSet(element : ObjectFlow, value : Element) {
	find FunctionObjectFlow(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'FunctionObjectFlow'.
 *
 * Parameters:
 * element: 'ObjectFlow' object with the stereotype 'FunctionObjectFlow'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern FunctionObjectFlow_conformsTo(element : ObjectFlow, value : Element) {
	find FunctionObjectFlow(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'FunctionObjectFlow'.
 *
 * Parameters:
 * element: 'ObjectFlow' object with the stereotype 'FunctionObjectFlow'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
FunctionObjectFlow_measurementSet(element : ObjectFlow, value : Element) {
	find FunctionObjectFlow(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Resources - Roadmap

/*
 * Pattern that queries elements with the stereotype 'Forecast' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype Forecast.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Forecast(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Forecast");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Forecast'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Forecast'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Forecast_URI(element : Dependency, valuespec : LiteralString) {
	find Forecast(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'Forecast'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Forecast'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern Forecast_actualMeasurementSet(element : Dependency, value : Element) {
	find Forecast(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Forecast'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Forecast'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Forecast_conformsTo(element : Dependency, value : Element) {
	find Forecast(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'forecastPeriod' attribute of elements with the stereotype 'Forecast'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Forecast'.
 * value : Element : A value of the attribute 'forecastPeriod'.
 */
pattern Forecast_forecastPeriod(element : Dependency, value : Element) {
	find Forecast(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "forecastPeriod", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'Forecast'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Forecast'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern Forecast_measurementSet(element : Dependency, value : Element) {
	find Forecast(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'SubjectOfForecast' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype SubjectOfForecast.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
SubjectOfForecast(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "SubjectOfForecast");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SubjectOfForecast'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfForecast'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern SubjectOfForecast_URI(element : Element, valuespec : LiteralString) {
	find SubjectOfForecast(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SubjectOfForecast'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfForecast'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern SubjectOfForecast_conformsTo(element : Element, value : Element) {
	find SubjectOfForecast(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Technology' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Technology.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Technology(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Technology");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Technology'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Technology'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Technology_URI(element : Class, valuespec : LiteralString) {
	find Technology(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'Technology'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Technology'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern
Technology_categoryCategorizesAsset(element : Class, value : Element) {
	find Technology(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Technology'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Technology'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Technology_conformsTo(element : Class, value : Element) {
	find Technology(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'Technology'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Technology'.
 * value : Element : A value of the attribute 'function'.
 */
pattern Technology_function(element : Class, value : Element) {
	find Technology(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'Technology'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Technology'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
Technology_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find Technology(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'isStandardConfiguration' attribute of elements with the stereotype 'Technology'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Technology'.
 * valuespec : LiteralBoolean : A value of the attribute 'isStandardConfiguration'.
 */
pattern
Technology_isStandardConfiguration(element : Class, valuespec : LiteralBoolean) {
	find Technology(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "isStandardConfiguration", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'Technology'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Technology'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern Technology_physicalLocation(element : Class, value : Element) {
	find Technology(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'Technology'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Technology'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern Technology_requiredEnvironment(element : Class, value : Element) {
	find Technology(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'VersionOfConfiguration' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype VersionOfConfiguration.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
VersionOfConfiguration(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "VersionOfConfiguration");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'VersionOfConfiguration'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'VersionOfConfiguration'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
VersionOfConfiguration_URI(element : Property, valuespec : LiteralString) {
	find VersionOfConfiguration(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'VersionOfConfiguration'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'VersionOfConfiguration'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
VersionOfConfiguration_actualMeasurementSet(element : Property, value : Element) {
	find VersionOfConfiguration(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'VersionOfConfiguration'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'VersionOfConfiguration'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
VersionOfConfiguration_conformsTo(element : Property, value : Element) {
	find VersionOfConfiguration(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'VersionOfConfiguration'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'VersionOfConfiguration'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
VersionOfConfiguration_measurementSet(element : Property, value : Element) {
	find VersionOfConfiguration(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'VersionSuccession' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype VersionSuccession.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
VersionSuccession(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "VersionSuccession");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'VersionSuccession'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'VersionSuccession'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
VersionSuccession_URI(element : Dependency, valuespec : LiteralString) {
	find VersionSuccession(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'VersionSuccession'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'VersionSuccession'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
VersionSuccession_actualMeasurementSet(element : Dependency, value : Element) {
	find VersionSuccession(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'VersionSuccession'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'VersionSuccession'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern VersionSuccession_conformsTo(element : Dependency, value : Element) {
	find VersionSuccession(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'VersionSuccession'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'VersionSuccession'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
VersionSuccession_measurementSet(element : Dependency, value : Element) {
	find VersionSuccession(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'VersionedElement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype VersionedElement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
VersionedElement(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "VersionedElement");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'VersionedElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'VersionedElement'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern VersionedElement_URI(element : Class, valuespec : LiteralString) {
	find VersionedElement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'VersionedElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'VersionedElement'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern VersionedElement_conformsTo(element : Class, value : Element) {
	find VersionedElement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'versionReleasedAtMilestone' attribute of elements with the stereotype 'VersionedElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'VersionedElement'.
 * value : Element : A value of the attribute 'versionReleasedAtMilestone'.
 */
pattern
VersionedElement_versionReleasedAtMilestone(element : Class, value : Element) {
	find VersionedElement(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "versionReleasedAtMilestone", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'versionWithdrawnAtMilestone' attribute of elements with the stereotype 'VersionedElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'VersionedElement'.
 * value : Element : A value of the attribute 'versionWithdrawnAtMilestone'.
 */
pattern
VersionedElement_versionWithdrawnAtMilestone(element : Class, value : Element) {
	find VersionedElement(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "versionWithdrawnAtMilestone", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'WholeLifeConfiguration' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype WholeLifeConfiguration.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
WholeLifeConfiguration(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "WholeLifeConfiguration");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'WholeLifeConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeConfiguration'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
WholeLifeConfiguration_URI(element : Class, valuespec : LiteralString) {
	find WholeLifeConfiguration(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'WholeLifeConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeConfiguration'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern WholeLifeConfiguration_conformsTo(element : Class, value : Element) {
	find WholeLifeConfiguration(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'WholeLifeConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeConfiguration'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
WholeLifeConfiguration_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find WholeLifeConfiguration(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'kind' attribute of elements with the stereotype 'WholeLifeConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeConfiguration'.
 * value : EnumerationLiteral : A value of the attribute 'kind'.
 */
pattern
WholeLifeConfiguration_kind(element : Class, value : EnumerationLiteral) {
	find WholeLifeConfiguration(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "kind", valuespec);
	InstanceValue.instance(valuespec, value);
}

// Resources - States

/*
 * Pattern that queries elements with the stereotype 'ResourceStateDescription' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'StateMachine' object with the stereotype ResourceStateDescription.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ResourceStateDescription(element : StateMachine, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ResourceStateDescription");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceStateDescription'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ResourceStateDescription'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ResourceStateDescription_URI(element : StateMachine, valuespec : LiteralString) {
	find ResourceStateDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ResourceStateDescription'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ResourceStateDescription'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ResourceStateDescription_actualMeasurementSet(element : StateMachine, value : Element) {
	find ResourceStateDescription(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceStateDescription'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ResourceStateDescription'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ResourceStateDescription_conformsTo(element : StateMachine, value : Element) {
	find ResourceStateDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ResourceStateDescription'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ResourceStateDescription'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ResourceStateDescription_measurementSet(element : StateMachine, value : Element) {
	find ResourceStateDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Resources - Structure

/*
 * Pattern that queries elements with the stereotype 'ResourceMethod' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Operation' object with the stereotype ResourceMethod.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ResourceMethod(element : Operation, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ResourceMethod");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceMethod'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ResourceMethod'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceMethod_URI(element : Operation, valuespec : LiteralString) {
	find ResourceMethod(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ResourceMethod'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ResourceMethod'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ResourceMethod_actualMeasurementSet(element : Operation, value : Element) {
	find ResourceMethod(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceMethod'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ResourceMethod'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceMethod_conformsTo(element : Operation, value : Element) {
	find ResourceMethod(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ResourceMethod'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ResourceMethod'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern ResourceMethod_measurementSet(element : Operation, value : Element) {
	find ResourceMethod(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ResourceParameter' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Parameter' object with the stereotype ResourceParameter.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ResourceParameter(element : Parameter, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ResourceParameter");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ResourceParameter'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ResourceParameter_URI(element : Parameter, valuespec : LiteralString) {
	find ResourceParameter(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ResourceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ResourceParameter'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ResourceParameter_actualMeasurementSet(element : Parameter, value : Element) {
	find ResourceParameter(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ResourceParameter'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceParameter_conformsTo(element : Parameter, value : Element) {
	find ResourceParameter(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ResourceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ResourceParameter'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ResourceParameter_measurementSet(element : Parameter, value : Element) {
	find ResourceParameter(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ResourcePort' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Port' object with the stereotype ResourcePort.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ResourcePort(element : Port, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ResourcePort");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourcePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'ResourcePort'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourcePort_URI(element : Port, valuespec : LiteralString) {
	find ResourcePort(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ResourcePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'ResourcePort'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern ResourcePort_actualMeasurementSet(element : Port, value : Element) {
	find ResourcePort(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourcePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'ResourcePort'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourcePort_conformsTo(element : Port, value : Element) {
	find ResourcePort(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'implements' attribute of elements with the stereotype 'ResourcePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'ResourcePort'.
 * value : Element : A value of the attribute 'implements'.
 */
pattern ResourcePort_implements(element : Port, value : Element) {
	find ResourcePort(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "implements", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ResourcePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'ResourcePort'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern ResourcePort_measurementSet(element : Port, value : Element) {
	find ResourcePort(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ResourceRole' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ResourceRole.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ResourceRole(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ResourceRole");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ResourceRole'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceRole_URI(element : Property, valuespec : LiteralString) {
	find ResourceRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ResourceRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ResourceRole'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ResourceRole_actualMeasurementSet(element : Property, value : Element) {
	find ResourceRole(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ResourceRole'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceRole_conformsTo(element : Property, value : Element) {
	find ResourceRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ResourceRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ResourceRole'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern ResourceRole_measurementSet(element : Property, value : Element) {
	find ResourceRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'ResourceRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ResourceRole'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern ResourceRole_physicalLocation(element : Property, value : Element) {
	find ResourceRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'ResourceRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ResourceRole'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern
ResourceRole_requiredEnvironment(element : Property, value : Element) {
	find ResourceRole(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'roleKind' attribute of elements with the stereotype 'ResourceRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ResourceRole'.
 * value : EnumerationLiteral : A value of the attribute 'roleKind'.
 */
pattern
ResourceRole_roleKind(element : Property, value : EnumerationLiteral) {
	find ResourceRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "roleKind", valuespec);
	InstanceValue.instance(valuespec, value);
}

// Resources - Taxonomy

/*
 * Pattern that queries elements with the stereotype 'CapabilityConfiguration' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype CapabilityConfiguration.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
CapabilityConfiguration(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "CapabilityConfiguration");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
CapabilityConfiguration_URI(element : Class, valuespec : LiteralString) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern
CapabilityConfiguration_categoryCategorizesAsset(element : Class, value : Element) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern CapabilityConfiguration_conformsTo(element : Class, value : Element) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'desribedBy' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * value : Element : A value of the attribute 'desribedBy'.
 */
pattern CapabilityConfiguration_desribedBy(element : Class, value : Element) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "desribedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'doctrine' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * value : Constraint : A value of the attribute 'doctrine'.
 */
pattern
CapabilityConfiguration_doctrine(element : Class, value : Constraint) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "doctrine", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * value : Element : A value of the attribute 'function'.
 */
pattern CapabilityConfiguration_function(element : Class, value : Element) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
CapabilityConfiguration_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'isStandardConfiguration' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * valuespec : LiteralBoolean : A value of the attribute 'isStandardConfiguration'.
 */
pattern
CapabilityConfiguration_isStandardConfiguration(element : Class, valuespec : LiteralBoolean) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "isStandardConfiguration", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern
CapabilityConfiguration_physicalLocation(element : Class, value : Element) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern
CapabilityConfiguration_requiredEnvironment(element : Class, value : Element) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'NaturalResource' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype NaturalResource.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
NaturalResource(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "NaturalResource");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'NaturalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'NaturalResource'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern NaturalResource_URI(element : Class, valuespec : LiteralString) {
	find NaturalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'NaturalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'NaturalResource'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern
NaturalResource_categoryCategorizesAsset(element : Class, value : Element) {
	find NaturalResource(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'NaturalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'NaturalResource'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern NaturalResource_conformsTo(element : Class, value : Element) {
	find NaturalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'NaturalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'NaturalResource'.
 * value : Element : A value of the attribute 'function'.
 */
pattern NaturalResource_function(element : Class, value : Element) {
	find NaturalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'NaturalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'NaturalResource'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
NaturalResource_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find NaturalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'isStandardConfiguration' attribute of elements with the stereotype 'NaturalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'NaturalResource'.
 * valuespec : LiteralBoolean : A value of the attribute 'isStandardConfiguration'.
 */
pattern
NaturalResource_isStandardConfiguration(element : Class, valuespec : LiteralBoolean) {
	find NaturalResource(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "isStandardConfiguration", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'NaturalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'NaturalResource'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern NaturalResource_physicalLocation(element : Class, value : Element) {
	find NaturalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'NaturalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'NaturalResource'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern
NaturalResource_requiredEnvironment(element : Class, value : Element) {
	find NaturalResource(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'PhysicalResource' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype PhysicalResource.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
PhysicalResource(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "PhysicalResource");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern PhysicalResource_URI(element : Class, valuespec : LiteralString) {
	find PhysicalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern
PhysicalResource_categoryCategorizesAsset(element : Class, value : Element) {
	find PhysicalResource(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern PhysicalResource_conformsTo(element : Class, value : Element) {
	find PhysicalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * value : Element : A value of the attribute 'function'.
 */
pattern PhysicalResource_function(element : Class, value : Element) {
	find PhysicalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
PhysicalResource_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find PhysicalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'isStandardConfiguration' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * valuespec : LiteralBoolean : A value of the attribute 'isStandardConfiguration'.
 */
pattern
PhysicalResource_isStandardConfiguration(element : Class, valuespec : LiteralBoolean) {
	find PhysicalResource(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "isStandardConfiguration", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern PhysicalResource_physicalLocation(element : Class, value : Element) {
	find PhysicalResource(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern
PhysicalResource_requiredEnvironment(element : Class, value : Element) {
	find PhysicalResource(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ResourceArchitecture' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype ResourceArchitecture.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ResourceArchitecture(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ResourceArchitecture");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArchitecture'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceArchitecture_URI(element : Class, valuespec : LiteralString) {
	find ResourceArchitecture(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'ResourceArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArchitecture'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern
ResourceArchitecture_categoryCategorizesAsset(element : Class, value : Element) {
	find ResourceArchitecture(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArchitecture'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceArchitecture_conformsTo(element : Class, value : Element) {
	find ResourceArchitecture(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'desribedBy' attribute of elements with the stereotype 'ResourceArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArchitecture'.
 * value : Element : A value of the attribute 'desribedBy'.
 */
pattern ResourceArchitecture_desribedBy(element : Class, value : Element) {
	find ResourceArchitecture(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "desribedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'ResourceArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArchitecture'.
 * value : Element : A value of the attribute 'function'.
 */
pattern ResourceArchitecture_function(element : Class, value : Element) {
	find ResourceArchitecture(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'ResourceArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArchitecture'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
ResourceArchitecture_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find ResourceArchitecture(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'isStandardConfiguration' attribute of elements with the stereotype 'ResourceArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArchitecture'.
 * valuespec : LiteralBoolean : A value of the attribute 'isStandardConfiguration'.
 */
pattern
ResourceArchitecture_isStandardConfiguration(element : Class, valuespec : LiteralBoolean) {
	find ResourceArchitecture(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "isStandardConfiguration", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'ResourceArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArchitecture'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern
ResourceArchitecture_physicalLocation(element : Class, value : Element) {
	find ResourceArchitecture(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'ResourceArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArchitecture'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern
ResourceArchitecture_requiredEnvironment(element : Class, value : Element) {
	find ResourceArchitecture(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ResourceArtifact' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype ResourceArtifact.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ResourceArtifact(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ResourceArtifact");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceArtifact_URI(element : Class, valuespec : LiteralString) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern
ResourceArtifact_categoryCategorizesAsset(element : Class, value : Element) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceArtifact_conformsTo(element : Class, value : Element) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * value : Element : A value of the attribute 'function'.
 */
pattern ResourceArtifact_function(element : Class, value : Element) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
ResourceArtifact_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'isStandardConfiguration' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * valuespec : LiteralBoolean : A value of the attribute 'isStandardConfiguration'.
 */
pattern
ResourceArtifact_isStandardConfiguration(element : Class, valuespec : LiteralBoolean) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "isStandardConfiguration", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern ResourceArtifact_physicalLocation(element : Class, value : Element) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern
ResourceArtifact_requiredEnvironment(element : Class, value : Element) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ResourcePerformer' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype ResourcePerformer.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ResourcePerformer(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ResourcePerformer");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourcePerformer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourcePerformer'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourcePerformer_URI(element : Class, valuespec : LiteralString) {
	find ResourcePerformer(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'ResourcePerformer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourcePerformer'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern
ResourcePerformer_categoryCategorizesAsset(element : Class, value : Element) {
	find ResourcePerformer(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourcePerformer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourcePerformer'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourcePerformer_conformsTo(element : Class, value : Element) {
	find ResourcePerformer(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'ResourcePerformer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourcePerformer'.
 * value : Element : A value of the attribute 'function'.
 */
pattern ResourcePerformer_function(element : Class, value : Element) {
	find ResourcePerformer(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'ResourcePerformer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourcePerformer'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
ResourcePerformer_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find ResourcePerformer(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'isStandardConfiguration' attribute of elements with the stereotype 'ResourcePerformer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourcePerformer'.
 * valuespec : LiteralBoolean : A value of the attribute 'isStandardConfiguration'.
 */
pattern
ResourcePerformer_isStandardConfiguration(element : Class, valuespec : LiteralBoolean) {
	find ResourcePerformer(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "isStandardConfiguration", valuespec);
}

/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'ResourcePerformer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourcePerformer'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern ResourcePerformer_milestone(element : Class, value : Element) {
	find ResourcePerformer(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'ResourcePerformer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourcePerformer'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern ResourcePerformer_physicalLocation(element : Class, value : Element) {
	find ResourcePerformer(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'ResourcePerformer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourcePerformer'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern
ResourcePerformer_requiredEnvironment(element : Class, value : Element) {
	find ResourcePerformer(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Software' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Software.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Software(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Software");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Software_URI(element : Class, valuespec : LiteralString) {
	find Software(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern Software_categoryCategorizesAsset(element : Class, value : Element) {
	find Software(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Software_conformsTo(element : Class, value : Element) {
	find Software(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * value : Element : A value of the attribute 'function'.
 */
pattern Software_function(element : Class, value : Element) {
	find Software(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern Software_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find Software(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'isStandardConfiguration' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * valuespec : LiteralBoolean : A value of the attribute 'isStandardConfiguration'.
 */
pattern
Software_isStandardConfiguration(element : Class, valuespec : LiteralBoolean) {
	find Software(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "isStandardConfiguration", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern Software_physicalLocation(element : Class, value : Element) {
	find Software(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern Software_requiredEnvironment(element : Class, value : Element) {
	find Software(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'System' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype System.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
System(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "System");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern System_URI(element : Class, valuespec : LiteralString) {
	find System(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern System_categoryCategorizesAsset(element : Class, value : Element) {
	find System(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern System_conformsTo(element : Class, value : Element) {
	find System(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'desribedBy' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * value : Element : A value of the attribute 'desribedBy'.
 */
pattern System_desribedBy(element : Class, value : Element) {
	find System(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "desribedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * value : Element : A value of the attribute 'function'.
 */
pattern System_function(element : Class, value : Element) {
	find System(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern System_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find System(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'isStandardConfiguration' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * valuespec : LiteralBoolean : A value of the attribute 'isStandardConfiguration'.
 */
pattern
System_isStandardConfiguration(element : Class, valuespec : LiteralBoolean) {
	find System(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "isStandardConfiguration", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern System_physicalLocation(element : Class, value : Element) {
	find System(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern System_requiredEnvironment(element : Class, value : Element) {
	find System(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

// Resources - Traceability

/*
 * Pattern that queries elements with the stereotype 'ProtocolImplementation' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype ProtocolImplementation.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ProtocolImplementation(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ProtocolImplementation");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProtocolImplementation'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ProtocolImplementation'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ProtocolImplementation_URI(element : Element, valuespec : LiteralString) {
	find ProtocolImplementation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProtocolImplementation'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ProtocolImplementation'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ProtocolImplementation_conformsTo(element : Element, value : Element) {
	find ProtocolImplementation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'implements' attribute of elements with the stereotype 'ProtocolImplementation'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ProtocolImplementation'.
 * value : Element : A value of the attribute 'implements'.
 */
pattern
ProtocolImplementation_implements(element : Element, value : Element) {
	find ProtocolImplementation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "implements", valuespec);
	ElementValue.element(valuespec, value);
}

// Security - Constraints

/*
 * Pattern that queries elements with the stereotype 'ActualRisk' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualRisk.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualRisk(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualRisk");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualRisk'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualRisk'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualRisk_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualRisk(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualRiskOwner' attribute of elements with the stereotype 'ActualRisk'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualRisk'.
 * value : Element : A value of the attribute 'actualRiskOwner'.
 */
pattern
ActualRisk_actualRiskOwner(element : InstanceSpecification, value : Element) {
	find ActualRisk(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "actualRiskOwner", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'affectedActualResource' attribute of elements with the stereotype 'ActualRisk'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualRisk'.
 * value : Element : A value of the attribute 'affectedActualResource'.
 */
pattern
ActualRisk_affectedActualResource(element : InstanceSpecification, value : Element) {
	find ActualRisk(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "affectedActualResource", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualRisk'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualRisk'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualRisk_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualRisk(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualRisk'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualRisk'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern ActualRisk_endDate(element : InstanceSpecification, value : Element) {
	find ActualRisk(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualRisk'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualRisk'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern
ActualRisk_startDate(element : InstanceSpecification, value : Element) {
	find ActualRisk(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'EnhancedSecurityControl' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype EnhancedSecurityControl.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
EnhancedSecurityControl(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "EnhancedSecurityControl");
}

/*
 * Pattern that queries the 'Derived' attribute of elements with the stereotype 'EnhancedSecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnhancedSecurityControl'.
 * value : Element : A value of the attribute 'Derived'.
 */
pattern EnhancedSecurityControl_Derived(element : Class, value : Element) {
	find EnhancedSecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "Derived", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'DerivedFrom' attribute of elements with the stereotype 'EnhancedSecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnhancedSecurityControl'.
 * value : Element : A value of the attribute 'DerivedFrom'.
 */
pattern
EnhancedSecurityControl_DerivedFrom(element : Class, value : Element) {
	find EnhancedSecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "DerivedFrom", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'Id' attribute of elements with the stereotype 'EnhancedSecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnhancedSecurityControl'.
 * valuespec : LiteralString : A value of the attribute 'Id'.
 */
pattern
EnhancedSecurityControl_Id(element : Class, valuespec : LiteralString) {
	find EnhancedSecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "Id", valuespec);
}

/*
 * Pattern that queries the 'Master' attribute of elements with the stereotype 'EnhancedSecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnhancedSecurityControl'.
 * value : Element : A value of the attribute 'Master'.
 */
pattern EnhancedSecurityControl_Master(element : Class, value : Element) {
	find EnhancedSecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "Master", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'RefinedBy' attribute of elements with the stereotype 'EnhancedSecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnhancedSecurityControl'.
 * value : NamedElement : A value of the attribute 'RefinedBy'.
 */
pattern
EnhancedSecurityControl_RefinedBy(element : Class, value : NamedElement) {
	find EnhancedSecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "RefinedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'SatisfiedBy' attribute of elements with the stereotype 'EnhancedSecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnhancedSecurityControl'.
 * value : NamedElement : A value of the attribute 'SatisfiedBy'.
 */
pattern
EnhancedSecurityControl_SatisfiedBy(element : Class, value : NamedElement) {
	find EnhancedSecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "SatisfiedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'Text' attribute of elements with the stereotype 'EnhancedSecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnhancedSecurityControl'.
 * valuespec : LiteralString : A value of the attribute 'Text'.
 */
pattern
EnhancedSecurityControl_Text(element : Class, valuespec : LiteralString) {
	find EnhancedSecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "Text", valuespec);
}

/*
 * Pattern that queries the 'TracedTo' attribute of elements with the stereotype 'EnhancedSecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnhancedSecurityControl'.
 * value : NamedElement : A value of the attribute 'TracedTo'.
 */
pattern
EnhancedSecurityControl_TracedTo(element : Class, value : NamedElement) {
	find EnhancedSecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "TracedTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'EnhancedSecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnhancedSecurityControl'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
EnhancedSecurityControl_URI(element : Class, valuespec : LiteralString) {
	find EnhancedSecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'VerifiedBy' attribute of elements with the stereotype 'EnhancedSecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnhancedSecurityControl'.
 * value : NamedElement : A value of the attribute 'VerifiedBy'.
 */
pattern
EnhancedSecurityControl_VerifiedBy(element : Class, value : NamedElement) {
	find EnhancedSecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "VerifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'EnhancedSecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnhancedSecurityControl'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern EnhancedSecurityControl_conformsTo(element : Class, value : Element) {
	find EnhancedSecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Risk' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Risk.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Risk(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Risk");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Risk'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Risk'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Risk_URI(element : Class, valuespec : LiteralString) {
	find Risk(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Risk'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Risk'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Risk_conformsTo(element : Class, value : Element) {
	find Risk(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'Risk'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Risk'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern Risk_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find Risk(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'riskOwner' attribute of elements with the stereotype 'Risk'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Risk'.
 * value : Element : A value of the attribute 'riskOwner'.
 */
pattern Risk_riskOwner(element : Class, value : Element) {
	find Risk(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "riskOwner", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'SecurityConstraint' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Constraint' object with the stereotype SecurityConstraint.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
SecurityConstraint(element : Constraint, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "SecurityConstraint");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SecurityConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'SecurityConstraint'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
SecurityConstraint_URI(element : Constraint, valuespec : LiteralString) {
	find SecurityConstraint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'SecurityConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'SecurityConstraint'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
SecurityConstraint_actualMeasurementSet(element : Constraint, value : Element) {
	find SecurityConstraint(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SecurityConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'SecurityConstraint'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern SecurityConstraint_conformsTo(element : Constraint, value : Element) {
	find SecurityConstraint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'SecurityConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'SecurityConstraint'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
SecurityConstraint_measurementSet(element : Constraint, value : Element) {
	find SecurityConstraint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'ruleKind' attribute of elements with the stereotype 'SecurityConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'SecurityConstraint'.
 * value : EnumerationLiteral : A value of the attribute 'ruleKind'.
 */
pattern
SecurityConstraint_ruleKind(element : Constraint, value : EnumerationLiteral) {
	find SecurityConstraint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "ruleKind", valuespec);
	InstanceValue.instance(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'SecurityControl' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype SecurityControl.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
SecurityControl(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "SecurityControl");
}

/*
 * Pattern that queries the 'Derived' attribute of elements with the stereotype 'SecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControl'.
 * value : Element : A value of the attribute 'Derived'.
 */
pattern SecurityControl_Derived(element : Class, value : Element) {
	find SecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "Derived", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'DerivedFrom' attribute of elements with the stereotype 'SecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControl'.
 * value : Element : A value of the attribute 'DerivedFrom'.
 */
pattern SecurityControl_DerivedFrom(element : Class, value : Element) {
	find SecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "DerivedFrom", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'Id' attribute of elements with the stereotype 'SecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControl'.
 * valuespec : LiteralString : A value of the attribute 'Id'.
 */
pattern SecurityControl_Id(element : Class, valuespec : LiteralString) {
	find SecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "Id", valuespec);
}

/*
 * Pattern that queries the 'Master' attribute of elements with the stereotype 'SecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControl'.
 * value : Element : A value of the attribute 'Master'.
 */
pattern SecurityControl_Master(element : Class, value : Element) {
	find SecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "Master", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'RefinedBy' attribute of elements with the stereotype 'SecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControl'.
 * value : NamedElement : A value of the attribute 'RefinedBy'.
 */
pattern SecurityControl_RefinedBy(element : Class, value : NamedElement) {
	find SecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "RefinedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'SatisfiedBy' attribute of elements with the stereotype 'SecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControl'.
 * value : NamedElement : A value of the attribute 'SatisfiedBy'.
 */
pattern SecurityControl_SatisfiedBy(element : Class, value : NamedElement) {
	find SecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "SatisfiedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'Text' attribute of elements with the stereotype 'SecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControl'.
 * valuespec : LiteralString : A value of the attribute 'Text'.
 */
pattern SecurityControl_Text(element : Class, valuespec : LiteralString) {
	find SecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "Text", valuespec);
}

/*
 * Pattern that queries the 'TracedTo' attribute of elements with the stereotype 'SecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControl'.
 * value : NamedElement : A value of the attribute 'TracedTo'.
 */
pattern SecurityControl_TracedTo(element : Class, value : NamedElement) {
	find SecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "TracedTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControl'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern SecurityControl_URI(element : Class, valuespec : LiteralString) {
	find SecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'VerifiedBy' attribute of elements with the stereotype 'SecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControl'.
 * value : NamedElement : A value of the attribute 'VerifiedBy'.
 */
pattern SecurityControl_VerifiedBy(element : Class, value : NamedElement) {
	find SecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "VerifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControl'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern SecurityControl_conformsTo(element : Class, value : Element) {
	find SecurityControl(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'mitigatingActualResource' attribute of elements with the stereotype 'SecurityControl'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControl'.
 * value : Element : A value of the attribute 'mitigatingActualResource'.
 */
pattern
SecurityControl_mitigatingActualResource(element : Class, value : Element) {
	find SecurityControl(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "mitigatingActualResource", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'SecurityControlFamily' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype SecurityControlFamily.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
SecurityControlFamily(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "SecurityControlFamily");
}

/*
 * Pattern that queries the 'Derived' attribute of elements with the stereotype 'SecurityControlFamily'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControlFamily'.
 * value : Element : A value of the attribute 'Derived'.
 */
pattern SecurityControlFamily_Derived(element : Class, value : Element) {
	find SecurityControlFamily(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "Derived", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'DerivedFrom' attribute of elements with the stereotype 'SecurityControlFamily'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControlFamily'.
 * value : Element : A value of the attribute 'DerivedFrom'.
 */
pattern SecurityControlFamily_DerivedFrom(element : Class, value : Element) {
	find SecurityControlFamily(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "DerivedFrom", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'Id' attribute of elements with the stereotype 'SecurityControlFamily'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControlFamily'.
 * valuespec : LiteralString : A value of the attribute 'Id'.
 */
pattern SecurityControlFamily_Id(element : Class, valuespec : LiteralString) {
	find SecurityControlFamily(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "Id", valuespec);
}

/*
 * Pattern that queries the 'Master' attribute of elements with the stereotype 'SecurityControlFamily'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControlFamily'.
 * value : Element : A value of the attribute 'Master'.
 */
pattern SecurityControlFamily_Master(element : Class, value : Element) {
	find SecurityControlFamily(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "Master", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'RefinedBy' attribute of elements with the stereotype 'SecurityControlFamily'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControlFamily'.
 * value : NamedElement : A value of the attribute 'RefinedBy'.
 */
pattern
SecurityControlFamily_RefinedBy(element : Class, value : NamedElement) {
	find SecurityControlFamily(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "RefinedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'SatisfiedBy' attribute of elements with the stereotype 'SecurityControlFamily'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControlFamily'.
 * value : NamedElement : A value of the attribute 'SatisfiedBy'.
 */
pattern
SecurityControlFamily_SatisfiedBy(element : Class, value : NamedElement) {
	find SecurityControlFamily(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "SatisfiedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'Text' attribute of elements with the stereotype 'SecurityControlFamily'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControlFamily'.
 * valuespec : LiteralString : A value of the attribute 'Text'.
 */
pattern
SecurityControlFamily_Text(element : Class, valuespec : LiteralString) {
	find SecurityControlFamily(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "Text", valuespec);
}

/*
 * Pattern that queries the 'TracedTo' attribute of elements with the stereotype 'SecurityControlFamily'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControlFamily'.
 * value : NamedElement : A value of the attribute 'TracedTo'.
 */
pattern
SecurityControlFamily_TracedTo(element : Class, value : NamedElement) {
	find SecurityControlFamily(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "TracedTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SecurityControlFamily'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControlFamily'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
SecurityControlFamily_URI(element : Class, valuespec : LiteralString) {
	find SecurityControlFamily(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'VerifiedBy' attribute of elements with the stereotype 'SecurityControlFamily'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControlFamily'.
 * value : NamedElement : A value of the attribute 'VerifiedBy'.
 */
pattern
SecurityControlFamily_VerifiedBy(element : Class, value : NamedElement) {
	find SecurityControlFamily(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "VerifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SecurityControlFamily'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityControlFamily'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern SecurityControlFamily_conformsTo(element : Class, value : Element) {
	find SecurityControlFamily(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'SubjectOfSecurityConstraint' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype SubjectOfSecurityConstraint.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
SubjectOfSecurityConstraint(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "SubjectOfSecurityConstraint");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SubjectOfSecurityConstraint'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfSecurityConstraint'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
SubjectOfSecurityConstraint_URI(element : Element, valuespec : LiteralString) {
	find SubjectOfSecurityConstraint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SubjectOfSecurityConstraint'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfSecurityConstraint'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
SubjectOfSecurityConstraint_conformsTo(element : Element, value : Element) {
	find SubjectOfSecurityConstraint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

// Security - Processes

/*
 * Pattern that queries elements with the stereotype 'Enhances' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype Enhances.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Enhances(element : Abstraction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Enhances");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Enhances'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Enhances'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Enhances_URI(element : Abstraction, valuespec : LiteralString) {
	find Enhances(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'Enhances'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Enhances'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
Enhances_actualMeasurementSet(element : Abstraction, value : Element) {
	find Enhances(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Enhances'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Enhances'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Enhances_conformsTo(element : Abstraction, value : Element) {
	find Enhances(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'Enhances'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Enhances'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern Enhances_measurementSet(element : Abstraction, value : Element) {
	find Enhances(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'Enhances'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Enhances'.
 * value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern Enhances_sourceContext(element : Abstraction, value : Classifier) {
	find Enhances(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'Enhances'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Enhances'.
 * value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern Enhances_sourcePropertyPath(element : Abstraction, value : Property) {
	find Enhances(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'Enhances'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Enhances'.
 * value : Classifier : A value of the attribute 'targetContext'.
 */
pattern Enhances_targetContext(element : Abstraction, value : Classifier) {
	find Enhances(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'Enhances'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Enhances'.
 * value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern Enhances_targetPropertyPath(element : Abstraction, value : Property) {
	find Enhances(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Protects' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype Protects.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Protects(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Protects");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Protects'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Protects'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Protects_URI(element : Dependency, valuespec : LiteralString) {
	find Protects(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'Protects'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Protects'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern Protects_actualMeasurementSet(element : Dependency, value : Element) {
	find Protects(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Protects'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Protects'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Protects_conformsTo(element : Dependency, value : Element) {
	find Protects(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'Protects'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Protects'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern Protects_measurementSet(element : Dependency, value : Element) {
	find Protects(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ProtectsInContext' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype ProtectsInContext.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ProtectsInContext(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ProtectsInContext");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProtectsInContext'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProtectsInContext'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ProtectsInContext_URI(element : Dependency, valuespec : LiteralString) {
	find ProtectsInContext(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ProtectsInContext'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProtectsInContext'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ProtectsInContext_actualMeasurementSet(element : Dependency, value : Element) {
	find ProtectsInContext(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProtectsInContext'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProtectsInContext'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProtectsInContext_conformsTo(element : Dependency, value : Element) {
	find ProtectsInContext(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ProtectsInContext'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProtectsInContext'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ProtectsInContext_measurementSet(element : Dependency, value : Element) {
	find ProtectsInContext(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'SecurityProcess' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Activity' object with the stereotype SecurityProcess.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
SecurityProcess(element : Activity, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "SecurityProcess");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SecurityProcess'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'SecurityProcess'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern SecurityProcess_URI(element : Activity, valuespec : LiteralString) {
	find SecurityProcess(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'activityPerformableUnderCondition' attribute of elements with the stereotype 'SecurityProcess'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'SecurityProcess'.
 * value : Element : A value of the attribute 'activityPerformableUnderCondition'.
 */
pattern
SecurityProcess_activityPerformableUnderCondition(element : Activity, value : Element) {
	find SecurityProcess(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "activityPerformableUnderCondition", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'SecurityProcess'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'SecurityProcess'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
SecurityProcess_actualMeasurementSet(element : Activity, value : Element) {
	find SecurityProcess(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'affectedResource' attribute of elements with the stereotype 'SecurityProcess'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'SecurityProcess'.
 * value : Element : A value of the attribute 'affectedResource'.
 */
pattern
SecurityProcess_affectedResource(element : Activity, value : Element) {
	find SecurityProcess(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "affectedResource", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SecurityProcess'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'SecurityProcess'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern SecurityProcess_conformsTo(element : Activity, value : Element) {
	find SecurityProcess(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'SecurityProcess'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'SecurityProcess'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern SecurityProcess_measurementSet(element : Activity, value : Element) {
	find SecurityProcess(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'SecurityProcessAction' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'CallBehaviorAction' object with the stereotype SecurityProcessAction.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
SecurityProcessAction(element : CallBehaviorAction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "SecurityProcessAction");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SecurityProcessAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'SecurityProcessAction'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
SecurityProcessAction_URI(element : CallBehaviorAction, valuespec : LiteralString) {
	find SecurityProcessAction(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'SecurityProcessAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'SecurityProcessAction'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
SecurityProcessAction_actualMeasurementSet(element : CallBehaviorAction, value : Element) {
	find SecurityProcessAction(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SecurityProcessAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'SecurityProcessAction'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
SecurityProcessAction_conformsTo(element : CallBehaviorAction, value : Element) {
	find SecurityProcessAction(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'SecurityProcessAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'SecurityProcessAction'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
SecurityProcessAction_measurementSet(element : CallBehaviorAction, value : Element) {
	find SecurityProcessAction(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Security - Structure

/*
 * Pattern that queries elements with the stereotype 'AssetRole' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype AssetRole.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
AssetRole(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "AssetRole");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'AssetRole'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'AssetRole'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern AssetRole_URI(element : Element, valuespec : LiteralString) {
	find AssetRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'AssetRole'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'AssetRole'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern AssetRole_conformsTo(element : Element, value : Element) {
	find AssetRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'SecurityProperty' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype SecurityProperty.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
SecurityProperty(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "SecurityProperty");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SecurityProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'SecurityProperty'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern SecurityProperty_URI(element : Property, valuespec : LiteralString) {
	find SecurityProperty(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'SecurityProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'SecurityProperty'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
SecurityProperty_actualMeasurementSet(element : Property, value : Element) {
	find SecurityProperty(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SecurityProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'SecurityProperty'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern SecurityProperty_conformsTo(element : Property, value : Element) {
	find SecurityProperty(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'SecurityProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'SecurityProperty'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern SecurityProperty_measurementSet(element : Property, value : Element) {
	find SecurityProperty(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Security - Taxonomy

/*
 * Pattern that queries elements with the stereotype 'Asset' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Asset.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Asset(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Asset");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Asset'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Asset'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Asset_URI(element : Class, valuespec : LiteralString) {
	find Asset(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'Asset'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Asset'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern Asset_categoryCategorizesAsset(element : Class, value : Element) {
	find Asset(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Asset'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Asset'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Asset_conformsTo(element : Class, value : Element) {
	find Asset(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'Asset'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Asset'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern Asset_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find Asset(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'Asset'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Asset'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern Asset_physicalLocation(element : Class, value : Element) {
	find Asset(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'Asset'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Asset'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern Asset_requiredEnvironment(element : Class, value : Element) {
	find Asset(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'OperationalMitigation' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype OperationalMitigation.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OperationalMitigation(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OperationalMitigation");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalMitigation'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalMitigation'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
OperationalMitigation_URI(element : Class, valuespec : LiteralString) {
	find OperationalMitigation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'OperationalMitigation'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalMitigation'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern
OperationalMitigation_categoryCategorizesAsset(element : Class, value : Element) {
	find OperationalMitigation(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalMitigation'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalMitigation'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalMitigation_conformsTo(element : Class, value : Element) {
	find OperationalMitigation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'desribedBy' attribute of elements with the stereotype 'OperationalMitigation'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalMitigation'.
 * value : Element : A value of the attribute 'desribedBy'.
 */
pattern OperationalMitigation_desribedBy(element : Class, value : Element) {
	find OperationalMitigation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "desribedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'OperationalMitigation'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalMitigation'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
OperationalMitigation_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find OperationalMitigation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'OperationalMitigation'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalMitigation'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern
OperationalMitigation_physicalLocation(element : Class, value : Element) {
	find OperationalMitigation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'OperationalMitigation'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OperationalMitigation'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern
OperationalMitigation_requiredEnvironment(element : Class, value : Element) {
	find OperationalMitigation(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ResourceMitigation' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype ResourceMitigation.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ResourceMitigation(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ResourceMitigation");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceMitigation'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceMitigation'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceMitigation_URI(element : Class, valuespec : LiteralString) {
	find ResourceMitigation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'ResourceMitigation'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceMitigation'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern
ResourceMitigation_categoryCategorizesAsset(element : Class, value : Element) {
	find ResourceMitigation(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceMitigation'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceMitigation'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceMitigation_conformsTo(element : Class, value : Element) {
	find ResourceMitigation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'desribedBy' attribute of elements with the stereotype 'ResourceMitigation'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceMitigation'.
 * value : Element : A value of the attribute 'desribedBy'.
 */
pattern ResourceMitigation_desribedBy(element : Class, value : Element) {
	find ResourceMitigation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "desribedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'ResourceMitigation'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceMitigation'.
 * value : Element : A value of the attribute 'function'.
 */
pattern ResourceMitigation_function(element : Class, value : Element) {
	find ResourceMitigation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'ResourceMitigation'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceMitigation'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
ResourceMitigation_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find ResourceMitigation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'isStandardConfiguration' attribute of elements with the stereotype 'ResourceMitigation'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceMitigation'.
 * valuespec : LiteralBoolean : A value of the attribute 'isStandardConfiguration'.
 */
pattern
ResourceMitigation_isStandardConfiguration(element : Class, valuespec : LiteralBoolean) {
	find ResourceMitigation(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "isStandardConfiguration", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'ResourceMitigation'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceMitigation'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern
ResourceMitigation_physicalLocation(element : Class, value : Element) {
	find ResourceMitigation(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'ResourceMitigation'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceMitigation'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern
ResourceMitigation_requiredEnvironment(element : Class, value : Element) {
	find ResourceMitigation(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'SecurityEnclave' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype SecurityEnclave.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
SecurityEnclave(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "SecurityEnclave");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SecurityEnclave'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityEnclave'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern SecurityEnclave_URI(element : Class, valuespec : LiteralString) {
	find SecurityEnclave(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'categoryCategorizesAsset' attribute of elements with the stereotype 'SecurityEnclave'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityEnclave'.
 * value : Element : A value of the attribute 'categoryCategorizesAsset'.
 */
pattern
SecurityEnclave_categoryCategorizesAsset(element : Class, value : Element) {
	find SecurityEnclave(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "categoryCategorizesAsset", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SecurityEnclave'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityEnclave'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern SecurityEnclave_conformsTo(element : Class, value : Element) {
	find SecurityEnclave(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'desribedBy' attribute of elements with the stereotype 'SecurityEnclave'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityEnclave'.
 * value : Element : A value of the attribute 'desribedBy'.
 */
pattern SecurityEnclave_desribedBy(element : Class, value : Element) {
	find SecurityEnclave(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "desribedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'function' attribute of elements with the stereotype 'SecurityEnclave'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityEnclave'.
 * value : Element : A value of the attribute 'function'.
 */
pattern SecurityEnclave_function(element : Class, value : Element) {
	find SecurityEnclave(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "function", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'SecurityEnclave'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityEnclave'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
SecurityEnclave_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find SecurityEnclave(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'isStandardConfiguration' attribute of elements with the stereotype 'SecurityEnclave'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityEnclave'.
 * valuespec : LiteralBoolean : A value of the attribute 'isStandardConfiguration'.
 */
pattern
SecurityEnclave_isStandardConfiguration(element : Class, valuespec : LiteralBoolean) {
	find SecurityEnclave(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "isStandardConfiguration", valuespec);
}

/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'SecurityEnclave'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityEnclave'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern SecurityEnclave_physicalLocation(element : Class, value : Element) {
	find SecurityEnclave(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'SecurityEnclave'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityEnclave'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern
SecurityEnclave_requiredEnvironment(element : Class, value : Element) {
	find SecurityEnclave(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}

// Security - Traceability

/*
 * Pattern that queries elements with the stereotype 'Affects' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype Affects.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Affects(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Affects");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Affects'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Affects'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Affects_URI(element : Dependency, valuespec : LiteralString) {
	find Affects(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'Affects'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Affects'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern Affects_actualMeasurementSet(element : Dependency, value : Element) {
	find Affects(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Affects'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Affects'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Affects_conformsTo(element : Dependency, value : Element) {
	find Affects(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'Affects'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Affects'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern Affects_measurementSet(element : Dependency, value : Element) {
	find Affects(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'AffectsInContext' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype AffectsInContext.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
AffectsInContext(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "AffectsInContext");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'AffectsInContext'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'AffectsInContext'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
AffectsInContext_URI(element : Dependency, valuespec : LiteralString) {
	find AffectsInContext(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'AffectsInContext'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'AffectsInContext'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
AffectsInContext_actualMeasurementSet(element : Dependency, value : Element) {
	find AffectsInContext(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'AffectsInContext'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'AffectsInContext'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern AffectsInContext_conformsTo(element : Dependency, value : Element) {
	find AffectsInContext(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'AffectsInContext'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'AffectsInContext'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
AffectsInContext_measurementSet(element : Dependency, value : Element) {
	find AffectsInContext(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Mitigates' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype Mitigates.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Mitigates(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Mitigates");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Mitigates'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Mitigates'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Mitigates_URI(element : Dependency, valuespec : LiteralString) {
	find Mitigates(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'Mitigates'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Mitigates'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
Mitigates_actualMeasurementSet(element : Dependency, value : Element) {
	find Mitigates(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Mitigates'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Mitigates'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Mitigates_conformsTo(element : Dependency, value : Element) {
	find Mitigates(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'Mitigates'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Mitigates'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern Mitigates_measurementSet(element : Dependency, value : Element) {
	find Mitigates(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'OwnsRisk' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype OwnsRisk.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OwnsRisk(element : Abstraction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OwnsRisk");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OwnsRisk'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsRisk'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OwnsRisk_URI(element : Abstraction, valuespec : LiteralString) {
	find OwnsRisk(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'OwnsRisk'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsRisk'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
OwnsRisk_actualMeasurementSet(element : Abstraction, value : Element) {
	find OwnsRisk(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OwnsRisk'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsRisk'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OwnsRisk_conformsTo(element : Abstraction, value : Element) {
	find OwnsRisk(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'OwnsRisk'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsRisk'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern OwnsRisk_measurementSet(element : Abstraction, value : Element) {
	find OwnsRisk(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'OwnsRisk'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsRisk'.
 * value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern OwnsRisk_sourceContext(element : Abstraction, value : Classifier) {
	find OwnsRisk(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'OwnsRisk'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsRisk'.
 * value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern OwnsRisk_sourcePropertyPath(element : Abstraction, value : Property) {
	find OwnsRisk(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'OwnsRisk'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsRisk'.
 * value : Classifier : A value of the attribute 'targetContext'.
 */
pattern OwnsRisk_targetContext(element : Abstraction, value : Classifier) {
	find OwnsRisk(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'OwnsRisk'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsRisk'.
 * value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern OwnsRisk_targetPropertyPath(element : Abstraction, value : Property) {
	find OwnsRisk(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'OwnsRiskInContext' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype OwnsRiskInContext.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OwnsRiskInContext(element : Abstraction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OwnsRiskInContext");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OwnsRiskInContext'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsRiskInContext'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
OwnsRiskInContext_URI(element : Abstraction, valuespec : LiteralString) {
	find OwnsRiskInContext(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'OwnsRiskInContext'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsRiskInContext'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
OwnsRiskInContext_actualMeasurementSet(element : Abstraction, value : Element) {
	find OwnsRiskInContext(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OwnsRiskInContext'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsRiskInContext'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OwnsRiskInContext_conformsTo(element : Abstraction, value : Element) {
	find OwnsRiskInContext(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'OwnsRiskInContext'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsRiskInContext'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
OwnsRiskInContext_measurementSet(element : Abstraction, value : Element) {
	find OwnsRiskInContext(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'OwnsRiskInContext'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsRiskInContext'.
 * value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern
OwnsRiskInContext_sourceContext(element : Abstraction, value : Classifier) {
	find OwnsRiskInContext(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'OwnsRiskInContext'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsRiskInContext'.
 * value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern
OwnsRiskInContext_sourcePropertyPath(element : Abstraction, value : Property) {
	find OwnsRiskInContext(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'OwnsRiskInContext'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsRiskInContext'.
 * value : Classifier : A value of the attribute 'targetContext'.
 */
pattern
OwnsRiskInContext_targetContext(element : Abstraction, value : Classifier) {
	find OwnsRiskInContext(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'OwnsRiskInContext'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OwnsRiskInContext'.
 * value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern
OwnsRiskInContext_targetPropertyPath(element : Abstraction, value : Property) {
	find OwnsRiskInContext(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

// Services - Connectivity

/*
 * Pattern that queries elements with the stereotype 'ServiceConnector' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Connector' object with the stereotype ServiceConnector.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ServiceConnector(element : Connector, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ServiceConnector");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ServiceConnector'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceConnector_URI(element : Connector, valuespec : LiteralString) {
	find ServiceConnector(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ServiceConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ServiceConnector'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ServiceConnector_actualMeasurementSet(element : Connector, value : Element) {
	find ServiceConnector(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ServiceConnector'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceConnector_conformsTo(element : Connector, value : Element) {
	find ServiceConnector(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ServiceConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ServiceConnector'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ServiceConnector_measurementSet(element : Connector, value : Element) {
	find ServiceConnector(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ServiceInterface' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype ServiceInterface.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ServiceInterface(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ServiceInterface");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceInterface'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceInterface'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceInterface_URI(element : Class, valuespec : LiteralString) {
	find ServiceInterface(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceInterface'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceInterface'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceInterface_conformsTo(element : Class, value : Element) {
	find ServiceInterface(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'ServiceInterface'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceInterface'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
ServiceInterface_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find ServiceInterface(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

// Services - Constraints

/*
 * Pattern that queries elements with the stereotype 'ServicePolicy' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Constraint' object with the stereotype ServicePolicy.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ServicePolicy(element : Constraint, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ServicePolicy");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServicePolicy'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ServicePolicy'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServicePolicy_URI(element : Constraint, valuespec : LiteralString) {
	find ServicePolicy(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ServicePolicy'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ServicePolicy'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ServicePolicy_actualMeasurementSet(element : Constraint, value : Element) {
	find ServicePolicy(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServicePolicy'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ServicePolicy'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServicePolicy_conformsTo(element : Constraint, value : Element) {
	find ServicePolicy(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ServicePolicy'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ServicePolicy'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern ServicePolicy_measurementSet(element : Constraint, value : Element) {
	find ServicePolicy(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'ruleKind' attribute of elements with the stereotype 'ServicePolicy'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ServicePolicy'.
 * value : EnumerationLiteral : A value of the attribute 'ruleKind'.
 */
pattern
ServicePolicy_ruleKind(element : Constraint, value : EnumerationLiteral) {
	find ServicePolicy(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "ruleKind", valuespec);
	InstanceValue.instance(valuespec, value);
}

// Services - Interaction Scenarios

/*
 * Pattern that queries elements with the stereotype 'ServiceMessage' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Message' object with the stereotype ServiceMessage.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ServiceMessage(element : Message, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ServiceMessage");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ServiceMessage'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceMessage_URI(element : Message, valuespec : LiteralString) {
	find ServiceMessage(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ServiceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ServiceMessage'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ServiceMessage_actualMeasurementSet(element : Message, value : Element) {
	find ServiceMessage(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ServiceMessage'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceMessage_conformsTo(element : Message, value : Element) {
	find ServiceMessage(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ServiceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ServiceMessage'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern ServiceMessage_measurementSet(element : Message, value : Element) {
	find ServiceMessage(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Services - Processes

/*
 * Pattern that queries elements with the stereotype 'ServiceFunction' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Activity' object with the stereotype ServiceFunction.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ServiceFunction(element : Activity, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ServiceFunction");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceFunction'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ServiceFunction'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceFunction_URI(element : Activity, valuespec : LiteralString) {
	find ServiceFunction(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'activityPerformableUnderCondition' attribute of elements with the stereotype 'ServiceFunction'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ServiceFunction'.
 * value : Element : A value of the attribute 'activityPerformableUnderCondition'.
 */
pattern
ServiceFunction_activityPerformableUnderCondition(element : Activity, value : Element) {
	find ServiceFunction(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "activityPerformableUnderCondition", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ServiceFunction'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ServiceFunction'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ServiceFunction_actualMeasurementSet(element : Activity, value : Element) {
	find ServiceFunction(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceFunction'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ServiceFunction'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceFunction_conformsTo(element : Activity, value : Element) {
	find ServiceFunction(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ServiceFunction'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ServiceFunction'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern ServiceFunction_measurementSet(element : Activity, value : Element) {
	find ServiceFunction(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ServiceFunctionAction' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'CallBehaviorAction' object with the stereotype ServiceFunctionAction.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ServiceFunctionAction(element : CallBehaviorAction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ServiceFunctionAction");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceFunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ServiceFunctionAction'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ServiceFunctionAction_URI(element : CallBehaviorAction, valuespec : LiteralString) {
	find ServiceFunctionAction(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ServiceFunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ServiceFunctionAction'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ServiceFunctionAction_actualMeasurementSet(element : CallBehaviorAction, value : Element) {
	find ServiceFunctionAction(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceFunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ServiceFunctionAction'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ServiceFunctionAction_conformsTo(element : CallBehaviorAction, value : Element) {
	find ServiceFunctionAction(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ServiceFunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ServiceFunctionAction'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ServiceFunctionAction_measurementSet(element : CallBehaviorAction, value : Element) {
	find ServiceFunctionAction(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Services - States

/*
 * Pattern that queries elements with the stereotype 'ServiceStateDescription' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'StateMachine' object with the stereotype ServiceStateDescription.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ServiceStateDescription(element : StateMachine, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ServiceStateDescription");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceStateDescription'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ServiceStateDescription'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ServiceStateDescription_URI(element : StateMachine, valuespec : LiteralString) {
	find ServiceStateDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ServiceStateDescription'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ServiceStateDescription'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ServiceStateDescription_actualMeasurementSet(element : StateMachine, value : Element) {
	find ServiceStateDescription(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceStateDescription'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ServiceStateDescription'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ServiceStateDescription_conformsTo(element : StateMachine, value : Element) {
	find ServiceStateDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ServiceStateDescription'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ServiceStateDescription'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ServiceStateDescription_measurementSet(element : StateMachine, value : Element) {
	find ServiceStateDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Services - Structure

/*
 * Pattern that queries elements with the stereotype 'ServiceMethod' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Operation' object with the stereotype ServiceMethod.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ServiceMethod(element : Operation, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ServiceMethod");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceMethod'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ServiceMethod'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceMethod_URI(element : Operation, valuespec : LiteralString) {
	find ServiceMethod(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ServiceMethod'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ServiceMethod'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ServiceMethod_actualMeasurementSet(element : Operation, value : Element) {
	find ServiceMethod(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceMethod'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ServiceMethod'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceMethod_conformsTo(element : Operation, value : Element) {
	find ServiceMethod(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ServiceMethod'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ServiceMethod'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern ServiceMethod_measurementSet(element : Operation, value : Element) {
	find ServiceMethod(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ServiceParameter' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Parameter' object with the stereotype ServiceParameter.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ServiceParameter(element : Parameter, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ServiceParameter");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ServiceParameter'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceParameter_URI(element : Parameter, valuespec : LiteralString) {
	find ServiceParameter(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ServiceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ServiceParameter'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ServiceParameter_actualMeasurementSet(element : Parameter, value : Element) {
	find ServiceParameter(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ServiceParameter'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceParameter_conformsTo(element : Parameter, value : Element) {
	find ServiceParameter(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ServiceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ServiceParameter'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ServiceParameter_measurementSet(element : Parameter, value : Element) {
	find ServiceParameter(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ServicePort' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Port' object with the stereotype ServicePort.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ServicePort(element : Port, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ServicePort");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServicePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'ServicePort'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServicePort_URI(element : Port, valuespec : LiteralString) {
	find ServicePort(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ServicePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'ServicePort'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern ServicePort_actualMeasurementSet(element : Port, value : Element) {
	find ServicePort(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServicePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'ServicePort'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServicePort_conformsTo(element : Port, value : Element) {
	find ServicePort(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ServicePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'ServicePort'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern ServicePort_measurementSet(element : Port, value : Element) {
	find ServicePort(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ServiceSpecificationRole' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ServiceSpecificationRole.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ServiceSpecificationRole(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ServiceSpecificationRole");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceSpecificationRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ServiceSpecificationRole'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ServiceSpecificationRole_URI(element : Property, valuespec : LiteralString) {
	find ServiceSpecificationRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ServiceSpecificationRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ServiceSpecificationRole'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ServiceSpecificationRole_actualMeasurementSet(element : Property, value : Element) {
	find ServiceSpecificationRole(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceSpecificationRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ServiceSpecificationRole'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ServiceSpecificationRole_conformsTo(element : Property, value : Element) {
	find ServiceSpecificationRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ServiceSpecificationRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ServiceSpecificationRole'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ServiceSpecificationRole_measurementSet(element : Property, value : Element) {
	find ServiceSpecificationRole(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Services - Taxonomy

/*
 * Pattern that queries elements with the stereotype 'ServiceSpecification' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype ServiceSpecification.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ServiceSpecification(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ServiceSpecification");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceSpecification'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceSpecification'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceSpecification_URI(element : Class, valuespec : LiteralString) {
	find ServiceSpecification(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceSpecification'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceSpecification'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceSpecification_conformsTo(element : Class, value : Element) {
	find ServiceSpecification(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'ServiceSpecification'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceSpecification'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
ServiceSpecification_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find ServiceSpecification(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

// Services - Traceability

/*
 * Pattern that queries elements with the stereotype 'Consumes' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype Consumes.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Consumes(element : Abstraction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Consumes");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Consumes'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Consumes'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Consumes_URI(element : Abstraction, valuespec : LiteralString) {
	find Consumes(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'Consumes'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Consumes'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
Consumes_actualMeasurementSet(element : Abstraction, value : Element) {
	find Consumes(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Consumes'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Consumes'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Consumes_conformsTo(element : Abstraction, value : Element) {
	find Consumes(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'Consumes'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Consumes'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern Consumes_measurementSet(element : Abstraction, value : Element) {
	find Consumes(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'Consumes'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Consumes'.
 * value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern Consumes_sourceContext(element : Abstraction, value : Classifier) {
	find Consumes(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'Consumes'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Consumes'.
 * value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern Consumes_sourcePropertyPath(element : Abstraction, value : Property) {
	find Consumes(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'Consumes'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Consumes'.
 * value : Classifier : A value of the attribute 'targetContext'.
 */
pattern Consumes_targetContext(element : Abstraction, value : Classifier) {
	find Consumes(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'Consumes'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Consumes'.
 * value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern Consumes_targetPropertyPath(element : Abstraction, value : Property) {
	find Consumes(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

// Standards - Structure

/*
 * Pattern that queries elements with the stereotype 'ProtocolLayer' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ProtocolLayer.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ProtocolLayer(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ProtocolLayer");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProtocolLayer'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProtocolLayer'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProtocolLayer_URI(element : Property, valuespec : LiteralString) {
	find ProtocolLayer(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ProtocolLayer'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProtocolLayer'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ProtocolLayer_actualMeasurementSet(element : Property, value : Element) {
	find ProtocolLayer(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProtocolLayer'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProtocolLayer'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProtocolLayer_conformsTo(element : Property, value : Element) {
	find ProtocolLayer(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ProtocolLayer'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProtocolLayer'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern ProtocolLayer_measurementSet(element : Property, value : Element) {
	find ProtocolLayer(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Standards - Taxonomy

/*
 * Pattern that queries elements with the stereotype 'Protocol' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Protocol.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Protocol(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Protocol");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Protocol'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Protocol'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Protocol_URI(element : Class, valuespec : LiteralString) {
	find Protocol(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Protocol'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Protocol'.
 * value : Class : A value of the attribute 'conformsTo'.
 */
pattern Protocol_conformsTo(element : Class, value : Class) {
	find Protocol(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'Protocol'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Protocol'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern Protocol_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find Protocol(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'mandatedDate' attribute of elements with the stereotype 'Protocol'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Protocol'.
 * value : Element : A value of the attribute 'mandatedDate'.
 */
pattern Protocol_mandatedDate(element : Class, value : Element) {
	find Protocol(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "mandatedDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'ratifiedBy' attribute of elements with the stereotype 'Protocol'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Protocol'.
 * value : Element : A value of the attribute 'ratifiedBy'.
 */
pattern Protocol_ratifiedBy(element : Class, value : Element) {
	find Protocol(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "ratifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'retiredDate' attribute of elements with the stereotype 'Protocol'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Protocol'.
 * value : Element : A value of the attribute 'retiredDate'.
 */
pattern Protocol_retiredDate(element : Class, value : Element) {
	find Protocol(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "retiredDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'ProtocolStack' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype ProtocolStack.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ProtocolStack(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ProtocolStack");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProtocolStack'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProtocolStack'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProtocolStack_URI(element : Class, valuespec : LiteralString) {
	find ProtocolStack(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProtocolStack'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProtocolStack'.
 * value : Class : A value of the attribute 'conformsTo'.
 */
pattern ProtocolStack_conformsTo(element : Class, value : Class) {
	find ProtocolStack(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'ProtocolStack'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProtocolStack'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
ProtocolStack_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find ProtocolStack(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'mandatedDate' attribute of elements with the stereotype 'ProtocolStack'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProtocolStack'.
 * value : Element : A value of the attribute 'mandatedDate'.
 */
pattern ProtocolStack_mandatedDate(element : Class, value : Element) {
	find ProtocolStack(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "mandatedDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'ratifiedBy' attribute of elements with the stereotype 'ProtocolStack'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProtocolStack'.
 * value : Element : A value of the attribute 'ratifiedBy'.
 */
pattern ProtocolStack_ratifiedBy(element : Class, value : Element) {
	find ProtocolStack(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "ratifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'retiredDate' attribute of elements with the stereotype 'ProtocolStack'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProtocolStack'.
 * value : Element : A value of the attribute 'retiredDate'.
 */
pattern ProtocolStack_retiredDate(element : Class, value : Element) {
	find ProtocolStack(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "retiredDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Standard' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Standard.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Standard(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Standard");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Standard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Standard'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Standard_URI(element : Class, valuespec : LiteralString) {
	find Standard(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Standard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Standard'.
 * value : Class : A value of the attribute 'conformsTo'.
 */
pattern Standard_conformsTo(element : Class, value : Class) {
	find Standard(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'Standard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Standard'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern Standard_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find Standard(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'mandatedDate' attribute of elements with the stereotype 'Standard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Standard'.
 * value : Element : A value of the attribute 'mandatedDate'.
 */
pattern Standard_mandatedDate(element : Class, value : Element) {
	find Standard(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "mandatedDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'ratifiedBy' attribute of elements with the stereotype 'Standard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Standard'.
 * value : Element : A value of the attribute 'ratifiedBy'.
 */
pattern Standard_ratifiedBy(element : Class, value : Element) {
	find Standard(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "ratifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'retiredDate' attribute of elements with the stereotype 'Standard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Standard'.
 * value : Element : A value of the attribute 'retiredDate'.
 */
pattern Standard_retiredDate(element : Class, value : Element) {
	find Standard(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "retiredDate", valuespec);
	ElementValue.element(valuespec, value);
}

// Strategic - Processes

/*
 * Pattern that queries elements with the stereotype 'ActualEnduringTask' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualEnduringTask.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualEnduringTask(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualEnduringTask");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualEnduringTask'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualEnduringTask'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualEnduringTask_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualEnduringTask(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualEnduringTask'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualEnduringTask'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualEnduringTask_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualEnduringTask(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualEnduringTask'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualEnduringTask'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern
ActualEnduringTask_endDate(element : InstanceSpecification, value : Element) {
	find ActualEnduringTask(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualEnduringTask'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualEnduringTask'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern
ActualEnduringTask_startDate(element : InstanceSpecification, value : Element) {
	find ActualEnduringTask(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'CapabilityForTask' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype CapabilityForTask.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
CapabilityForTask(element : Abstraction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "CapabilityForTask");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'CapabilityForTask'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CapabilityForTask'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
CapabilityForTask_URI(element : Abstraction, valuespec : LiteralString) {
	find CapabilityForTask(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'CapabilityForTask'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CapabilityForTask'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
CapabilityForTask_actualMeasurementSet(element : Abstraction, value : Element) {
	find CapabilityForTask(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'CapabilityForTask'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CapabilityForTask'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern CapabilityForTask_conformsTo(element : Abstraction, value : Element) {
	find CapabilityForTask(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'CapabilityForTask'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CapabilityForTask'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
CapabilityForTask_measurementSet(element : Abstraction, value : Element) {
	find CapabilityForTask(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'CapabilityForTask'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CapabilityForTask'.
 * value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern
CapabilityForTask_sourceContext(element : Abstraction, value : Classifier) {
	find CapabilityForTask(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'CapabilityForTask'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CapabilityForTask'.
 * value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern
CapabilityForTask_sourcePropertyPath(element : Abstraction, value : Property) {
	find CapabilityForTask(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'CapabilityForTask'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CapabilityForTask'.
 * value : Classifier : A value of the attribute 'targetContext'.
 */
pattern
CapabilityForTask_targetContext(element : Abstraction, value : Classifier) {
	find CapabilityForTask(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'CapabilityForTask'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'CapabilityForTask'.
 * value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern
CapabilityForTask_targetPropertyPath(element : Abstraction, value : Property) {
	find CapabilityForTask(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'EnduringTask' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype EnduringTask.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
EnduringTask(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "EnduringTask");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'EnduringTask'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnduringTask'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern EnduringTask_URI(element : Class, valuespec : LiteralString) {
	find EnduringTask(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'EnduringTask'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnduringTask'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern EnduringTask_conformsTo(element : Class, value : Element) {
	find EnduringTask(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'EnduringTask'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnduringTask'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
EnduringTask_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find EnduringTask(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

// Strategic - States

/*
 * Pattern that queries elements with the stereotype 'AchievedEffect' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype AchievedEffect.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
AchievedEffect(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "AchievedEffect");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'AchievedEffect'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'AchievedEffect'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern AchievedEffect_URI(element : Dependency, valuespec : LiteralString) {
	find AchievedEffect(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'AchievedEffect'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'AchievedEffect'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
AchievedEffect_actualMeasurementSet(element : Dependency, value : Element) {
	find AchievedEffect(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'AchievedEffect'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'AchievedEffect'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern AchievedEffect_conformsTo(element : Dependency, value : Element) {
	find AchievedEffect(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'desiredEffect' attribute of elements with the stereotype 'AchievedEffect'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'AchievedEffect'.
 * value : Dependency : A value of the attribute 'desiredEffect'.
 */
pattern
AchievedEffect_desiredEffect(element : Dependency, value : Dependency) {
	find AchievedEffect(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "desiredEffect", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'AchievedEffect'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'AchievedEffect'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern AchievedEffect_measurementSet(element : Dependency, value : Element) {
	find AchievedEffect(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Achiever' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype Achiever.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Achiever(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Achiever");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Achiever'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Achiever'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
Achiever_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find Achiever(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Achiever'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Achiever'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
Achiever_conformsTo(element : InstanceSpecification, value : Element) {
	find Achiever(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'DesiredEffect' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype DesiredEffect.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
DesiredEffect(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "DesiredEffect");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'DesiredEffect'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'DesiredEffect'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern DesiredEffect_URI(element : Dependency, valuespec : LiteralString) {
	find DesiredEffect(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'achievedEffect' attribute of elements with the stereotype 'DesiredEffect'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'DesiredEffect'.
 * value : Dependency : A value of the attribute 'achievedEffect'.
 */
pattern
DesiredEffect_achievedEffect(element : Dependency, value : Dependency) {
	find DesiredEffect(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "achievedEffect", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'DesiredEffect'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'DesiredEffect'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
DesiredEffect_actualMeasurementSet(element : Dependency, value : Element) {
	find DesiredEffect(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'DesiredEffect'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'DesiredEffect'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern DesiredEffect_conformsTo(element : Dependency, value : Element) {
	find DesiredEffect(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'DesiredEffect'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'DesiredEffect'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern DesiredEffect_measurementSet(element : Dependency, value : Element) {
	find DesiredEffect(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Desirer' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Desirer.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Desirer(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Desirer");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Desirer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Desirer'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Desirer_URI(element : Class, valuespec : LiteralString) {
	find Desirer(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Desirer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Desirer'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Desirer_conformsTo(element : Class, value : Element) {
	find Desirer(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

// Strategic - Structure

/*
 * Pattern that queries elements with the stereotype 'CapabilityProperty' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype CapabilityProperty.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
CapabilityProperty(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "CapabilityProperty");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'CapabilityProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'CapabilityProperty'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
CapabilityProperty_URI(element : Property, valuespec : LiteralString) {
	find CapabilityProperty(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'CapabilityProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'CapabilityProperty'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
CapabilityProperty_actualMeasurementSet(element : Property, value : Element) {
	find CapabilityProperty(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'CapabilityProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'CapabilityProperty'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern CapabilityProperty_conformsTo(element : Property, value : Element) {
	find CapabilityProperty(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'CapabilityProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'CapabilityProperty'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
CapabilityProperty_measurementSet(element : Property, value : Element) {
	find CapabilityProperty(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'StructuralPart' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype StructuralPart.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
StructuralPart(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "StructuralPart");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'StructuralPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'StructuralPart'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern StructuralPart_URI(element : Property, valuespec : LiteralString) {
	find StructuralPart(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'StructuralPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'StructuralPart'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
StructuralPart_actualMeasurementSet(element : Property, value : Element) {
	find StructuralPart(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'StructuralPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'StructuralPart'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern StructuralPart_conformsTo(element : Property, value : Element) {
	find StructuralPart(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'StructuralPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'StructuralPart'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern StructuralPart_measurementSet(element : Property, value : Element) {
	find StructuralPart(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'TemporalPart' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype TemporalPart.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
TemporalPart(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "TemporalPart");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'TemporalPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'TemporalPart'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern TemporalPart_URI(element : Property, valuespec : LiteralString) {
	find TemporalPart(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'TemporalPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'TemporalPart'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
TemporalPart_actualMeasurementSet(element : Property, value : Element) {
	find TemporalPart(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'TemporalPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'TemporalPart'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern TemporalPart_conformsTo(element : Property, value : Element) {
	find TemporalPart(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'TemporalPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'TemporalPart'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern TemporalPart_measurementSet(element : Property, value : Element) {
	find TemporalPart(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

// Strategic - Taxonomy

/*
 * Pattern that queries elements with the stereotype 'ActualEnterprisePhase' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualEnterprisePhase.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ActualEnterprisePhase(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ActualEnterprisePhase");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualEnterprisePhase'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualEnterprisePhase'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ActualEnterprisePhase_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualEnterprisePhase(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualEnterprisePhase'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualEnterprisePhase'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ActualEnterprisePhase_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualEnterprisePhase(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualEnterprisePhase'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualEnterprisePhase'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern
ActualEnterprisePhase_endDate(element : InstanceSpecification, value : Element) {
	find ActualEnterprisePhase(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'goal' attribute of elements with the stereotype 'ActualEnterprisePhase'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualEnterprisePhase'.
 * value : Class : A value of the attribute 'goal'.
 */
pattern
ActualEnterprisePhase_goal(element : InstanceSpecification, value : Class) {
	find ActualEnterprisePhase(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "goal", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'operationalArchitectureOfEnterprisePhase' attribute of elements with the stereotype 'ActualEnterprisePhase'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualEnterprisePhase'.
 * value : Element : A value of the attribute 'operationalArchitectureOfEnterprisePhase'.
 */
pattern
ActualEnterprisePhase_operationalArchitectureOfEnterprisePhase(element : InstanceSpecification, value : Element) {
	find ActualEnterprisePhase(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "operationalArchitectureOfEnterprisePhase", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'resourceArchitectureOfEnterprisePhase' attribute of elements with the stereotype 'ActualEnterprisePhase'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualEnterprisePhase'.
 * value : Element : A value of the attribute 'resourceArchitectureOfEnterprisePhase'.
 */
pattern
ActualEnterprisePhase_resourceArchitectureOfEnterprisePhase(element : InstanceSpecification, value : Element) {
	find ActualEnterprisePhase(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "resourceArchitectureOfEnterprisePhase", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualEnterprisePhase'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualEnterprisePhase'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern
ActualEnterprisePhase_startDate(element : InstanceSpecification, value : Element) {
	find ActualEnterprisePhase(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'statementTask' attribute of elements with the stereotype 'ActualEnterprisePhase'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualEnterprisePhase'.
 * value : Element : A value of the attribute 'statementTask'.
 */
pattern
ActualEnterprisePhase_statementTask(element : InstanceSpecification, value : Element) {
	find ActualEnterprisePhase(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "statementTask", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'vision' attribute of elements with the stereotype 'ActualEnterprisePhase'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualEnterprisePhase'.
 * value : Class : A value of the attribute 'vision'.
 */
pattern
ActualEnterprisePhase_vision(element : InstanceSpecification, value : Class) {
	find ActualEnterprisePhase(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "vision", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Capability' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Capability.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Capability(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Capability");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Capability'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Capability'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Capability_URI(element : Class, valuespec : LiteralString) {
	find Capability(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Capability'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Capability'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Capability_conformsTo(element : Class, value : Element) {
	find Capability(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'Capability'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Capability'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
Capability_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find Capability(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries elements with the stereotype 'EnterpriseGoal' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype EnterpriseGoal.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
EnterpriseGoal(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "EnterpriseGoal");
}

/*
 * Pattern that queries the 'Derived' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * value : Element : A value of the attribute 'Derived'.
 */
pattern EnterpriseGoal_Derived(element : Class, value : Element) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "Derived", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'DerivedFrom' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * value : Element : A value of the attribute 'DerivedFrom'.
 */
pattern EnterpriseGoal_DerivedFrom(element : Class, value : Element) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "DerivedFrom", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'Id' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * valuespec : LiteralString : A value of the attribute 'Id'.
 */
pattern EnterpriseGoal_Id(element : Class, valuespec : LiteralString) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "Id", valuespec);
}

/*
 * Pattern that queries the 'Master' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * value : Element : A value of the attribute 'Master'.
 */
pattern EnterpriseGoal_Master(element : Class, value : Element) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "Master", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'RefinedBy' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * value : NamedElement : A value of the attribute 'RefinedBy'.
 */
pattern EnterpriseGoal_RefinedBy(element : Class, value : NamedElement) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "RefinedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'SatisfiedBy' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * value : NamedElement : A value of the attribute 'SatisfiedBy'.
 */
pattern EnterpriseGoal_SatisfiedBy(element : Class, value : NamedElement) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "SatisfiedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'Text' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * valuespec : LiteralString : A value of the attribute 'Text'.
 */
pattern EnterpriseGoal_Text(element : Class, valuespec : LiteralString) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "Text", valuespec);
}

/*
 * Pattern that queries the 'TracedTo' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * value : NamedElement : A value of the attribute 'TracedTo'.
 */
pattern EnterpriseGoal_TracedTo(element : Class, value : NamedElement) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "TracedTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern EnterpriseGoal_URI(element : Class, valuespec : LiteralString) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'VerifiedBy' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * value : NamedElement : A value of the attribute 'VerifiedBy'.
 */
pattern EnterpriseGoal_VerifiedBy(element : Class, value : NamedElement) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "VerifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'benefits' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * valuespec : LiteralString : A value of the attribute 'benefits'.
 */
pattern EnterpriseGoal_benefits(element : Class, valuespec : LiteralString) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "benefits", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern EnterpriseGoal_conformsTo(element : Class, value : Element) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'enterprisePhase' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * value : InstanceSpecification : A value of the attribute 'enterprisePhase'.
 */
pattern
EnterpriseGoal_enterprisePhase(element : Class, value : InstanceSpecification) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "enterprisePhase", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'EnterprisePhase' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype EnterprisePhase.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
EnterprisePhase(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "EnterprisePhase");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'EnterprisePhase'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterprisePhase'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern EnterprisePhase_URI(element : Class, valuespec : LiteralString) {
	find EnterprisePhase(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'EnterprisePhase'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterprisePhase'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern EnterprisePhase_conformsTo(element : Class, value : Element) {
	find EnterprisePhase(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'EnterprisePhase'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterprisePhase'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
EnterprisePhase_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find EnterprisePhase(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries elements with the stereotype 'EnterpriseVision' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype EnterpriseVision.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
EnterpriseVision(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "EnterpriseVision");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'EnterpriseVision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseVision'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern EnterpriseVision_URI(element : Class, valuespec : LiteralString) {
	find EnterpriseVision(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'EnterpriseVision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseVision'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern EnterpriseVision_conformsTo(element : Class, value : Element) {
	find EnterpriseVision(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'enterprisePhase' attribute of elements with the stereotype 'EnterpriseVision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseVision'.
 * value : InstanceSpecification : A value of the attribute 'enterprisePhase'.
 */
pattern
EnterpriseVision_enterprisePhase(element : Class, value : InstanceSpecification) {
	find EnterpriseVision(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "enterprisePhase", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'EnterpriseVision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseVision'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
EnterpriseVision_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find EnterpriseVision(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'statement' attribute of elements with the stereotype 'EnterpriseVision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseVision'.
 * value : Comment : A value of the attribute 'statement'.
 */
pattern EnterpriseVision_statement(element : Class, value : Comment) {
	find EnterpriseVision(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "statement", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'VisionStatement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Comment' object with the stereotype VisionStatement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
VisionStatement(element : Comment, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "VisionStatement");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'VisionStatement'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'VisionStatement'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern VisionStatement_URI(element : Comment, valuespec : LiteralString) {
	find VisionStatement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'VisionStatement'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'VisionStatement'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
VisionStatement_actualMeasurementSet(element : Comment, value : Element) {
	find VisionStatement(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'VisionStatement'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'VisionStatement'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern VisionStatement_conformsTo(element : Comment, value : Element) {
	find VisionStatement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'VisionStatement'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'VisionStatement'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern VisionStatement_measurementSet(element : Comment, value : Element) {
	find VisionStatement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'WholeLifeEnterprise' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype WholeLifeEnterprise.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
WholeLifeEnterprise(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "WholeLifeEnterprise");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'WholeLifeEnterprise'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeEnterprise'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern WholeLifeEnterprise_URI(element : Class, valuespec : LiteralString) {
	find WholeLifeEnterprise(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'WholeLifeEnterprise'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeEnterprise'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern WholeLifeEnterprise_conformsTo(element : Class, value : Element) {
	find WholeLifeEnterprise(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'WholeLifeEnterprise'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeEnterprise'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern
WholeLifeEnterprise_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find WholeLifeEnterprise(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

// Strategic - Traceability

/*
 * Pattern that queries elements with the stereotype 'Exhibits' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype Exhibits.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Exhibits(element : Abstraction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Exhibits");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Exhibits'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Exhibits'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Exhibits_URI(element : Abstraction, valuespec : LiteralString) {
	find Exhibits(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'Exhibits'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Exhibits'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
Exhibits_actualMeasurementSet(element : Abstraction, value : Element) {
	find Exhibits(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Exhibits'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Exhibits'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Exhibits_conformsTo(element : Abstraction, value : Element) {
	find Exhibits(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'environmentalConditions' attribute of elements with the stereotype 'Exhibits'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Exhibits'.
 * value : Element : A value of the attribute 'environmentalConditions'.
 */
pattern
Exhibits_environmentalConditions(element : Abstraction, value : Element) {
	find Exhibits(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "environmentalConditions", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'Exhibits'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Exhibits'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern Exhibits_measurementSet(element : Abstraction, value : Element) {
	find Exhibits(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'Exhibits'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Exhibits'.
 * value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern Exhibits_sourceContext(element : Abstraction, value : Classifier) {
	find Exhibits(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'Exhibits'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Exhibits'.
 * value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern Exhibits_sourcePropertyPath(element : Abstraction, value : Property) {
	find Exhibits(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'Exhibits'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Exhibits'.
 * value : Classifier : A value of the attribute 'targetContext'.
 */
pattern Exhibits_targetContext(element : Abstraction, value : Classifier) {
	find Exhibits(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'Exhibits'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Exhibits'.
 * value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern Exhibits_targetPropertyPath(element : Abstraction, value : Property) {
	find Exhibits(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'MapsToCapability' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype MapsToCapability.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
MapsToCapability(element : Abstraction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "MapsToCapability");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'MapsToCapability'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'MapsToCapability'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
MapsToCapability_URI(element : Abstraction, valuespec : LiteralString) {
	find MapsToCapability(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'MapsToCapability'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'MapsToCapability'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
MapsToCapability_actualMeasurementSet(element : Abstraction, value : Element) {
	find MapsToCapability(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'MapsToCapability'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'MapsToCapability'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern MapsToCapability_conformsTo(element : Abstraction, value : Element) {
	find MapsToCapability(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'MapsToCapability'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'MapsToCapability'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
MapsToCapability_measurementSet(element : Abstraction, value : Element) {
	find MapsToCapability(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'MapsToCapability'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'MapsToCapability'.
 * value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern
MapsToCapability_sourceContext(element : Abstraction, value : Classifier) {
	find MapsToCapability(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'MapsToCapability'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'MapsToCapability'.
 * value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern
MapsToCapability_sourcePropertyPath(element : Abstraction, value : Property) {
	find MapsToCapability(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'MapsToCapability'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'MapsToCapability'.
 * value : Classifier : A value of the attribute 'targetContext'.
 */
pattern
MapsToCapability_targetContext(element : Abstraction, value : Classifier) {
	find MapsToCapability(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'MapsToCapability'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'MapsToCapability'.
 * value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern
MapsToCapability_targetPropertyPath(element : Abstraction, value : Property) {
	find MapsToCapability(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'OrganizationInEnterprise' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype OrganizationInEnterprise.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
OrganizationInEnterprise(element : Abstraction, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "OrganizationInEnterprise");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OrganizationInEnterprise'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OrganizationInEnterprise'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
OrganizationInEnterprise_URI(element : Abstraction, valuespec : LiteralString) {
	find OrganizationInEnterprise(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'OrganizationInEnterprise'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OrganizationInEnterprise'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
OrganizationInEnterprise_actualMeasurementSet(element : Abstraction, value : Element) {
	find OrganizationInEnterprise(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OrganizationInEnterprise'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OrganizationInEnterprise'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
OrganizationInEnterprise_conformsTo(element : Abstraction, value : Element) {
	find OrganizationInEnterprise(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'OrganizationInEnterprise'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OrganizationInEnterprise'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
OrganizationInEnterprise_measurementSet(element : Abstraction, value : Element) {
	find OrganizationInEnterprise(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'OrganizationInEnterprise'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OrganizationInEnterprise'.
 * value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern
OrganizationInEnterprise_sourceContext(element : Abstraction, value : Classifier) {
	find OrganizationInEnterprise(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'OrganizationInEnterprise'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OrganizationInEnterprise'.
 * value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern
OrganizationInEnterprise_sourcePropertyPath(element : Abstraction, value : Property) {
	find OrganizationInEnterprise(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'OrganizationInEnterprise'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OrganizationInEnterprise'.
 * value : Classifier : A value of the attribute 'targetContext'.
 */
pattern
OrganizationInEnterprise_targetContext(element : Abstraction, value : Classifier) {
	find OrganizationInEnterprise(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'OrganizationInEnterprise'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'OrganizationInEnterprise'.
 * value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern
OrganizationInEnterprise_targetPropertyPath(element : Abstraction, value : Property) {
	find OrganizationInEnterprise(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

// Summary and Overview

/*
 * Pattern that queries elements with the stereotype 'ArchitecturalDescription' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Package' object with the stereotype ArchitecturalDescription.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
ArchitecturalDescription(element : Package, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "ArchitecturalDescription");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern
ArchitecturalDescription_URI(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'actualMeasurementSet' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * value : Element : A value of the attribute 'actualMeasurementSet'.
 */
pattern
ArchitecturalDescription_actualMeasurementSet(element : Package, value : Element) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "actualMeasurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'approvalAuthority' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'approvalAuthority'.
 */
pattern
ArchitecturalDescription_approvalAuthority(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "approvalAuthority", valuespec);
}

/*
 * Pattern that queries the 'architect' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'architect'.
 */
pattern
ArchitecturalDescription_architect(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "architect", valuespec);
}

/*
 * Pattern that queries the 'architectureFramework' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'architectureFramework'.
 */
pattern
ArchitecturalDescription_architectureFramework(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "architectureFramework", valuespec);
}

/*
 * Pattern that queries the 'assumptionAndConstraint' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'assumptionAndConstraint'.
 */
pattern
ArchitecturalDescription_assumptionAndConstraint(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "assumptionAndConstraint", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern
ArchitecturalDescription_conformsTo(element : Package, value : Element) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'creatingOrganization' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'creatingOrganization'.
 */
pattern
ArchitecturalDescription_creatingOrganization(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "creatingOrganization", valuespec);
}

/*
 * Pattern that queries the 'dateCompleted' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'dateCompleted'.
 */
pattern
ArchitecturalDescription_dateCompleted(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "dateCompleted", valuespec);
}

/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern
ArchitecturalDescription_measurementSet(element : Package, value : Element) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'purpose' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'purpose'.
 */
pattern
ArchitecturalDescription_purpose(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "purpose", valuespec);
}

/*
 * Pattern that queries the 'recommendations' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'recommendations'.
 */
pattern
ArchitecturalDescription_recommendations(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "recommendations", valuespec);
}

/*
 * Pattern that queries the 'summaryOfFindings' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'summaryOfFindings'.
 */
pattern
ArchitecturalDescription_summaryOfFindings(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "summaryOfFindings", valuespec);
}

/*
 * Pattern that queries the 'toBe' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralBoolean : A value of the attribute 'toBe'.
 */
pattern
ArchitecturalDescription_toBe(element : Package, valuespec : LiteralBoolean) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "toBe", valuespec);
}

/*
 * Pattern that queries the 'toolsUsed' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'toolsUsed'.
 */
pattern
ArchitecturalDescription_toolsUsed(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "toolsUsed", valuespec);
}

/*
 * Pattern that queries the 'view' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * value : Class : A value of the attribute 'view'.
 */
pattern ArchitecturalDescription_view(element : Package, value : Class) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "view", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'viewPoint' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * value : Class : A value of the attribute 'viewPoint'.
 */
pattern ArchitecturalDescription_viewPoint(element : Package, value : Class) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "viewPoint", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Architecture' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Architecture.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Architecture(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Architecture");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Architecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Architecture'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Architecture_URI(element : Class, valuespec : LiteralString) {
	find Architecture(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Architecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Architecture'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Architecture_conformsTo(element : Class, value : Element) {
	find Architecture(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'desribedBy' attribute of elements with the stereotype 'Architecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Architecture'.
 * value : Package : A value of the attribute 'desribedBy'.
 */
pattern Architecture_desribedBy(element : Class, value : Package) {
	find Architecture(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "desribedBy", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Concern' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Concern.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Concern(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Concern");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Concern'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Concern'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Concern_URI(element : Class, valuespec : LiteralString) {
	find Concern(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Concern'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Concern'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Concern_conformsTo(element : Class, value : Element) {
	find Concern(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'Concern'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Concern'.
 * valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern Concern_isEncapsulated(element : Class, valuespec : LiteralBoolean) {
	find Concern(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

/*
 * Pattern that queries the 'systemConcern' attribute of elements with the stereotype 'Concern'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Concern'.
 * value : Element : A value of the attribute 'systemConcern'.
 */
pattern Concern_systemConcern(element : Class, value : Element) {
	find Concern(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "systemConcern", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Stakeholder' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype Stakeholder.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Stakeholder(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Stakeholder");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Stakeholder'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Stakeholder'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Stakeholder_URI(element : Element, valuespec : LiteralString) {
	find Stakeholder(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Stakeholder'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Stakeholder'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Stakeholder_conformsTo(element : Element, value : Element) {
	find Stakeholder(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'stakeholderConcern' attribute of elements with the stereotype 'Stakeholder'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Stakeholder'.
 * value : Class : A value of the attribute 'stakeholderConcern'.
 */
pattern Stakeholder_stakeholderConcern(element : Element, value : Class) {
	find Stakeholder(element, domainStereotypeInstance);
	find
	slotValue(domainStereotypeInstance, "stakeholderConcern", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'UAFElement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype UAFElement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
UAFElement(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "UAFElement");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'UAFElement'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'UAFElement'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern UAFElement_URI(element : Element, valuespec : LiteralString) {
	find UAFElement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'UAFElement'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'UAFElement'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern UAFElement_conformsTo(element : Element, value : Element) {
	find UAFElement(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'View' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype View.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
View(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "View");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'View'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'View'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern View_URI(element : Class, valuespec : LiteralString) {
	find View(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'View'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'View'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern View_conformsTo(element : Class, value : Element) {
	find View(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'stakeholder' attribute of elements with the stereotype 'View'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'View'.
 * value : Element : A value of the attribute 'stakeholder'.
 */
pattern View_stakeholder(element : Class, value : Element) {
	find View(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "stakeholder", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'viewPoint' attribute of elements with the stereotype 'View'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'View'.
 * value : Element : A value of the attribute 'viewPoint'.
 */
pattern View_viewPoint_1(element : Class, value : Element) {
	find View(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "viewPoint", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'viewpoint' attribute of elements with the stereotype 'View'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'View'.
 * value : Class : A value of the attribute 'viewpoint'.
 */
pattern View_viewpoint_2(element : Class, value : Class) {
	find View(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "viewpoint", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries elements with the stereotype 'Viewpoint' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Viewpoint.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern
Viewpoint(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find
	stereotypedElement(element, domainStereotypeInstance, "UAF", "Viewpoint");
}

/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Viewpoint'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Viewpoint_URI(element : Class, valuespec : LiteralString) {
	find Viewpoint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "URI", valuespec);
}

/*
 * Pattern that queries the 'concern' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Viewpoint'.
 * value : Class : A value of the attribute 'concern'.
 */
pattern Viewpoint_concern(element : Class, value : Class) {
	find Viewpoint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "concern", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'concernList' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Viewpoint'.
 * value : Comment : A value of the attribute 'concernList'.
 */
pattern Viewpoint_concernList(element : Class, value : Comment) {
	find Viewpoint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "concernList", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Viewpoint'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Viewpoint_conformsTo(element : Class, value : Element) {
	find Viewpoint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'language' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Viewpoint'.
 * valuespec : LiteralString : A value of the attribute 'language'.
 */
pattern Viewpoint_language(element : Class, valuespec : LiteralString) {
	find Viewpoint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "language", valuespec);
}

/*
 * Pattern that queries the 'languages' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Viewpoint'.
 * valuespec : LiteralString : A value of the attribute 'languages'.
 */
pattern Viewpoint_languages(element : Class, valuespec : LiteralString) {
	find Viewpoint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "languages", valuespec);
}

/*
 * Pattern that queries the 'method' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Viewpoint'.
 * value : Behavior : A value of the attribute 'method'.
 */
pattern Viewpoint_method(element : Class, value : Behavior) {
	find Viewpoint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "method", valuespec);
	ElementValue.element(valuespec, value);
}

/*
 * Pattern that queries the 'methods' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Viewpoint'.
 * valuespec : LiteralString : A value of the attribute 'methods'.
 */
pattern Viewpoint_methods(element : Class, valuespec : LiteralString) {
	find Viewpoint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "methods", valuespec);
}

/*
 * Pattern that queries the 'presentation' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Viewpoint'.
 * valuespec : LiteralString : A value of the attribute 'presentation'.
 */
pattern Viewpoint_presentation(element : Class, valuespec : LiteralString) {
	find Viewpoint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "presentation", valuespec);
}

/*
 * Pattern that queries the 'purpose' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Viewpoint'.
 * valuespec : LiteralString : A value of the attribute 'purpose'.
 */
pattern Viewpoint_purpose(element : Class, valuespec : LiteralString) {
	find Viewpoint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "purpose", valuespec);
}

/*
 * Pattern that queries the 'stakeholder' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Viewpoint'.
 * value : Element : A value of the attribute 'stakeholder'.
 */
pattern Viewpoint_stakeholder(element : Class, value : Element) {
	find Viewpoint(element, domainStereotypeInstance);
	find slotValue(domainStereotypeInstance, "stakeholder", valuespec);
	ElementValue.element(valuespec, value);
}
