package com.incquerylabs.magicdraw.benchmark.queries.library.updm

import "http://www.nomagic.com/magicdraw/UML/2.5.1"

// Core - AcquisitionElements - Milestone

/*
 * Pattern that queries elements with the stereotype 'ActualProject' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualProject.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ActualProject(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ActualProject");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActualProject_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualProject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ActualProject_actualPropertySet(element : InstanceSpecification, value : Element) {
	find ActualProject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActualProject_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualProject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ActualProject_endBoundaryType(element : InstanceSpecification, value : Element) {
	find ActualProject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern ActualProject_endDate(element : InstanceSpecification, value : Element) {
	find ActualProject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'ownedMilestones' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * value : Element : A value of the attribute 'ownedMilestones'.
 */
pattern ActualProject_ownedMilestones(element : InstanceSpecification, value : Element) {
	find ActualProject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "ownedMilestones", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'part' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * value : InstanceSpecification : A value of the attribute 'part'.
 */
pattern ActualProject_part(element : InstanceSpecification, value : InstanceSpecification) {
	find ActualProject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "part", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ActualProject_propertySet(element : InstanceSpecification, value : Element) {
	find ActualProject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ActualProject_startBoundaryType(element : InstanceSpecification, value : Element) {
	find ActualProject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern ActualProject_startDate(element : InstanceSpecification, value : Element) {
	find ActualProject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'whole' attribute of elements with the stereotype 'ActualProject'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProject'.
 * value : InstanceSpecification : A value of the attribute 'whole'.
 */
pattern ActualProject_whole(element : InstanceSpecification, value : InstanceSpecification) {
	find ActualProject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "whole", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ActualProjectMilestoneRole' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Slot' object with the stereotype ActualProjectMilestoneRole.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ActualProjectMilestoneRole(element : Slot, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ActualProjectMilestoneRole");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProjectMilestoneRole'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActualProjectMilestoneRole_URI(element : Slot, valuespec : LiteralString) {
	find ActualProjectMilestoneRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ActualProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProjectMilestoneRole'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ActualProjectMilestoneRole_actualPropertySet(element : Slot, value : Element) {
	find ActualProjectMilestoneRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProjectMilestoneRole'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActualProjectMilestoneRole_conformsTo(element : Slot, value : Element) {
	find ActualProjectMilestoneRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ActualProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProjectMilestoneRole'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ActualProjectMilestoneRole_endBoundaryType(element : Slot, value : Element) {
	find ActualProjectMilestoneRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ActualProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProjectMilestoneRole'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ActualProjectMilestoneRole_propertySet(element : Slot, value : Element) {
	find ActualProjectMilestoneRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ActualProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProjectMilestoneRole'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ActualProjectMilestoneRole_startBoundaryType(element : Slot, value : Element) {
	find ActualProjectMilestoneRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'OrganizationalProjectRelationship' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype OrganizationalProjectRelationship.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern OrganizationalProjectRelationship(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "OrganizationalProjectRelationship");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OrganizationalProjectRelationship'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'OrganizationalProjectRelationship'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OrganizationalProjectRelationship_URI(element : Dependency, valuespec : LiteralString) {
	find OrganizationalProjectRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'OrganizationalProjectRelationship'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'OrganizationalProjectRelationship'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern OrganizationalProjectRelationship_actualPropertySet(element : Dependency, value : Element) {
	find OrganizationalProjectRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OrganizationalProjectRelationship'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'OrganizationalProjectRelationship'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OrganizationalProjectRelationship_conformsTo(element : Dependency, value : Element) {
	find OrganizationalProjectRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'OrganizationalProjectRelationship'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'OrganizationalProjectRelationship'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern OrganizationalProjectRelationship_endBoundaryType(element : Dependency, value : Element) {
	find OrganizationalProjectRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'OrganizationalProjectRelationship'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'OrganizationalProjectRelationship'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern OrganizationalProjectRelationship_endDate(element : Dependency, value : Element) {
	find OrganizationalProjectRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'OrganizationalProjectRelationship'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'OrganizationalProjectRelationship'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern OrganizationalProjectRelationship_propertySet(element : Dependency, value : Element) {
	find OrganizationalProjectRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'OrganizationalProjectRelationship'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'OrganizationalProjectRelationship'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern OrganizationalProjectRelationship_startBoundaryType(element : Dependency, value : Element) {
	find OrganizationalProjectRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'OrganizationalProjectRelationship'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'OrganizationalProjectRelationship'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern OrganizationalProjectRelationship_startDate(element : Dependency, value : Element) {
	find OrganizationalProjectRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ProjectMilestoneRole' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ProjectMilestoneRole.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ProjectMilestoneRole(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ProjectMilestoneRole");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectMilestoneRole'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProjectMilestoneRole_URI(element : Property, valuespec : LiteralString) {
	find ProjectMilestoneRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectMilestoneRole'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ProjectMilestoneRole_actualPropertySet(element : Property, value : Element) {
	find ProjectMilestoneRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectMilestoneRole'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProjectMilestoneRole_conformsTo(element : Property, value : Element) {
	find ProjectMilestoneRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectMilestoneRole'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ProjectMilestoneRole_endBoundaryType(element : Property, value : Element) {
	find ProjectMilestoneRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectMilestoneRole'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ProjectMilestoneRole_propertySet(element : Property, value : Element) {
	find ProjectMilestoneRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ProjectMilestoneRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectMilestoneRole'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ProjectMilestoneRole_startBoundaryType(element : Property, value : Element) {
	find ProjectMilestoneRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ProjectType' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype ProjectType.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ProjectType(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ProjectType");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProjectType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProjectType'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProjectType_URI(element : Class, valuespec : LiteralString) {
	find ProjectType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ProjectType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProjectType'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ProjectType_actualPropertySet(element : Class, value : Element) {
	find ProjectType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProjectType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProjectType'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProjectType_conformsTo(element : Class, value : Element) {
	find ProjectType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ProjectType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProjectType'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ProjectType_endBoundaryType(element : Class, value : Element) {
	find ProjectType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ProjectType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProjectType'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ProjectType_propertySet(element : Class, value : Element) {
	find ProjectType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ProjectType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProjectType'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ProjectType_startBoundaryType(element : Class, value : Element) {
	find ProjectType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - AllElements

/*
 * Pattern that queries elements with the stereotype 'Exchange' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype Exchange.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Exchange(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Exchange");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Exchange'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Exchange'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Exchange_URI(element : Element, valuespec : LiteralString) {
	find Exchange(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Exchange'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Exchange'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Exchange_actualPropertySet(element : Element, value : Element) {
	find Exchange(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Exchange'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Exchange'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Exchange_conformsTo(element : Element, value : Element) {
	find Exchange(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Exchange'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Exchange'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Exchange_endBoundaryType(element : Element, value : Element) {
	find Exchange(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Exchange'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Exchange'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Exchange_propertySet(element : Element, value : Element) {
	find Exchange(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Exchange'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Exchange'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Exchange_startBoundaryType(element : Element, value : Element) {
	find Exchange(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'UPDMElement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype UPDMElement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern UPDMElement(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "UPDMElement");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'UPDMElement'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'UPDMElement'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern UPDMElement_URI(element : Element, valuespec : LiteralString) {
	find UPDMElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'UPDMElement'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'UPDMElement'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern UPDMElement_actualPropertySet(element : Element, value : Element) {
	find UPDMElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'UPDMElement'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'UPDMElement'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern UPDMElement_conformsTo(element : Element, value : Element) {
	find UPDMElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'UPDMElement'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'UPDMElement'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern UPDMElement_endBoundaryType(element : Element, value : Element) {
	find UPDMElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'UPDMElement'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'UPDMElement'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern UPDMElement_propertySet(element : Element, value : Element) {
	find UPDMElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'UPDMElement'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'UPDMElement'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern UPDMElement_startBoundaryType(element : Element, value : Element) {
	find UPDMElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - AllElements - Behavior

/*
 * Pattern that queries elements with the stereotype 'Activity' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype Activity.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Activity(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Activity");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Activity'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Activity'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Activity_URI(element : Element, valuespec : LiteralString) {
	find Activity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'activityPerformableUnderCondition' attribute of elements with the stereotype 'Activity'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Activity'.
 * value : Element : A value of the attribute 'activityPerformableUnderCondition'.
 */
pattern Activity_activityPerformableUnderCondition(element : Element, value : Element) {
	find Activity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "activityPerformableUnderCondition", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Activity'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Activity'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Activity_actualPropertySet(element : Element, value : Element) {
	find Activity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Activity'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Activity'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Activity_conformsTo(element : Element, value : Element) {
	find Activity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Activity'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Activity'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Activity_endBoundaryType(element : Element, value : Element) {
	find Activity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Activity'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Activity'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Activity_propertySet(element : Element, value : Element) {
	find Activity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Activity'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Activity'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Activity_startBoundaryType(element : Element, value : Element) {
	find Activity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'CapableElement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype CapableElement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern CapableElement(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "CapableElement");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'CapableElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapableElement'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern CapableElement_URI(element : Class, valuespec : LiteralString) {
	find CapableElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'CapableElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapableElement'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern CapableElement_actualPropertySet(element : Class, value : Element) {
	find CapableElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'CapableElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapableElement'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern CapableElement_conformsTo(element : Class, value : Element) {
	find CapableElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'CapableElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapableElement'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern CapableElement_endBoundaryType(element : Class, value : Element) {
	find CapableElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'CapableElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapableElement'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern CapableElement_propertySet(element : Class, value : Element) {
	find CapableElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'CapableElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapableElement'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern CapableElement_startBoundaryType(element : Class, value : Element) {
	find CapableElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Implements' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype Implements.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Implements(element : Abstraction, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Implements");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Implements'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Implements'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Implements_URI(element : Abstraction, valuespec : LiteralString) {
	find Implements(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Implements'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Implements'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Implements_actualPropertySet(element : Abstraction, value : Element) {
	find Implements(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Implements'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Implements'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Implements_conformsTo(element : Abstraction, value : Element) {
	find Implements(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Implements'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Implements'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Implements_endBoundaryType(element : Abstraction, value : Element) {
	find Implements(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Implements'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Implements'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Implements_propertySet(element : Abstraction, value : Element) {
	find Implements(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Implements'.
 *
 * Parameters:
 * element: 'Abstraction' object with the stereotype 'Implements'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Implements_startBoundaryType(element : Abstraction, value : Element) {
	find Implements(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'IsCapableOfPerforming' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype IsCapableOfPerforming.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern IsCapableOfPerforming(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "IsCapableOfPerforming");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'IsCapableOfPerforming'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'IsCapableOfPerforming'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern IsCapableOfPerforming_URI(element : Dependency, valuespec : LiteralString) {
	find IsCapableOfPerforming(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'IsCapableOfPerforming'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'IsCapableOfPerforming'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern IsCapableOfPerforming_actualPropertySet(element : Dependency, value : Element) {
	find IsCapableOfPerforming(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'IsCapableOfPerforming'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'IsCapableOfPerforming'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern IsCapableOfPerforming_conformsTo(element : Dependency, value : Element) {
	find IsCapableOfPerforming(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'IsCapableOfPerforming'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'IsCapableOfPerforming'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern IsCapableOfPerforming_endBoundaryType(element : Dependency, value : Element) {
	find IsCapableOfPerforming(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'IsCapableOfPerforming'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'IsCapableOfPerforming'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern IsCapableOfPerforming_propertySet(element : Dependency, value : Element) {
	find IsCapableOfPerforming(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'IsCapableOfPerforming'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'IsCapableOfPerforming'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern IsCapableOfPerforming_startBoundaryType(element : Dependency, value : Element) {
	find IsCapableOfPerforming(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - AllElements - Environment

/*
 * Pattern that queries elements with the stereotype 'ActualLocation' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualLocation.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ActualLocation(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ActualLocation");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualLocation'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualLocation'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActualLocation_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualLocation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ActualLocation'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualLocation'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ActualLocation_actualPropertySet(element : InstanceSpecification, value : Element) {
	find ActualLocation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'address' attribute of elements with the stereotype 'ActualLocation'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualLocation'.
 * valuespec : LiteralString : A value of the attribute 'address'.
 */
pattern ActualLocation_address(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualLocation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "address", valuespec);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualLocation'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualLocation'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActualLocation_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualLocation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'customKind' attribute of elements with the stereotype 'ActualLocation'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualLocation'.
 * valuespec : LiteralString : A value of the attribute 'customKind'.
 */
pattern ActualLocation_customKind(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualLocation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "customKind", valuespec);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ActualLocation'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualLocation'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ActualLocation_endBoundaryType(element : InstanceSpecification, value : Element) {
	find ActualLocation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'locationKind' attribute of elements with the stereotype 'ActualLocation'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualLocation'.
 * value : EnumerationLiteral : A value of the attribute 'locationKind'.
 */
pattern ActualLocation_locationKind(element : InstanceSpecification, value : EnumerationLiteral) {
	find ActualLocation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "locationKind", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'locationNamedByAddress' attribute of elements with the stereotype 'ActualLocation'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualLocation'.
 * valuespec : LiteralBoolean : A value of the attribute 'locationNamedByAddress'.
 */
pattern ActualLocation_locationNamedByAddress(element : InstanceSpecification, valuespec : LiteralBoolean) {
	find ActualLocation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "locationNamedByAddress", valuespec);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ActualLocation'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualLocation'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ActualLocation_propertySet(element : InstanceSpecification, value : Element) {
	find ActualLocation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ActualLocation'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualLocation'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ActualLocation_startBoundaryType(element : InstanceSpecification, value : Element) {
	find ActualLocation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ConditionType' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype ConditionType.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ConditionType(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ConditionType");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ConditionType'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ConditionType'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ConditionType_URI(element : Element, valuespec : LiteralString) {
	find ConditionType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ConditionType'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ConditionType'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ConditionType_actualPropertySet(element : Element, value : Element) {
	find ConditionType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ConditionType'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ConditionType'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ConditionType_conformsTo(element : Element, value : Element) {
	find ConditionType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ConditionType'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ConditionType'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ConditionType_endBoundaryType(element : Element, value : Element) {
	find ConditionType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ConditionType'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ConditionType'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ConditionType_propertySet(element : Element, value : Element) {
	find ConditionType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ConditionType'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ConditionType'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ConditionType_startBoundaryType(element : Element, value : Element) {
	find ConditionType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Environment' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'DataType' object with the stereotype Environment.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Environment(element : DataType, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Environment");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Environment'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Environment'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Environment_URI(element : DataType, valuespec : LiteralString) {
	find Environment(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Environment'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Environment'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Environment_actualPropertySet(element : DataType, value : Element) {
	find Environment(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'Environment'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Environment'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern Environment_appliesTo(element : DataType, value : Element) {
	find Environment(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Environment'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Environment'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Environment_conformsTo(element : DataType, value : Element) {
	find Environment(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Environment'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Environment'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Environment_endBoundaryType(element : DataType, value : Element) {
	find Environment(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Environment'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Environment'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Environment_propertySet(element : DataType, value : Element) {
	find Environment(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Environment'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Environment'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Environment_startBoundaryType(element : DataType, value : Element) {
	find Environment(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'EnvironmentProperty' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype EnvironmentProperty.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern EnvironmentProperty(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "EnvironmentProperty");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'EnvironmentProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'EnvironmentProperty'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern EnvironmentProperty_URI(element : Property, valuespec : LiteralString) {
	find EnvironmentProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'EnvironmentProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'EnvironmentProperty'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern EnvironmentProperty_actualPropertySet(element : Property, value : Element) {
	find EnvironmentProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'EnvironmentProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'EnvironmentProperty'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern EnvironmentProperty_conformsTo(element : Property, value : Element) {
	find EnvironmentProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'EnvironmentProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'EnvironmentProperty'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern EnvironmentProperty_endBoundaryType(element : Property, value : Element) {
	find EnvironmentProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'maxValue' attribute of elements with the stereotype 'EnvironmentProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'EnvironmentProperty'.
 * valuespec : LiteralString : A value of the attribute 'maxValue'.
 */
pattern EnvironmentProperty_maxValue(element : Property, valuespec : LiteralString) {
	find EnvironmentProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "maxValue", valuespec);
}
/*
 * Pattern that queries the 'minValue' attribute of elements with the stereotype 'EnvironmentProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'EnvironmentProperty'.
 * valuespec : LiteralString : A value of the attribute 'minValue'.
 */
pattern EnvironmentProperty_minValue(element : Property, valuespec : LiteralString) {
	find EnvironmentProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "minValue", valuespec);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'EnvironmentProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'EnvironmentProperty'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern EnvironmentProperty_propertySet(element : Property, value : Element) {
	find EnvironmentProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'EnvironmentProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'EnvironmentProperty'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern EnvironmentProperty_startBoundaryType(element : Property, value : Element) {
	find EnvironmentProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'LocationHolder' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype LocationHolder.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern LocationHolder(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "LocationHolder");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'LocationHolder'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'LocationHolder'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern LocationHolder_URI(element : Element, valuespec : LiteralString) {
	find LocationHolder(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'LocationHolder'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'LocationHolder'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern LocationHolder_actualPropertySet(element : Element, value : Element) {
	find LocationHolder(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'LocationHolder'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'LocationHolder'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern LocationHolder_conformsTo(element : Element, value : Element) {
	find LocationHolder(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'LocationHolder'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'LocationHolder'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern LocationHolder_endBoundaryType(element : Element, value : Element) {
	find LocationHolder(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'LocationHolder'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'LocationHolder'.
 * value : InstanceSpecification : A value of the attribute 'physicalLocation'.
 */
pattern LocationHolder_physicalLocation(element : Element, value : InstanceSpecification) {
	find LocationHolder(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'LocationHolder'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'LocationHolder'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern LocationHolder_propertySet(element : Element, value : Element) {
	find LocationHolder(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'LocationHolder'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'LocationHolder'.
 * value : DataType : A value of the attribute 'requiredEnvironment'.
 */
pattern LocationHolder_requiredEnvironment(element : Element, value : DataType) {
	find LocationHolder(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'LocationHolder'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'LocationHolder'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern LocationHolder_startBoundaryType(element : Element, value : Element) {
	find LocationHolder(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'LocationType' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'DataType' object with the stereotype LocationType.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern LocationType(element : DataType, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "LocationType");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'LocationType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'LocationType'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern LocationType_URI(element : DataType, valuespec : LiteralString) {
	find LocationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'LocationType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'LocationType'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern LocationType_actualPropertySet(element : DataType, value : Element) {
	find LocationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'LocationType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'LocationType'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern LocationType_conformsTo(element : DataType, value : Element) {
	find LocationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'customKind' attribute of elements with the stereotype 'LocationType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'LocationType'.
 * valuespec : LiteralString : A value of the attribute 'customKind'.
 */
pattern LocationType_customKind(element : DataType, valuespec : LiteralString) {
	find LocationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "customKind", valuespec);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'LocationType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'LocationType'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern LocationType_endBoundaryType(element : DataType, value : Element) {
	find LocationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'locationTypeKind' attribute of elements with the stereotype 'LocationType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'LocationType'.
 * value : EnumerationLiteral : A value of the attribute 'locationTypeKind'.
 */
pattern LocationType_locationTypeKind(element : DataType, value : EnumerationLiteral) {
	find LocationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "locationTypeKind", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'LocationType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'LocationType'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern LocationType_propertySet(element : DataType, value : Element) {
	find LocationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'LocationType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'LocationType'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern LocationType_startBoundaryType(element : DataType, value : Element) {
	find LocationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - AllElements - Measurements

/*
 * Pattern that queries elements with the stereotype 'ActualMeasurement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Slot' object with the stereotype ActualMeasurement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ActualMeasurement(element : Slot, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ActualMeasurement");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualMeasurement'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualMeasurement'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActualMeasurement_URI(element : Slot, valuespec : LiteralString) {
	find ActualMeasurement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ActualMeasurement'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualMeasurement'.
 * value : InstanceSpecification : A value of the attribute 'actualPropertySet'.
 */
pattern ActualMeasurement_actualPropertySet(element : Slot, value : InstanceSpecification) {
	find ActualMeasurement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualMeasurement'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualMeasurement'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActualMeasurement_conformsTo(element : Slot, value : Element) {
	find ActualMeasurement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ActualMeasurement'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualMeasurement'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ActualMeasurement_endBoundaryType(element : Slot, value : Element) {
	find ActualMeasurement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualMeasurement'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualMeasurement'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern ActualMeasurement_endDate(element : Slot, value : Element) {
	find ActualMeasurement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'intention' attribute of elements with the stereotype 'ActualMeasurement'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualMeasurement'.
 * value : EnumerationLiteral : A value of the attribute 'intention'.
 */
pattern ActualMeasurement_intention(element : Slot, value : EnumerationLiteral) {
	find ActualMeasurement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "intention", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ActualMeasurement'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualMeasurement'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ActualMeasurement_propertySet(element : Slot, value : Element) {
	find ActualMeasurement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ActualMeasurement'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualMeasurement'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ActualMeasurement_startBoundaryType(element : Slot, value : Element) {
	find ActualMeasurement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualMeasurement'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualMeasurement'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern ActualMeasurement_startDate(element : Slot, value : Element) {
	find ActualMeasurement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ActualProperty' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Slot' object with the stereotype ActualProperty.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ActualProperty(element : Slot, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ActualProperty");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualProperty'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProperty'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActualProperty_URI(element : Slot, valuespec : LiteralString) {
	find ActualProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ActualProperty'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProperty'.
 * value : InstanceSpecification : A value of the attribute 'actualPropertySet'.
 */
pattern ActualProperty_actualPropertySet(element : Slot, value : InstanceSpecification) {
	find ActualProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualProperty'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProperty'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActualProperty_conformsTo(element : Slot, value : Element) {
	find ActualProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ActualProperty'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProperty'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ActualProperty_endBoundaryType(element : Slot, value : Element) {
	find ActualProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ActualProperty'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProperty'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern ActualProperty_endDate(element : Slot, value : Element) {
	find ActualProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'intention' attribute of elements with the stereotype 'ActualProperty'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProperty'.
 * value : EnumerationLiteral : A value of the attribute 'intention'.
 */
pattern ActualProperty_intention(element : Slot, value : EnumerationLiteral) {
	find ActualProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "intention", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ActualProperty'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProperty'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ActualProperty_propertySet(element : Slot, value : Element) {
	find ActualProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ActualProperty'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProperty'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ActualProperty_startBoundaryType(element : Slot, value : Element) {
	find ActualProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ActualProperty'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualProperty'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern ActualProperty_startDate(element : Slot, value : Element) {
	find ActualProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ActualPropertySet' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualPropertySet.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ActualPropertySet(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ActualPropertySet");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualPropertySet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPropertySet'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActualPropertySet_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualPropertySet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ActualPropertySet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPropertySet'.
 * value : InstanceSpecification : A value of the attribute 'actualPropertySet'.
 */
pattern ActualPropertySet_actualPropertySet(element : InstanceSpecification, value : InstanceSpecification) {
	find ActualPropertySet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'ActualPropertySet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPropertySet'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern ActualPropertySet_appliesTo(element : InstanceSpecification, value : Element) {
	find ActualPropertySet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualPropertySet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPropertySet'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActualPropertySet_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualPropertySet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ActualPropertySet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPropertySet'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ActualPropertySet_endBoundaryType(element : InstanceSpecification, value : Element) {
	find ActualPropertySet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ActualPropertySet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPropertySet'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ActualPropertySet_propertySet(element : InstanceSpecification, value : Element) {
	find ActualPropertySet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ActualPropertySet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPropertySet'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ActualPropertySet_startBoundaryType(element : InstanceSpecification, value : Element) {
	find ActualPropertySet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Measurement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype Measurement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Measurement(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Measurement");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Measurement'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Measurement'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Measurement_URI(element : Property, valuespec : LiteralString) {
	find Measurement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Measurement'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Measurement'.
 * value : InstanceSpecification : A value of the attribute 'actualPropertySet'.
 */
pattern Measurement_actualPropertySet(element : Property, value : InstanceSpecification) {
	find Measurement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Measurement'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Measurement'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Measurement_conformsTo(element : Property, value : Element) {
	find Measurement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Measurement'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Measurement'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Measurement_endBoundaryType(element : Property, value : Element) {
	find Measurement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'maxValue' attribute of elements with the stereotype 'Measurement'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Measurement'.
 * valuespec : LiteralString : A value of the attribute 'maxValue'.
 */
pattern Measurement_maxValue(element : Property, valuespec : LiteralString) {
	find Measurement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "maxValue", valuespec);
}
/*
 * Pattern that queries the 'minValue' attribute of elements with the stereotype 'Measurement'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Measurement'.
 * valuespec : LiteralString : A value of the attribute 'minValue'.
 */
pattern Measurement_minValue(element : Property, valuespec : LiteralString) {
	find Measurement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "minValue", valuespec);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Measurement'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Measurement'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Measurement_propertySet(element : Property, value : Element) {
	find Measurement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Measurement'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Measurement'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Measurement_startBoundaryType(element : Property, value : Element) {
	find Measurement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'MeasurementSet' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'DataType' object with the stereotype MeasurementSet.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern MeasurementSet(element : DataType, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "MeasurementSet");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'MeasurementSet'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'MeasurementSet'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern MeasurementSet_URI(element : DataType, valuespec : LiteralString) {
	find MeasurementSet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'MeasurementSet'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'MeasurementSet'.
 * value : InstanceSpecification : A value of the attribute 'actualPropertySet'.
 */
pattern MeasurementSet_actualPropertySet(element : DataType, value : InstanceSpecification) {
	find MeasurementSet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'MeasurementSet'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'MeasurementSet'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern MeasurementSet_appliesTo(element : DataType, value : Element) {
	find MeasurementSet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'MeasurementSet'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'MeasurementSet'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern MeasurementSet_conformsTo(element : DataType, value : Element) {
	find MeasurementSet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'MeasurementSet'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'MeasurementSet'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern MeasurementSet_endBoundaryType(element : DataType, value : Element) {
	find MeasurementSet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'MeasurementSet'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'MeasurementSet'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern MeasurementSet_propertySet(element : DataType, value : Element) {
	find MeasurementSet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'MeasurementSet'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'MeasurementSet'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern MeasurementSet_startBoundaryType(element : DataType, value : Element) {
	find MeasurementSet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Property' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype Property.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Property(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Property");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Property'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Property'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Property_URI(element : Property, valuespec : LiteralString) {
	find Property(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Property'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Property'.
 * value : InstanceSpecification : A value of the attribute 'actualPropertySet'.
 */
pattern Property_actualPropertySet(element : Property, value : InstanceSpecification) {
	find Property(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Property'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Property'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Property_conformsTo(element : Property, value : Element) {
	find Property(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Property'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Property'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Property_endBoundaryType(element : Property, value : Element) {
	find Property(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'maxValue' attribute of elements with the stereotype 'Property'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Property'.
 * valuespec : LiteralString : A value of the attribute 'maxValue'.
 */
pattern Property_maxValue(element : Property, valuespec : LiteralString) {
	find Property(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "maxValue", valuespec);
}
/*
 * Pattern that queries the 'minValue' attribute of elements with the stereotype 'Property'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Property'.
 * valuespec : LiteralString : A value of the attribute 'minValue'.
 */
pattern Property_minValue(element : Property, valuespec : LiteralString) {
	find Property(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "minValue", valuespec);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Property'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Property'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Property_propertySet(element : Property, value : Element) {
	find Property(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Property'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'Property'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Property_startBoundaryType(element : Property, value : Element) {
	find Property(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'PropertySet' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype PropertySet.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern PropertySet(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "PropertySet");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'PropertySet'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'PropertySet'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern PropertySet_URI(element : Element, valuespec : LiteralString) {
	find PropertySet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'PropertySet'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'PropertySet'.
 * value : InstanceSpecification : A value of the attribute 'actualPropertySet'.
 */
pattern PropertySet_actualPropertySet(element : Element, value : InstanceSpecification) {
	find PropertySet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'PropertySet'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'PropertySet'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern PropertySet_appliesTo(element : Element, value : Element) {
	find PropertySet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'PropertySet'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'PropertySet'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern PropertySet_conformsTo(element : Element, value : Element) {
	find PropertySet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'PropertySet'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'PropertySet'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern PropertySet_endBoundaryType(element : Element, value : Element) {
	find PropertySet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'PropertySet'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'PropertySet'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern PropertySet_propertySet(element : Element, value : Element) {
	find PropertySet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'PropertySet'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'PropertySet'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern PropertySet_startBoundaryType(element : Element, value : Element) {
	find PropertySet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - AllElements - Structure

/*
 * Pattern that queries elements with the stereotype 'ExchangeElement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype ExchangeElement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ExchangeElement(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ExchangeElement");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ExchangeElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExchangeElement'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ExchangeElement_URI(element : Class, valuespec : LiteralString) {
	find ExchangeElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'ExchangeElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExchangeElement'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern ExchangeElement_actsUpon(element : Class, value : Element) {
	find ExchangeElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ExchangeElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExchangeElement'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ExchangeElement_actualPropertySet(element : Class, value : Element) {
	find ExchangeElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'ExchangeElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExchangeElement'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern ExchangeElement_affectedFunctions(element : Class, value : Element) {
	find ExchangeElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'ExchangeElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExchangeElement'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern ExchangeElement_appliesTo(element : Class, value : Element) {
	find ExchangeElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ExchangeElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExchangeElement'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ExchangeElement_conformsTo(element : Class, value : Element) {
	find ExchangeElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'definedBy' attribute of elements with the stereotype 'ExchangeElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExchangeElement'.
 * value : Element : A value of the attribute 'definedBy'.
 */
pattern ExchangeElement_definedBy(element : Class, value : Element) {
	find ExchangeElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "definedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ExchangeElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExchangeElement'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ExchangeElement_endBoundaryType(element : Class, value : Element) {
	find ExchangeElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'exchangeElementKind' attribute of elements with the stereotype 'ExchangeElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExchangeElement'.
 * value : EnumerationLiteral : A value of the attribute 'exchangeElementKind'.
 */
pattern ExchangeElement_exchangeElementKind(element : Class, value : EnumerationLiteral) {
	find ExchangeElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "exchangeElementKind", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'ExchangeElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExchangeElement'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern ExchangeElement_physicalLocation(element : Class, value : Element) {
	find ExchangeElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ExchangeElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExchangeElement'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ExchangeElement_propertySet(element : Class, value : Element) {
	find ExchangeElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'ExchangeElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExchangeElement'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern ExchangeElement_requiredEnvironment(element : Class, value : Element) {
	find ExchangeElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ExchangeElement'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExchangeElement'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ExchangeElement_startBoundaryType(element : Class, value : Element) {
	find ExchangeElement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Participant' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Participant.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Participant(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Participant");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Participant'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Participant'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Participant_URI(element : Class, valuespec : LiteralString) {
	find Participant(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'Participant'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Participant'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern Participant_actsUpon(element : Class, value : Element) {
	find Participant(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Participant'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Participant'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Participant_actualPropertySet(element : Class, value : Element) {
	find Participant(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'Participant'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Participant'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern Participant_appliesTo(element : Class, value : Element) {
	find Participant(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Participant'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Participant'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Participant_conformsTo(element : Class, value : Element) {
	find Participant(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Participant'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Participant'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Participant_endBoundaryType(element : Class, value : Element) {
	find Participant(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'Participant'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Participant'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern Participant_physicalLocation(element : Class, value : Element) {
	find Participant(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Participant'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Participant'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Participant_propertySet(element : Class, value : Element) {
	find Participant(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'Participant'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Participant'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern Participant_requiredEnvironment(element : Class, value : Element) {
	find Participant(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Participant'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Participant'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Participant_startBoundaryType(element : Class, value : Element) {
	find Participant(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Resource' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype Resource.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Resource(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Resource");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Resource'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Resource'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Resource_URI(element : Element, valuespec : LiteralString) {
	find Resource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Resource'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Resource'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Resource_actualPropertySet(element : Element, value : Element) {
	find Resource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'Resource'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Resource'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern Resource_appliesTo(element : Element, value : Element) {
	find Resource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Resource'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Resource'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Resource_conformsTo(element : Element, value : Element) {
	find Resource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Resource'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Resource'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Resource_endBoundaryType(element : Element, value : Element) {
	find Resource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'Resource'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Resource'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern Resource_physicalLocation(element : Element, value : Element) {
	find Resource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Resource'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Resource'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Resource_propertySet(element : Element, value : Element) {
	find Resource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'Resource'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Resource'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern Resource_requiredEnvironment(element : Element, value : Element) {
	find Resource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Resource'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Resource'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Resource_startBoundaryType(element : Element, value : Element) {
	find Resource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Rule' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype Rule.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Rule(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Rule");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Rule'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Rule'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Rule_URI(element : Element, valuespec : LiteralString) {
	find Rule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Rule'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Rule'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Rule_actualPropertySet(element : Element, value : Element) {
	find Rule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Rule'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Rule'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Rule_conformsTo(element : Element, value : Element) {
	find Rule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Rule'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Rule'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Rule_endBoundaryType(element : Element, value : Element) {
	find Rule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Rule'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Rule'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Rule_propertySet(element : Element, value : Element) {
	find Rule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'ruleKind' attribute of elements with the stereotype 'Rule'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Rule'.
 * value : EnumerationLiteral : A value of the attribute 'ruleKind'.
 */
pattern Rule_ruleKind(element : Element, value : EnumerationLiteral) {
	find Rule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "ruleKind", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Rule'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Rule'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Rule_startBoundaryType(element : Element, value : Element) {
	find Rule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - AllElements - Views

/*
 * Pattern that queries elements with the stereotype 'ArchitecturalDescription' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Package' object with the stereotype ArchitecturalDescription.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ArchitecturalDescription(element : Package, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ArchitecturalDescription");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ArchitecturalDescription_URI(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ArchitecturalDescription_actualPropertySet(element : Package, value : Element) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'approvalAuthority' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'approvalAuthority'.
 */
pattern ArchitecturalDescription_approvalAuthority(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "approvalAuthority", valuespec);
}
/*
 * Pattern that queries the 'architect' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'architect'.
 */
pattern ArchitecturalDescription_architect(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "architect", valuespec);
}
/*
 * Pattern that queries the 'architectureFramework' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * value : EnumerationLiteral : A value of the attribute 'architectureFramework'.
 */
pattern ArchitecturalDescription_architectureFramework(element : Package, value : EnumerationLiteral) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "architectureFramework", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'assumptionAndConstraint' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'assumptionAndConstraint'.
 */
pattern ArchitecturalDescription_assumptionAndConstraint(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "assumptionAndConstraint", valuespec);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ArchitecturalDescription_conformsTo(element : Package, value : Element) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'creatingOrganization' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'creatingOrganization'.
 */
pattern ArchitecturalDescription_creatingOrganization(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "creatingOrganization", valuespec);
}
/*
 * Pattern that queries the 'dateCompleted' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'dateCompleted'.
 */
pattern ArchitecturalDescription_dateCompleted(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "dateCompleted", valuespec);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ArchitecturalDescription_endBoundaryType(element : Package, value : Element) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ArchitecturalDescription_propertySet(element : Package, value : Element) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'purpose' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'purpose'.
 */
pattern ArchitecturalDescription_purpose(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "purpose", valuespec);
}
/*
 * Pattern that queries the 'recommendations' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'recommendations'.
 */
pattern ArchitecturalDescription_recommendations(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "recommendations", valuespec);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ArchitecturalDescription_startBoundaryType(element : Package, value : Element) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'summaryOfFindings' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'summaryOfFindings'.
 */
pattern ArchitecturalDescription_summaryOfFindings(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "summaryOfFindings", valuespec);
}
/*
 * Pattern that queries the 'toBe' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralBoolean : A value of the attribute 'toBe'.
 */
pattern ArchitecturalDescription_toBe(element : Package, valuespec : LiteralBoolean) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "toBe", valuespec);
}
/*
 * Pattern that queries the 'toolsUsed' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'toolsUsed'.
 */
pattern ArchitecturalDescription_toolsUsed(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "toolsUsed", valuespec);
}
/*
 * Pattern that queries the 'viewpoint' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * valuespec : LiteralString : A value of the attribute 'viewpoint'.
 */
pattern ArchitecturalDescription_viewpoint(element : Package, valuespec : LiteralString) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "viewpoint", valuespec);
}
/*
 * Pattern that queries the 'views' attribute of elements with the stereotype 'ArchitecturalDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ArchitecturalDescription'.
 * value : Package : A value of the attribute 'views'.
 */
pattern ArchitecturalDescription_views(element : Package, value : Package) {
	find ArchitecturalDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "views", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ArchitecturalReference' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype ArchitecturalReference.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ArchitecturalReference(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ArchitecturalReference");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ArchitecturalReference'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArchitecturalReference'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ArchitecturalReference_URI(element : Dependency, valuespec : LiteralString) {
	find ArchitecturalReference(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ArchitecturalReference'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArchitecturalReference'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ArchitecturalReference_actualPropertySet(element : Dependency, value : Element) {
	find ArchitecturalReference(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ArchitecturalReference'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArchitecturalReference'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ArchitecturalReference_conformsTo(element : Dependency, value : Element) {
	find ArchitecturalReference(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ArchitecturalReference'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArchitecturalReference'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ArchitecturalReference_endBoundaryType(element : Dependency, value : Element) {
	find ArchitecturalReference(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ArchitecturalReference'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArchitecturalReference'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ArchitecturalReference_propertySet(element : Dependency, value : Element) {
	find ArchitecturalReference(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ArchitecturalReference'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArchitecturalReference'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ArchitecturalReference_startBoundaryType(element : Dependency, value : Element) {
	find ArchitecturalReference(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ArchitectureMetadata' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Comment' object with the stereotype ArchitectureMetadata.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ArchitectureMetadata(element : Comment, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ArchitectureMetadata");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ArchitectureMetadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'ArchitectureMetadata'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ArchitectureMetadata_URI(element : Comment, valuespec : LiteralString) {
	find ArchitectureMetadata(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ArchitectureMetadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'ArchitectureMetadata'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ArchitectureMetadata_actualPropertySet(element : Comment, value : Element) {
	find ArchitectureMetadata(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ArchitectureMetadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'ArchitectureMetadata'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ArchitectureMetadata_conformsTo(element : Comment, value : Element) {
	find ArchitectureMetadata(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'dublinCoreElement' attribute of elements with the stereotype 'ArchitectureMetadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'ArchitectureMetadata'.
 * valuespec : LiteralString : A value of the attribute 'dublinCoreElement'.
 */
pattern ArchitectureMetadata_dublinCoreElement(element : Comment, valuespec : LiteralString) {
	find ArchitectureMetadata(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "dublinCoreElement", valuespec);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ArchitectureMetadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'ArchitectureMetadata'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ArchitectureMetadata_endBoundaryType(element : Comment, value : Element) {
	find ArchitectureMetadata(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'modMetaDataElement' attribute of elements with the stereotype 'ArchitectureMetadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'ArchitectureMetadata'.
 * valuespec : LiteralString : A value of the attribute 'modMetaDataElement'.
 */
pattern ArchitectureMetadata_modMetaDataElement(element : Comment, valuespec : LiteralString) {
	find ArchitectureMetadata(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "modMetaDataElement", valuespec);
}
/*
 * Pattern that queries the 'name' attribute of elements with the stereotype 'ArchitectureMetadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'ArchitectureMetadata'.
 * valuespec : LiteralString : A value of the attribute 'name'.
 */
pattern ArchitectureMetadata_name(element : Comment, valuespec : LiteralString) {
	find ArchitectureMetadata(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "name", valuespec);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ArchitectureMetadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'ArchitectureMetadata'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ArchitectureMetadata_propertySet(element : Comment, value : Element) {
	find ArchitectureMetadata(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ArchitectureMetadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'ArchitectureMetadata'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ArchitectureMetadata_startBoundaryType(element : Comment, value : Element) {
	find ArchitectureMetadata(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Metadata' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Comment' object with the stereotype Metadata.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Metadata(element : Comment, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Metadata");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Metadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Metadata'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Metadata_URI(element : Comment, valuespec : LiteralString) {
	find Metadata(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Metadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Metadata'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Metadata_actualPropertySet(element : Comment, value : Element) {
	find Metadata(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Metadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Metadata'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Metadata_conformsTo(element : Comment, value : Element) {
	find Metadata(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'dublinCoreElement' attribute of elements with the stereotype 'Metadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Metadata'.
 * valuespec : LiteralString : A value of the attribute 'dublinCoreElement'.
 */
pattern Metadata_dublinCoreElement(element : Comment, valuespec : LiteralString) {
	find Metadata(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "dublinCoreElement", valuespec);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Metadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Metadata'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Metadata_endBoundaryType(element : Comment, value : Element) {
	find Metadata(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'modMetaDataElement' attribute of elements with the stereotype 'Metadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Metadata'.
 * valuespec : LiteralString : A value of the attribute 'modMetaDataElement'.
 */
pattern Metadata_modMetaDataElement(element : Comment, valuespec : LiteralString) {
	find Metadata(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "modMetaDataElement", valuespec);
}
/*
 * Pattern that queries the 'name' attribute of elements with the stereotype 'Metadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Metadata'.
 * valuespec : LiteralString : A value of the attribute 'name'.
 */
pattern Metadata_name(element : Comment, valuespec : LiteralString) {
	find Metadata(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "name", valuespec);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Metadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Metadata'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Metadata_propertySet(element : Comment, value : Element) {
	find Metadata(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Metadata'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Metadata'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Metadata_startBoundaryType(element : Comment, value : Element) {
	find Metadata(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'View' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Package' object with the stereotype View.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern View(element : Package, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "View");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'View'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'View'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern View_URI(element : Package, valuespec : LiteralString) {
	find View(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'View'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'View'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern View_actualPropertySet(element : Package, value : Element) {
	find View(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'architecturalElements' attribute of elements with the stereotype 'View'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'View'.
 * value : Element : A value of the attribute 'architecturalElements'.
 */
pattern View_architecturalElements(element : Package, value : Element) {
	find View(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "architecturalElements", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'View'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'View'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern View_conformsTo(element : Package, value : Element) {
	find View(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'coversPhase' attribute of elements with the stereotype 'View'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'View'.
 * value : Element : A value of the attribute 'coversPhase'.
 */
pattern View_coversPhase(element : Package, value : Element) {
	find View(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "coversPhase", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'description' attribute of elements with the stereotype 'View'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'View'.
 * valuespec : LiteralString : A value of the attribute 'description'.
 */
pattern View_description(element : Package, valuespec : LiteralString) {
	find View(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "description", valuespec);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'View'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'View'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern View_endBoundaryType(element : Package, value : Element) {
	find View(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'View'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'View'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern View_propertySet(element : Package, value : Element) {
	find View(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'View'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'View'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern View_startBoundaryType(element : Package, value : Element) {
	find View(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'viewpoints' attribute of elements with the stereotype 'View'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'View'.
 * value : Package : A value of the attribute 'viewpoints'.
 */
pattern View_viewpoints(element : Package, value : Package) {
	find View(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "viewpoints", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Viewpoint' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Package' object with the stereotype Viewpoint.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Viewpoint(element : Package, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Viewpoint");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'Viewpoint'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Viewpoint_URI(element : Package, valuespec : LiteralString) {
	find Viewpoint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'Viewpoint'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Viewpoint_actualPropertySet(element : Package, value : Element) {
	find Viewpoint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'concerns' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'Viewpoint'.
 * valuespec : LiteralString : A value of the attribute 'concerns'.
 */
pattern Viewpoint_concerns(element : Package, valuespec : LiteralString) {
	find Viewpoint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "concerns", valuespec);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'Viewpoint'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Viewpoint_conformsTo(element : Package, value : Element) {
	find Viewpoint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'Viewpoint'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Viewpoint_endBoundaryType(element : Package, value : Element) {
	find Viewpoint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'languages' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'Viewpoint'.
 * valuespec : LiteralString : A value of the attribute 'languages'.
 */
pattern Viewpoint_languages(element : Package, valuespec : LiteralString) {
	find Viewpoint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "languages", valuespec);
}
/*
 * Pattern that queries the 'methods' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'Viewpoint'.
 * valuespec : LiteralString : A value of the attribute 'methods'.
 */
pattern Viewpoint_methods(element : Package, valuespec : LiteralString) {
	find Viewpoint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "methods", valuespec);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'Viewpoint'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Viewpoint_propertySet(element : Package, value : Element) {
	find Viewpoint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'purpose' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'Viewpoint'.
 * valuespec : LiteralString : A value of the attribute 'purpose'.
 */
pattern Viewpoint_purpose(element : Package, valuespec : LiteralString) {
	find Viewpoint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "purpose", valuespec);
}
/*
 * Pattern that queries the 'stakeholders' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'Viewpoint'.
 * valuespec : LiteralString : A value of the attribute 'stakeholders'.
 */
pattern Viewpoint_stakeholders(element : Package, valuespec : LiteralString) {
	find Viewpoint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "stakeholders", valuespec);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Viewpoint'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'Viewpoint'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Viewpoint_startBoundaryType(element : Package, value : Element) {
	find Viewpoint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - ExternalTypes

/*
 * Pattern that queries elements with the stereotype 'ISO8601DateTime' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'LiteralString' object with the stereotype ISO8601DateTime.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ISO8601DateTime(element : LiteralString, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ISO8601DateTime");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ISO8601DateTime'.
 *
 * Parameters:
 * element: 'LiteralString' object with the stereotype 'ISO8601DateTime'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ISO8601DateTime_URI(element : LiteralString, valuespec : LiteralString) {
	find ISO8601DateTime(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ISO8601DateTime'.
 *
 * Parameters:
 * element: 'LiteralString' object with the stereotype 'ISO8601DateTime'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ISO8601DateTime_actualPropertySet(element : LiteralString, value : Element) {
	find ISO8601DateTime(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ISO8601DateTime'.
 *
 * Parameters:
 * element: 'LiteralString' object with the stereotype 'ISO8601DateTime'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ISO8601DateTime_conformsTo(element : LiteralString, value : Element) {
	find ISO8601DateTime(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ISO8601DateTime'.
 *
 * Parameters:
 * element: 'LiteralString' object with the stereotype 'ISO8601DateTime'.
 * value : LiteralString : A value of the attribute 'endBoundaryType'.
 */
pattern ISO8601DateTime_endBoundaryType(element : LiteralString, value : LiteralString) {
	find ISO8601DateTime(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ISO8601DateTime'.
 *
 * Parameters:
 * element: 'LiteralString' object with the stereotype 'ISO8601DateTime'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ISO8601DateTime_propertySet(element : LiteralString, value : Element) {
	find ISO8601DateTime(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ISO8601DateTime'.
 *
 * Parameters:
 * element: 'LiteralString' object with the stereotype 'ISO8601DateTime'.
 * value : LiteralString : A value of the attribute 'startBoundaryType'.
 */
pattern ISO8601DateTime_startBoundaryType(element : LiteralString, value : LiteralString) {
	find ISO8601DateTime(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - OperationalElements - Behavior

/*
 * Pattern that queries elements with the stereotype 'NodeOperation' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Operation' object with the stereotype NodeOperation.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern NodeOperation(element : Operation, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "NodeOperation");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'NodeOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'NodeOperation'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern NodeOperation_URI(element : Operation, valuespec : LiteralString) {
	find NodeOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'NodeOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'NodeOperation'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern NodeOperation_actualPropertySet(element : Operation, value : Element) {
	find NodeOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'NodeOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'NodeOperation'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern NodeOperation_conformsTo(element : Operation, value : Element) {
	find NodeOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'NodeOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'NodeOperation'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern NodeOperation_endBoundaryType(element : Operation, value : Element) {
	find NodeOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'NodeOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'NodeOperation'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern NodeOperation_propertySet(element : Operation, value : Element) {
	find NodeOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'realizes' attribute of elements with the stereotype 'NodeOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'NodeOperation'.
 * value : Activity : A value of the attribute 'realizes'.
 */
pattern NodeOperation_realizes(element : Operation, value : Activity) {
	find NodeOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "realizes", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'NodeOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'NodeOperation'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern NodeOperation_startBoundaryType(element : Operation, value : Element) {
	find NodeOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'OperationalActivity' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Activity' object with the stereotype OperationalActivity.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern OperationalActivity(element : Activity, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "OperationalActivity");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'OperationalActivity'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OperationalActivity_URI(element : Activity, valuespec : LiteralString) {
	find OperationalActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'activityPerformableUnderCondition' attribute of elements with the stereotype 'OperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'OperationalActivity'.
 * value : Element : A value of the attribute 'activityPerformableUnderCondition'.
 */
pattern OperationalActivity_activityPerformableUnderCondition(element : Activity, value : Element) {
	find OperationalActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "activityPerformableUnderCondition", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'OperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'OperationalActivity'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern OperationalActivity_actualPropertySet(element : Activity, value : Element) {
	find OperationalActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'OperationalActivity'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalActivity_conformsTo(element : Activity, value : Element) {
	find OperationalActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'OperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'OperationalActivity'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern OperationalActivity_endBoundaryType(element : Activity, value : Element) {
	find OperationalActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'OperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'OperationalActivity'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern OperationalActivity_propertySet(element : Activity, value : Element) {
	find OperationalActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'realizedBy' attribute of elements with the stereotype 'OperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'OperationalActivity'.
 * value : Operation : A value of the attribute 'realizedBy'.
 */
pattern OperationalActivity_realizedBy(element : Activity, value : Operation) {
	find OperationalActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "realizedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'OperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'OperationalActivity'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern OperationalActivity_startBoundaryType(element : Activity, value : Element) {
	find OperationalActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'subject' attribute of elements with the stereotype 'OperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'OperationalActivity'.
 * value : Element : A value of the attribute 'subject'.
 */
pattern OperationalActivity_subject(element : Activity, value : Element) {
	find OperationalActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "subject", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'OperationalActivityAction' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'CallBehaviorAction' object with the stereotype OperationalActivityAction.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern OperationalActivityAction(element : CallBehaviorAction, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "OperationalActivityAction");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'OperationalActivityAction'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OperationalActivityAction_URI(element : CallBehaviorAction, valuespec : LiteralString) {
	find OperationalActivityAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'OperationalActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'OperationalActivityAction'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern OperationalActivityAction_actualPropertySet(element : CallBehaviorAction, value : Element) {
	find OperationalActivityAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'OperationalActivityAction'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalActivityAction_conformsTo(element : CallBehaviorAction, value : Element) {
	find OperationalActivityAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'OperationalActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'OperationalActivityAction'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern OperationalActivityAction_endBoundaryType(element : CallBehaviorAction, value : Element) {
	find OperationalActivityAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'OperationalActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'OperationalActivityAction'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern OperationalActivityAction_propertySet(element : CallBehaviorAction, value : Element) {
	find OperationalActivityAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'OperationalActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'OperationalActivityAction'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern OperationalActivityAction_startBoundaryType(element : CallBehaviorAction, value : Element) {
	find OperationalActivityAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'OperationalActivityEdge' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'ActivityEdge' object with the stereotype OperationalActivityEdge.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern OperationalActivityEdge(element : ActivityEdge, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "OperationalActivityEdge");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalActivityEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'OperationalActivityEdge'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OperationalActivityEdge_URI(element : ActivityEdge, valuespec : LiteralString) {
	find OperationalActivityEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'OperationalActivityEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'OperationalActivityEdge'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern OperationalActivityEdge_actualPropertySet(element : ActivityEdge, value : Element) {
	find OperationalActivityEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'carriedItem' attribute of elements with the stereotype 'OperationalActivityEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'OperationalActivityEdge'.
 * value : Element : A value of the attribute 'carriedItem'.
 */
pattern OperationalActivityEdge_carriedItem(element : ActivityEdge, value : Element) {
	find OperationalActivityEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "carriedItem", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalActivityEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'OperationalActivityEdge'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalActivityEdge_conformsTo(element : ActivityEdge, value : Element) {
	find OperationalActivityEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'OperationalActivityEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'OperationalActivityEdge'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern OperationalActivityEdge_endBoundaryType(element : ActivityEdge, value : Element) {
	find OperationalActivityEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'OperationalActivityEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'OperationalActivityEdge'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern OperationalActivityEdge_propertySet(element : ActivityEdge, value : Element) {
	find OperationalActivityEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'OperationalActivityEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'OperationalActivityEdge'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern OperationalActivityEdge_startBoundaryType(element : ActivityEdge, value : Element) {
	find OperationalActivityEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'OperationalEventTrace' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Interaction' object with the stereotype OperationalEventTrace.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern OperationalEventTrace(element : Interaction, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "OperationalEventTrace");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalEventTrace'.
 *
 * Parameters:
 * element: 'Interaction' object with the stereotype 'OperationalEventTrace'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OperationalEventTrace_URI(element : Interaction, valuespec : LiteralString) {
	find OperationalEventTrace(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'OperationalEventTrace'.
 *
 * Parameters:
 * element: 'Interaction' object with the stereotype 'OperationalEventTrace'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern OperationalEventTrace_actualPropertySet(element : Interaction, value : Element) {
	find OperationalEventTrace(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalEventTrace'.
 *
 * Parameters:
 * element: 'Interaction' object with the stereotype 'OperationalEventTrace'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalEventTrace_conformsTo(element : Interaction, value : Element) {
	find OperationalEventTrace(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'OperationalEventTrace'.
 *
 * Parameters:
 * element: 'Interaction' object with the stereotype 'OperationalEventTrace'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern OperationalEventTrace_endBoundaryType(element : Interaction, value : Element) {
	find OperationalEventTrace(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'OperationalEventTrace'.
 *
 * Parameters:
 * element: 'Interaction' object with the stereotype 'OperationalEventTrace'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern OperationalEventTrace_propertySet(element : Interaction, value : Element) {
	find OperationalEventTrace(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'OperationalEventTrace'.
 *
 * Parameters:
 * element: 'Interaction' object with the stereotype 'OperationalEventTrace'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern OperationalEventTrace_startBoundaryType(element : Interaction, value : Element) {
	find OperationalEventTrace(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'OperationalMessage' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Message' object with the stereotype OperationalMessage.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern OperationalMessage(element : Message, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "OperationalMessage");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'OperationalMessage'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OperationalMessage_URI(element : Message, valuespec : LiteralString) {
	find OperationalMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'OperationalMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'OperationalMessage'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern OperationalMessage_actualPropertySet(element : Message, value : Element) {
	find OperationalMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'carries' attribute of elements with the stereotype 'OperationalMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'OperationalMessage'.
 * value : Element : A value of the attribute 'carries'.
 */
pattern OperationalMessage_carries(element : Message, value : Element) {
	find OperationalMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "carries", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'OperationalMessage'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalMessage_conformsTo(element : Message, value : Element) {
	find OperationalMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'OperationalMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'OperationalMessage'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern OperationalMessage_endBoundaryType(element : Message, value : Element) {
	find OperationalMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'OperationalMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'OperationalMessage'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern OperationalMessage_propertySet(element : Message, value : Element) {
	find OperationalMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'OperationalMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'OperationalMessage'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern OperationalMessage_startBoundaryType(element : Message, value : Element) {
	find OperationalMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'OperationalParameter' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Parameter' object with the stereotype OperationalParameter.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern OperationalParameter(element : Parameter, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "OperationalParameter");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'OperationalParameter'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OperationalParameter_URI(element : Parameter, valuespec : LiteralString) {
	find OperationalParameter(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'OperationalParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'OperationalParameter'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern OperationalParameter_actualPropertySet(element : Parameter, value : Element) {
	find OperationalParameter(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'OperationalParameter'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalParameter_conformsTo(element : Parameter, value : Element) {
	find OperationalParameter(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'OperationalParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'OperationalParameter'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern OperationalParameter_endBoundaryType(element : Parameter, value : Element) {
	find OperationalParameter(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'OperationalParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'OperationalParameter'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern OperationalParameter_propertySet(element : Parameter, value : Element) {
	find OperationalParameter(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'OperationalParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'OperationalParameter'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern OperationalParameter_startBoundaryType(element : Parameter, value : Element) {
	find OperationalParameter(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'OperationalState' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'State' object with the stereotype OperationalState.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern OperationalState(element : State, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "OperationalState");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalState'.
 *
 * Parameters:
 * element: 'State' object with the stereotype 'OperationalState'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OperationalState_URI(element : State, valuespec : LiteralString) {
	find OperationalState(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'OperationalState'.
 *
 * Parameters:
 * element: 'State' object with the stereotype 'OperationalState'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern OperationalState_actualPropertySet(element : State, value : Element) {
	find OperationalState(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalState'.
 *
 * Parameters:
 * element: 'State' object with the stereotype 'OperationalState'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalState_conformsTo(element : State, value : Element) {
	find OperationalState(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'OperationalState'.
 *
 * Parameters:
 * element: 'State' object with the stereotype 'OperationalState'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern OperationalState_endBoundaryType(element : State, value : Element) {
	find OperationalState(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'OperationalState'.
 *
 * Parameters:
 * element: 'State' object with the stereotype 'OperationalState'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern OperationalState_propertySet(element : State, value : Element) {
	find OperationalState(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'OperationalState'.
 *
 * Parameters:
 * element: 'State' object with the stereotype 'OperationalState'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern OperationalState_startBoundaryType(element : State, value : Element) {
	find OperationalState(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'OperationalStateDescription' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'StateMachine' object with the stereotype OperationalStateDescription.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern OperationalStateDescription(element : StateMachine, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "OperationalStateDescription");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalStateDescription'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'OperationalStateDescription'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OperationalStateDescription_URI(element : StateMachine, valuespec : LiteralString) {
	find OperationalStateDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'OperationalStateDescription'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'OperationalStateDescription'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern OperationalStateDescription_actualPropertySet(element : StateMachine, value : Element) {
	find OperationalStateDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalStateDescription'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'OperationalStateDescription'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalStateDescription_conformsTo(element : StateMachine, value : Element) {
	find OperationalStateDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'OperationalStateDescription'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'OperationalStateDescription'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern OperationalStateDescription_endBoundaryType(element : StateMachine, value : Element) {
	find OperationalStateDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'OperationalStateDescription'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'OperationalStateDescription'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern OperationalStateDescription_propertySet(element : StateMachine, value : Element) {
	find OperationalStateDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'OperationalStateDescription'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'OperationalStateDescription'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern OperationalStateDescription_startBoundaryType(element : StateMachine, value : Element) {
	find OperationalStateDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'SubjectOfOperationalStateMachine' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype SubjectOfOperationalStateMachine.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern SubjectOfOperationalStateMachine(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "SubjectOfOperationalStateMachine");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SubjectOfOperationalStateMachine'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfOperationalStateMachine'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern SubjectOfOperationalStateMachine_URI(element : Element, valuespec : LiteralString) {
	find SubjectOfOperationalStateMachine(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'SubjectOfOperationalStateMachine'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfOperationalStateMachine'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern SubjectOfOperationalStateMachine_actualPropertySet(element : Element, value : Element) {
	find SubjectOfOperationalStateMachine(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SubjectOfOperationalStateMachine'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfOperationalStateMachine'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern SubjectOfOperationalStateMachine_conformsTo(element : Element, value : Element) {
	find SubjectOfOperationalStateMachine(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'SubjectOfOperationalStateMachine'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfOperationalStateMachine'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern SubjectOfOperationalStateMachine_endBoundaryType(element : Element, value : Element) {
	find SubjectOfOperationalStateMachine(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'SubjectOfOperationalStateMachine'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfOperationalStateMachine'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern SubjectOfOperationalStateMachine_propertySet(element : Element, value : Element) {
	find SubjectOfOperationalStateMachine(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'SubjectOfOperationalStateMachine'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfOperationalStateMachine'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern SubjectOfOperationalStateMachine_startBoundaryType(element : Element, value : Element) {
	find SubjectOfOperationalStateMachine(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - OperationalElements - Data

/*
 * Pattern that queries elements with the stereotype 'LogicalDataModel' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Package' object with the stereotype LogicalDataModel.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern LogicalDataModel(element : Package, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "LogicalDataModel");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'LogicalDataModel'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'LogicalDataModel'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern LogicalDataModel_URI(element : Package, valuespec : LiteralString) {
	find LogicalDataModel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'LogicalDataModel'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'LogicalDataModel'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern LogicalDataModel_actualPropertySet(element : Package, value : Element) {
	find LogicalDataModel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'LogicalDataModel'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'LogicalDataModel'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern LogicalDataModel_conformsTo(element : Package, value : Element) {
	find LogicalDataModel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'LogicalDataModel'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'LogicalDataModel'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern LogicalDataModel_endBoundaryType(element : Package, value : Element) {
	find LogicalDataModel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'LogicalDataModel'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'LogicalDataModel'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern LogicalDataModel_propertySet(element : Package, value : Element) {
	find LogicalDataModel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'LogicalDataModel'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'LogicalDataModel'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern LogicalDataModel_startBoundaryType(element : Package, value : Element) {
	find LogicalDataModel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - OperationalElements - Flows

/*
 * Pattern that queries elements with the stereotype 'Command' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InformationFlow' object with the stereotype Command.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Command(element : InformationFlow, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Command");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Command'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Command'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Command_URI(element : InformationFlow, valuespec : LiteralString) {
	find Command(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Command'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Command'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Command_actualPropertySet(element : InformationFlow, value : Element) {
	find Command(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Command'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Command'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Command_conformsTo(element : InformationFlow, value : Element) {
	find Command(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Command'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Command'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Command_endBoundaryType(element : InformationFlow, value : Element) {
	find Command(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Command'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Command'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Command_propertySet(element : InformationFlow, value : Element) {
	find Command(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Command'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Command'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Command_startBoundaryType(element : InformationFlow, value : Element) {
	find Command(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'OperationalExchange' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InformationFlow' object with the stereotype OperationalExchange.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern OperationalExchange(element : InformationFlow, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "OperationalExchange");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalExchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'OperationalExchange'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OperationalExchange_URI(element : InformationFlow, valuespec : LiteralString) {
	find OperationalExchange(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'OperationalExchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'OperationalExchange'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern OperationalExchange_actualPropertySet(element : InformationFlow, value : Element) {
	find OperationalExchange(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalExchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'OperationalExchange'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalExchange_conformsTo(element : InformationFlow, value : Element) {
	find OperationalExchange(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'OperationalExchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'OperationalExchange'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern OperationalExchange_endBoundaryType(element : InformationFlow, value : Element) {
	find OperationalExchange(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'exchangeKind' attribute of elements with the stereotype 'OperationalExchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'OperationalExchange'.
 * value : EnumerationLiteral : A value of the attribute 'exchangeKind'.
 */
pattern OperationalExchange_exchangeKind(element : InformationFlow, value : EnumerationLiteral) {
	find OperationalExchange(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "exchangeKind", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'OperationalExchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'OperationalExchange'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern OperationalExchange_propertySet(element : InformationFlow, value : Element) {
	find OperationalExchange(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'OperationalExchange'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'OperationalExchange'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern OperationalExchange_startBoundaryType(element : InformationFlow, value : Element) {
	find OperationalExchange(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'OperationalExchangeItem' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype OperationalExchangeItem.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern OperationalExchangeItem(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "OperationalExchangeItem");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalExchangeItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OperationalExchangeItem'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OperationalExchangeItem_URI(element : Element, valuespec : LiteralString) {
	find OperationalExchangeItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'OperationalExchangeItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OperationalExchangeItem'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern OperationalExchangeItem_actsUpon(element : Element, value : Element) {
	find OperationalExchangeItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'OperationalExchangeItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OperationalExchangeItem'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern OperationalExchangeItem_actualPropertySet(element : Element, value : Element) {
	find OperationalExchangeItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'OperationalExchangeItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OperationalExchangeItem'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern OperationalExchangeItem_appliesTo(element : Element, value : Element) {
	find OperationalExchangeItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalExchangeItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OperationalExchangeItem'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalExchangeItem_conformsTo(element : Element, value : Element) {
	find OperationalExchangeItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'OperationalExchangeItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OperationalExchangeItem'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern OperationalExchangeItem_endBoundaryType(element : Element, value : Element) {
	find OperationalExchangeItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'OperationalExchangeItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OperationalExchangeItem'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern OperationalExchangeItem_physicalLocation(element : Element, value : Element) {
	find OperationalExchangeItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'OperationalExchangeItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OperationalExchangeItem'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern OperationalExchangeItem_propertySet(element : Element, value : Element) {
	find OperationalExchangeItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'OperationalExchangeItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OperationalExchangeItem'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern OperationalExchangeItem_requiredEnvironment(element : Element, value : Element) {
	find OperationalExchangeItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'OperationalExchangeItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OperationalExchangeItem'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern OperationalExchangeItem_startBoundaryType(element : Element, value : Element) {
	find OperationalExchangeItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - OperationalElements - Structure

/*
 * Pattern that queries elements with the stereotype 'ArbitraryConnector' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype ArbitraryConnector.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ArbitraryConnector(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ArbitraryConnector");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ArbitraryConnector'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArbitraryConnector'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ArbitraryConnector_URI(element : Dependency, valuespec : LiteralString) {
	find ArbitraryConnector(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ArbitraryConnector'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArbitraryConnector'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ArbitraryConnector_actualPropertySet(element : Dependency, value : Element) {
	find ArbitraryConnector(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ArbitraryConnector'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArbitraryConnector'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ArbitraryConnector_conformsTo(element : Dependency, value : Element) {
	find ArbitraryConnector(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ArbitraryConnector'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArbitraryConnector'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ArbitraryConnector_endBoundaryType(element : Dependency, value : Element) {
	find ArbitraryConnector(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ArbitraryConnector'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArbitraryConnector'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ArbitraryConnector_propertySet(element : Dependency, value : Element) {
	find ArbitraryConnector(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ArbitraryConnector'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ArbitraryConnector'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ArbitraryConnector_startBoundaryType(element : Dependency, value : Element) {
	find ArbitraryConnector(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Competence' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Competence.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Competence(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Competence");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Competence'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Competence'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Competence_URI(element : Class, valuespec : LiteralString) {
	find Competence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Competence'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Competence'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Competence_actualPropertySet(element : Class, value : Element) {
	find Competence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'Competence'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Competence'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern Competence_appliesTo(element : Class, value : Element) {
	find Competence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Competence'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Competence'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Competence_conformsTo(element : Class, value : Element) {
	find Competence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Competence'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Competence'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Competence_endBoundaryType(element : Class, value : Element) {
	find Competence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Competence'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Competence'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Competence_propertySet(element : Class, value : Element) {
	find Competence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Competence'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Competence'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Competence_startBoundaryType(element : Class, value : Element) {
	find Competence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ConceptItem' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype ConceptItem.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ConceptItem(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ConceptItem");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ConceptItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ConceptItem'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ConceptItem_URI(element : Element, valuespec : LiteralString) {
	find ConceptItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ConceptItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ConceptItem'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ConceptItem_actualPropertySet(element : Element, value : Element) {
	find ConceptItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ConceptItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ConceptItem'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ConceptItem_conformsTo(element : Element, value : Element) {
	find ConceptItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ConceptItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ConceptItem'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ConceptItem_endBoundaryType(element : Element, value : Element) {
	find ConceptItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ConceptItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ConceptItem'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ConceptItem_propertySet(element : Element, value : Element) {
	find ConceptItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ConceptItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ConceptItem'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ConceptItem_startBoundaryType(element : Element, value : Element) {
	find ConceptItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ConceptRole' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ConceptRole.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ConceptRole(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ConceptRole");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ConceptRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ConceptRole'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ConceptRole_URI(element : Property, valuespec : LiteralString) {
	find ConceptRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ConceptRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ConceptRole'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ConceptRole_actualPropertySet(element : Property, value : Element) {
	find ConceptRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ConceptRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ConceptRole'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ConceptRole_conformsTo(element : Property, value : Element) {
	find ConceptRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ConceptRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ConceptRole'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ConceptRole_endBoundaryType(element : Property, value : Element) {
	find ConceptRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ConceptRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ConceptRole'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ConceptRole_propertySet(element : Property, value : Element) {
	find ConceptRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ConceptRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ConceptRole'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ConceptRole_startBoundaryType(element : Property, value : Element) {
	find ConceptRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'HighLevelOperationalConcept' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype HighLevelOperationalConcept.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern HighLevelOperationalConcept(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "HighLevelOperationalConcept");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'HighLevelOperationalConcept'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'HighLevelOperationalConcept'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern HighLevelOperationalConcept_URI(element : Class, valuespec : LiteralString) {
	find HighLevelOperationalConcept(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'HighLevelOperationalConcept'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'HighLevelOperationalConcept'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern HighLevelOperationalConcept_actualPropertySet(element : Class, value : Element) {
	find HighLevelOperationalConcept(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'HighLevelOperationalConcept'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'HighLevelOperationalConcept'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern HighLevelOperationalConcept_conformsTo(element : Class, value : Element) {
	find HighLevelOperationalConcept(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'HighLevelOperationalConcept'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'HighLevelOperationalConcept'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern HighLevelOperationalConcept_endBoundaryType(element : Class, value : Element) {
	find HighLevelOperationalConcept(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'mission' attribute of elements with the stereotype 'HighLevelOperationalConcept'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'HighLevelOperationalConcept'.
 * value : Activity : A value of the attribute 'mission'.
 */
pattern HighLevelOperationalConcept_mission(element : Class, value : Activity) {
	find HighLevelOperationalConcept(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "mission", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'HighLevelOperationalConcept'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'HighLevelOperationalConcept'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern HighLevelOperationalConcept_propertySet(element : Class, value : Element) {
	find HighLevelOperationalConcept(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'HighLevelOperationalConcept'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'HighLevelOperationalConcept'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern HighLevelOperationalConcept_startBoundaryType(element : Class, value : Element) {
	find HighLevelOperationalConcept(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'KnownResource' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype KnownResource.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern KnownResource(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "KnownResource");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'KnownResource'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'KnownResource'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern KnownResource_URI(element : Property, valuespec : LiteralString) {
	find KnownResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'KnownResource'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'KnownResource'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern KnownResource_actualPropertySet(element : Property, value : Element) {
	find KnownResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'KnownResource'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'KnownResource'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern KnownResource_conformsTo(element : Property, value : Element) {
	find KnownResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'KnownResource'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'KnownResource'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern KnownResource_endBoundaryType(element : Property, value : Element) {
	find KnownResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'performsInContext' attribute of elements with the stereotype 'KnownResource'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'KnownResource'.
 * value : Element : A value of the attribute 'performsInContext'.
 */
pattern KnownResource_performsInContext(element : Property, value : Element) {
	find KnownResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "performsInContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'KnownResource'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'KnownResource'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern KnownResource_propertySet(element : Property, value : Element) {
	find KnownResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'KnownResource'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'KnownResource'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern KnownResource_startBoundaryType(element : Property, value : Element) {
	find KnownResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'LogicalArchitecture' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype LogicalArchitecture.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern LogicalArchitecture(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "LogicalArchitecture");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'LogicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'LogicalArchitecture'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern LogicalArchitecture_URI(element : Class, valuespec : LiteralString) {
	find LogicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'LogicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'LogicalArchitecture'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern LogicalArchitecture_actsUpon(element : Class, value : Element) {
	find LogicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'LogicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'LogicalArchitecture'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern LogicalArchitecture_actualPropertySet(element : Class, value : Element) {
	find LogicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'LogicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'LogicalArchitecture'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern LogicalArchitecture_appliesTo(element : Class, value : Element) {
	find LogicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'LogicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'LogicalArchitecture'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern LogicalArchitecture_conformsTo(element : Class, value : Element) {
	find LogicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'LogicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'LogicalArchitecture'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern LogicalArchitecture_endBoundaryType(element : Class, value : Element) {
	find LogicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'LogicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'LogicalArchitecture'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern LogicalArchitecture_physicalLocation(element : Class, value : Element) {
	find LogicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'LogicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'LogicalArchitecture'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern LogicalArchitecture_propertySet(element : Class, value : Element) {
	find LogicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'LogicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'LogicalArchitecture'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern LogicalArchitecture_requiredEnvironment(element : Class, value : Element) {
	find LogicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'LogicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'LogicalArchitecture'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern LogicalArchitecture_startBoundaryType(element : Class, value : Element) {
	find LogicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Mission' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Activity' object with the stereotype Mission.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Mission(element : Activity, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Mission");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Mission'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Mission'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Mission_URI(element : Activity, valuespec : LiteralString) {
	find Mission(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Mission'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Mission'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Mission_actualPropertySet(element : Activity, value : Element) {
	find Mission(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Mission'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Mission'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Mission_conformsTo(element : Activity, value : Element) {
	find Mission(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Mission'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Mission'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Mission_endBoundaryType(element : Activity, value : Element) {
	find Mission(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'missionArea' attribute of elements with the stereotype 'Mission'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Mission'.
 * valuespec : LiteralString : A value of the attribute 'missionArea'.
 */
pattern Mission_missionArea(element : Activity, valuespec : LiteralString) {
	find Mission(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "missionArea", valuespec);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Mission'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Mission'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Mission_propertySet(element : Activity, value : Element) {
	find Mission(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Mission'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Mission'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Mission_startBoundaryType(element : Activity, value : Element) {
	find Mission(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Needline' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Connector' object with the stereotype Needline.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Needline(element : Connector, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Needline");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Needline'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'Needline'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Needline_URI(element : Connector, valuespec : LiteralString) {
	find Needline(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Needline'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'Needline'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Needline_actualPropertySet(element : Connector, value : Element) {
	find Needline(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Needline'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'Needline'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Needline_conformsTo(element : Connector, value : Element) {
	find Needline(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Needline'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'Needline'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Needline_endBoundaryType(element : Connector, value : Element) {
	find Needline(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Needline'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'Needline'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Needline_propertySet(element : Connector, value : Element) {
	find Needline(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'realizedExchange' attribute of elements with the stereotype 'Needline'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'Needline'.
 * value : Element : A value of the attribute 'realizedExchange'.
 */
pattern Needline_realizedExchange(element : Connector, value : Element) {
	find Needline(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "realizedExchange", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Needline'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'Needline'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Needline_startBoundaryType(element : Connector, value : Element) {
	find Needline(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Node' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Node.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Node(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Node");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Node'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Node'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Node_URI(element : Class, valuespec : LiteralString) {
	find Node(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'Node'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Node'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern Node_actsUpon(element : Class, value : Element) {
	find Node(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Node'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Node'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Node_actualPropertySet(element : Class, value : Element) {
	find Node(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'Node'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Node'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern Node_appliesTo(element : Class, value : Element) {
	find Node(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Node'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Node'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Node_conformsTo(element : Class, value : Element) {
	find Node(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'connectedNodes' attribute of elements with the stereotype 'Node'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Node'.
 * value : Class : A value of the attribute 'connectedNodes'.
 */
pattern Node_connectedNodes(element : Class, value : Class) {
	find Node(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "connectedNodes", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Node'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Node'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Node_endBoundaryType(element : Class, value : Element) {
	find Node(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'Node'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Node'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern Node_physicalLocation(element : Class, value : Element) {
	find Node(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Node'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Node'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Node_propertySet(element : Class, value : Element) {
	find Node(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'Node'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Node'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern Node_requiredEnvironment(element : Class, value : Element) {
	find Node(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Node'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Node'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Node_startBoundaryType(element : Class, value : Element) {
	find Node(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'NodeParent' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype NodeParent.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern NodeParent(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "NodeParent");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'NodeParent'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'NodeParent'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern NodeParent_URI(element : Class, valuespec : LiteralString) {
	find NodeParent(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'NodeParent'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'NodeParent'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern NodeParent_actsUpon(element : Class, value : Element) {
	find NodeParent(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'NodeParent'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'NodeParent'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern NodeParent_actualPropertySet(element : Class, value : Element) {
	find NodeParent(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'NodeParent'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'NodeParent'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern NodeParent_appliesTo(element : Class, value : Element) {
	find NodeParent(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'NodeParent'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'NodeParent'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern NodeParent_conformsTo(element : Class, value : Element) {
	find NodeParent(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'NodeParent'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'NodeParent'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern NodeParent_endBoundaryType(element : Class, value : Element) {
	find NodeParent(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'NodeParent'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'NodeParent'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern NodeParent_physicalLocation(element : Class, value : Element) {
	find NodeParent(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'NodeParent'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'NodeParent'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern NodeParent_propertySet(element : Class, value : Element) {
	find NodeParent(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'NodeParent'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'NodeParent'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern NodeParent_requiredEnvironment(element : Class, value : Element) {
	find NodeParent(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'NodeParent'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'NodeParent'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern NodeParent_startBoundaryType(element : Class, value : Element) {
	find NodeParent(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'NodePort' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Port' object with the stereotype NodePort.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern NodePort(element : Port, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "NodePort");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'NodePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'NodePort'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern NodePort_URI(element : Port, valuespec : LiteralString) {
	find NodePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'NodePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'NodePort'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern NodePort_actualPropertySet(element : Port, value : Element) {
	find NodePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'NodePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'NodePort'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern NodePort_conformsTo(element : Port, value : Element) {
	find NodePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'NodePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'NodePort'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern NodePort_endBoundaryType(element : Port, value : Element) {
	find NodePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'NodePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'NodePort'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern NodePort_propertySet(element : Port, value : Element) {
	find NodePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'NodePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'NodePort'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern NodePort_startBoundaryType(element : Port, value : Element) {
	find NodePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'NodeRole' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype NodeRole.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern NodeRole(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "NodeRole");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'NodeRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'NodeRole'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern NodeRole_URI(element : Property, valuespec : LiteralString) {
	find NodeRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'NodeRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'NodeRole'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern NodeRole_actualPropertySet(element : Property, value : Element) {
	find NodeRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'NodeRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'NodeRole'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern NodeRole_conformsTo(element : Property, value : Element) {
	find NodeRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'NodeRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'NodeRole'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern NodeRole_endBoundaryType(element : Property, value : Element) {
	find NodeRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'performsInContext' attribute of elements with the stereotype 'NodeRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'NodeRole'.
 * value : Element : A value of the attribute 'performsInContext'.
 */
pattern NodeRole_performsInContext(element : Property, value : Element) {
	find NodeRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "performsInContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'NodeRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'NodeRole'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern NodeRole_propertySet(element : Property, value : Element) {
	find NodeRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'NodeRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'NodeRole'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern NodeRole_startBoundaryType(element : Property, value : Element) {
	find NodeRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'OperationalConstraint' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Constraint' object with the stereotype OperationalConstraint.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern OperationalConstraint(element : Constraint, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "OperationalConstraint");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OperationalConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'OperationalConstraint'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OperationalConstraint_URI(element : Constraint, valuespec : LiteralString) {
	find OperationalConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'OperationalConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'OperationalConstraint'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern OperationalConstraint_actualPropertySet(element : Constraint, value : Element) {
	find OperationalConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OperationalConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'OperationalConstraint'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OperationalConstraint_conformsTo(element : Constraint, value : Element) {
	find OperationalConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'OperationalConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'OperationalConstraint'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern OperationalConstraint_endBoundaryType(element : Constraint, value : Element) {
	find OperationalConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'OperationalConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'OperationalConstraint'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern OperationalConstraint_propertySet(element : Constraint, value : Element) {
	find OperationalConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'ruleKind' attribute of elements with the stereotype 'OperationalConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'OperationalConstraint'.
 * value : EnumerationLiteral : A value of the attribute 'ruleKind'.
 */
pattern OperationalConstraint_ruleKind(element : Constraint, value : EnumerationLiteral) {
	find OperationalConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "ruleKind", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'OperationalConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'OperationalConstraint'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern OperationalConstraint_startBoundaryType(element : Constraint, value : Element) {
	find OperationalConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'SecurityDomain' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype SecurityDomain.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern SecurityDomain(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "SecurityDomain");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SecurityDomain'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityDomain'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern SecurityDomain_URI(element : Class, valuespec : LiteralString) {
	find SecurityDomain(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'SecurityDomain'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityDomain'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern SecurityDomain_actsUpon(element : Class, value : Element) {
	find SecurityDomain(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'SecurityDomain'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityDomain'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern SecurityDomain_actualPropertySet(element : Class, value : Element) {
	find SecurityDomain(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'SecurityDomain'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityDomain'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern SecurityDomain_appliesTo(element : Class, value : Element) {
	find SecurityDomain(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SecurityDomain'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityDomain'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern SecurityDomain_conformsTo(element : Class, value : Element) {
	find SecurityDomain(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'connectedNodes' attribute of elements with the stereotype 'SecurityDomain'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityDomain'.
 * value : Class : A value of the attribute 'connectedNodes'.
 */
pattern SecurityDomain_connectedNodes(element : Class, value : Class) {
	find SecurityDomain(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "connectedNodes", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'SecurityDomain'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityDomain'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern SecurityDomain_endBoundaryType(element : Class, value : Element) {
	find SecurityDomain(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'SecurityDomain'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityDomain'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern SecurityDomain_physicalLocation(element : Class, value : Element) {
	find SecurityDomain(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'SecurityDomain'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityDomain'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern SecurityDomain_propertySet(element : Class, value : Element) {
	find SecurityDomain(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'SecurityDomain'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityDomain'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern SecurityDomain_requiredEnvironment(element : Class, value : Element) {
	find SecurityDomain(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'SecurityDomain'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SecurityDomain'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern SecurityDomain_startBoundaryType(element : Class, value : Element) {
	find SecurityDomain(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'SubjectOfOperationalConstraint' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype SubjectOfOperationalConstraint.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern SubjectOfOperationalConstraint(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "SubjectOfOperationalConstraint");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SubjectOfOperationalConstraint'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfOperationalConstraint'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern SubjectOfOperationalConstraint_URI(element : Element, valuespec : LiteralString) {
	find SubjectOfOperationalConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'SubjectOfOperationalConstraint'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfOperationalConstraint'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern SubjectOfOperationalConstraint_actualPropertySet(element : Element, value : Element) {
	find SubjectOfOperationalConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SubjectOfOperationalConstraint'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfOperationalConstraint'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern SubjectOfOperationalConstraint_conformsTo(element : Element, value : Element) {
	find SubjectOfOperationalConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'SubjectOfOperationalConstraint'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfOperationalConstraint'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern SubjectOfOperationalConstraint_endBoundaryType(element : Element, value : Element) {
	find SubjectOfOperationalConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'SubjectOfOperationalConstraint'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfOperationalConstraint'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern SubjectOfOperationalConstraint_propertySet(element : Element, value : Element) {
	find SubjectOfOperationalConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'SubjectOfOperationalConstraint'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfOperationalConstraint'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern SubjectOfOperationalConstraint_startBoundaryType(element : Element, value : Element) {
	find SubjectOfOperationalConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - OperationalElements - Structure - Organizational - Actual

/*
 * Pattern that queries elements with the stereotype 'ActualOrganization' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualOrganization.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ActualOrganization(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ActualOrganization");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActualOrganization_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualOrganization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ActualOrganization_actualPropertySet(element : InstanceSpecification, value : Element) {
	find ActualOrganization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'code/symbol' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * valuespec : LiteralString : A value of the attribute 'code/symbol'.
 */
pattern ActualOrganization_codesymbol(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualOrganization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "code/symbol", valuespec);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActualOrganization_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualOrganization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ActualOrganization_endBoundaryType(element : InstanceSpecification, value : Element) {
	find ActualOrganization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern ActualOrganization_physicalLocation(element : InstanceSpecification, value : Element) {
	find ActualOrganization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ActualOrganization_propertySet(element : InstanceSpecification, value : Element) {
	find ActualOrganization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'ratifiedStandards' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * value : Element : A value of the attribute 'ratifiedStandards'.
 */
pattern ActualOrganization_ratifiedStandards(element : InstanceSpecification, value : Element) {
	find ActualOrganization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "ratifiedStandards", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern ActualOrganization_requiredEnvironment(element : InstanceSpecification, value : Element) {
	find ActualOrganization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'serviceType' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * valuespec : LiteralString : A value of the attribute 'serviceType'.
 */
pattern ActualOrganization_serviceType(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualOrganization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "serviceType", valuespec);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ActualOrganization'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganization'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ActualOrganization_startBoundaryType(element : InstanceSpecification, value : Element) {
	find ActualOrganization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ActualOrganizationRelationship' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InformationFlow' object with the stereotype ActualOrganizationRelationship.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ActualOrganizationRelationship(element : InformationFlow, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ActualOrganizationRelationship");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualOrganizationRelationship'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'ActualOrganizationRelationship'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActualOrganizationRelationship_URI(element : InformationFlow, valuespec : LiteralString) {
	find ActualOrganizationRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ActualOrganizationRelationship'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'ActualOrganizationRelationship'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ActualOrganizationRelationship_actualPropertySet(element : InformationFlow, value : Element) {
	find ActualOrganizationRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualOrganizationRelationship'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'ActualOrganizationRelationship'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActualOrganizationRelationship_conformsTo(element : InformationFlow, value : Element) {
	find ActualOrganizationRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ActualOrganizationRelationship'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'ActualOrganizationRelationship'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ActualOrganizationRelationship_endBoundaryType(element : InformationFlow, value : Element) {
	find ActualOrganizationRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ActualOrganizationRelationship'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'ActualOrganizationRelationship'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ActualOrganizationRelationship_propertySet(element : InformationFlow, value : Element) {
	find ActualOrganizationRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ActualOrganizationRelationship'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'ActualOrganizationRelationship'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ActualOrganizationRelationship_startBoundaryType(element : InformationFlow, value : Element) {
	find ActualOrganizationRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ActualOrganizationRole' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Slot' object with the stereotype ActualOrganizationRole.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ActualOrganizationRole(element : Slot, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ActualOrganizationRole");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualOrganizationRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualOrganizationRole'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActualOrganizationRole_URI(element : Slot, valuespec : LiteralString) {
	find ActualOrganizationRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ActualOrganizationRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualOrganizationRole'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ActualOrganizationRole_actualPropertySet(element : Slot, value : Element) {
	find ActualOrganizationRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualOrganizationRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualOrganizationRole'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActualOrganizationRole_conformsTo(element : Slot, value : Element) {
	find ActualOrganizationRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ActualOrganizationRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualOrganizationRole'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ActualOrganizationRole_endBoundaryType(element : Slot, value : Element) {
	find ActualOrganizationRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ActualOrganizationRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualOrganizationRole'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ActualOrganizationRole_propertySet(element : Slot, value : Element) {
	find ActualOrganizationRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ActualOrganizationRole'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ActualOrganizationRole'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ActualOrganizationRole_startBoundaryType(element : Slot, value : Element) {
	find ActualOrganizationRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ActualOrganizationalResource' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualOrganizationalResource.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ActualOrganizationalResource(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ActualOrganizationalResource");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualOrganizationalResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganizationalResource'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActualOrganizationalResource_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualOrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ActualOrganizationalResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganizationalResource'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ActualOrganizationalResource_actualPropertySet(element : InstanceSpecification, value : Element) {
	find ActualOrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualOrganizationalResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganizationalResource'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActualOrganizationalResource_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualOrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ActualOrganizationalResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganizationalResource'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ActualOrganizationalResource_endBoundaryType(element : InstanceSpecification, value : Element) {
	find ActualOrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'ActualOrganizationalResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganizationalResource'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern ActualOrganizationalResource_physicalLocation(element : InstanceSpecification, value : Element) {
	find ActualOrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ActualOrganizationalResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganizationalResource'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ActualOrganizationalResource_propertySet(element : InstanceSpecification, value : Element) {
	find ActualOrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'ActualOrganizationalResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganizationalResource'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern ActualOrganizationalResource_requiredEnvironment(element : InstanceSpecification, value : Element) {
	find ActualOrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ActualOrganizationalResource'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualOrganizationalResource'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ActualOrganizationalResource_startBoundaryType(element : InstanceSpecification, value : Element) {
	find ActualOrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ActualPerson' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualPerson.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ActualPerson(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ActualPerson");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualPerson'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPerson'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActualPerson_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualPerson(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ActualPerson'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPerson'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ActualPerson_actualPropertySet(element : InstanceSpecification, value : Element) {
	find ActualPerson(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualPerson'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPerson'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActualPerson_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualPerson(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ActualPerson'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPerson'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ActualPerson_endBoundaryType(element : InstanceSpecification, value : Element) {
	find ActualPerson(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'filledPost' attribute of elements with the stereotype 'ActualPerson'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPerson'.
 * value : InstanceSpecification : A value of the attribute 'filledPost'.
 */
pattern ActualPerson_filledPost(element : InstanceSpecification, value : InstanceSpecification) {
	find ActualPerson(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "filledPost", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'ActualPerson'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPerson'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern ActualPerson_physicalLocation(element : InstanceSpecification, value : Element) {
	find ActualPerson(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ActualPerson'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPerson'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ActualPerson_propertySet(element : InstanceSpecification, value : Element) {
	find ActualPerson(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'ActualPerson'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPerson'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern ActualPerson_requiredEnvironment(element : InstanceSpecification, value : Element) {
	find ActualPerson(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ActualPerson'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPerson'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ActualPerson_startBoundaryType(element : InstanceSpecification, value : Element) {
	find ActualPerson(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ActualPost' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualPost.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ActualPost(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ActualPost");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualPost'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPost'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActualPost_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualPost(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ActualPost'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPost'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ActualPost_actualPropertySet(element : InstanceSpecification, value : Element) {
	find ActualPost(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualPost'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPost'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActualPost_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualPost(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ActualPost'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPost'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ActualPost_endBoundaryType(element : InstanceSpecification, value : Element) {
	find ActualPost(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'filledBy' attribute of elements with the stereotype 'ActualPost'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPost'.
 * value : InstanceSpecification : A value of the attribute 'filledBy'.
 */
pattern ActualPost_filledBy(element : InstanceSpecification, value : InstanceSpecification) {
	find ActualPost(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "filledBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'ActualPost'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPost'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern ActualPost_physicalLocation(element : InstanceSpecification, value : Element) {
	find ActualPost(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ActualPost'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPost'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ActualPost_propertySet(element : InstanceSpecification, value : Element) {
	find ActualPost(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'ActualPost'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPost'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern ActualPost_requiredEnvironment(element : InstanceSpecification, value : Element) {
	find ActualPost(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ActualPost'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualPost'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ActualPost_startBoundaryType(element : InstanceSpecification, value : Element) {
	find ActualPost(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'CompetenceProvider' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype CompetenceProvider.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern CompetenceProvider(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "CompetenceProvider");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'CompetenceProvider'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'CompetenceProvider'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern CompetenceProvider_URI(element : Element, valuespec : LiteralString) {
	find CompetenceProvider(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'CompetenceProvider'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'CompetenceProvider'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern CompetenceProvider_actualPropertySet(element : Element, value : Element) {
	find CompetenceProvider(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'CompetenceProvider'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'CompetenceProvider'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern CompetenceProvider_conformsTo(element : Element, value : Element) {
	find CompetenceProvider(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'CompetenceProvider'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'CompetenceProvider'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern CompetenceProvider_endBoundaryType(element : Element, value : Element) {
	find CompetenceProvider(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'CompetenceProvider'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'CompetenceProvider'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern CompetenceProvider_propertySet(element : Element, value : Element) {
	find CompetenceProvider(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'CompetenceProvider'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'CompetenceProvider'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern CompetenceProvider_startBoundaryType(element : Element, value : Element) {
	find CompetenceProvider(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'FillsPost' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype FillsPost.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern FillsPost(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "FillsPost");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'FillsPost'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'FillsPost'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern FillsPost_URI(element : Dependency, valuespec : LiteralString) {
	find FillsPost(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'FillsPost'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'FillsPost'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern FillsPost_actualPropertySet(element : Dependency, value : Element) {
	find FillsPost(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'FillsPost'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'FillsPost'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern FillsPost_conformsTo(element : Dependency, value : Element) {
	find FillsPost(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'FillsPost'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'FillsPost'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern FillsPost_endBoundaryType(element : Dependency, value : Element) {
	find FillsPost(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'FillsPost'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'FillsPost'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern FillsPost_endDate(element : Dependency, value : Element) {
	find FillsPost(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'FillsPost'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'FillsPost'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern FillsPost_propertySet(element : Dependency, value : Element) {
	find FillsPost(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'FillsPost'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'FillsPost'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern FillsPost_startBoundaryType(element : Dependency, value : Element) {
	find FillsPost(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'FillsPost'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'FillsPost'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern FillsPost_startDate(element : Dependency, value : Element) {
	find FillsPost(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - OperationalElements - Structure - Organizational - Typical

/*
 * Pattern that queries elements with the stereotype 'CompetenceRequirer' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype CompetenceRequirer.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern CompetenceRequirer(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "CompetenceRequirer");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'CompetenceRequirer'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'CompetenceRequirer'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern CompetenceRequirer_URI(element : Element, valuespec : LiteralString) {
	find CompetenceRequirer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'CompetenceRequirer'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'CompetenceRequirer'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern CompetenceRequirer_actualPropertySet(element : Element, value : Element) {
	find CompetenceRequirer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'CompetenceRequirer'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'CompetenceRequirer'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern CompetenceRequirer_conformsTo(element : Element, value : Element) {
	find CompetenceRequirer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'CompetenceRequirer'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'CompetenceRequirer'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern CompetenceRequirer_endBoundaryType(element : Element, value : Element) {
	find CompetenceRequirer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'CompetenceRequirer'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'CompetenceRequirer'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern CompetenceRequirer_propertySet(element : Element, value : Element) {
	find CompetenceRequirer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'CompetenceRequirer'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'CompetenceRequirer'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern CompetenceRequirer_startBoundaryType(element : Element, value : Element) {
	find CompetenceRequirer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Organization' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Organization.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Organization(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Organization");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Organization_URI(element : Class, valuespec : LiteralString) {
	find Organization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern Organization_actsUpon(element : Class, value : Element) {
	find Organization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Organization_actualPropertySet(element : Class, value : Element) {
	find Organization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern Organization_affectedFunctions(element : Class, value : Element) {
	find Organization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern Organization_appliesTo(element : Class, value : Element) {
	find Organization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Organization_conformsTo(element : Class, value : Element) {
	find Organization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Organization_endBoundaryType(element : Class, value : Element) {
	find Organization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern Organization_milestone(element : Class, value : Element) {
	find Organization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern Organization_physicalLocation(element : Class, value : Element) {
	find Organization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Organization_propertySet(element : Class, value : Element) {
	find Organization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern Organization_requiredEnvironment(element : Class, value : Element) {
	find Organization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Organization'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Organization'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Organization_startBoundaryType(element : Class, value : Element) {
	find Organization(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'OrganizationalResource' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype OrganizationalResource.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern OrganizationalResource(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "OrganizationalResource");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OrganizationalResource_URI(element : Class, valuespec : LiteralString) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern OrganizationalResource_actsUpon(element : Class, value : Element) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern OrganizationalResource_actualPropertySet(element : Class, value : Element) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern OrganizationalResource_affectedFunctions(element : Class, value : Element) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern OrganizationalResource_appliesTo(element : Class, value : Element) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OrganizationalResource_conformsTo(element : Class, value : Element) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern OrganizationalResource_endBoundaryType(element : Class, value : Element) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern OrganizationalResource_milestone(element : Class, value : Element) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern OrganizationalResource_physicalLocation(element : Class, value : Element) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern OrganizationalResource_propertySet(element : Class, value : Element) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern OrganizationalResource_requiredEnvironment(element : Class, value : Element) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'OrganizationalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationalResource'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern OrganizationalResource_startBoundaryType(element : Class, value : Element) {
	find OrganizationalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Person' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Person.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Person(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Person");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Person'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Person'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Person_URI(element : Class, valuespec : LiteralString) {
	find Person(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Person'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Person'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Person_actualPropertySet(element : Class, value : Element) {
	find Person(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Person'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Person'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Person_conformsTo(element : Class, value : Element) {
	find Person(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Person'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Person'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Person_endBoundaryType(element : Class, value : Element) {
	find Person(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Person'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Person'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Person_propertySet(element : Class, value : Element) {
	find Person(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Person'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Person'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Person_startBoundaryType(element : Class, value : Element) {
	find Person(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Post' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Post.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Post(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Post");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Post_URI(element : Class, valuespec : LiteralString) {
	find Post(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern Post_actsUpon(element : Class, value : Element) {
	find Post(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Post_actualPropertySet(element : Class, value : Element) {
	find Post(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern Post_affectedFunctions(element : Class, value : Element) {
	find Post(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern Post_appliesTo(element : Class, value : Element) {
	find Post(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Post_conformsTo(element : Class, value : Element) {
	find Post(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Post_endBoundaryType(element : Class, value : Element) {
	find Post(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern Post_milestone(element : Class, value : Element) {
	find Post(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern Post_physicalLocation(element : Class, value : Element) {
	find Post(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Post_propertySet(element : Class, value : Element) {
	find Post(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern Post_requiredEnvironment(element : Class, value : Element) {
	find Post(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Post'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Post'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Post_startBoundaryType(element : Class, value : Element) {
	find Post(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ProvidesCompetence' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype ProvidesCompetence.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ProvidesCompetence(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ProvidesCompetence");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProvidesCompetence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProvidesCompetence'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProvidesCompetence_URI(element : Dependency, valuespec : LiteralString) {
	find ProvidesCompetence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ProvidesCompetence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProvidesCompetence'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ProvidesCompetence_actualPropertySet(element : Dependency, value : Element) {
	find ProvidesCompetence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProvidesCompetence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProvidesCompetence'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProvidesCompetence_conformsTo(element : Dependency, value : Element) {
	find ProvidesCompetence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ProvidesCompetence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProvidesCompetence'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ProvidesCompetence_endBoundaryType(element : Dependency, value : Element) {
	find ProvidesCompetence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ProvidesCompetence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProvidesCompetence'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ProvidesCompetence_propertySet(element : Dependency, value : Element) {
	find ProvidesCompetence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ProvidesCompetence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProvidesCompetence'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ProvidesCompetence_startBoundaryType(element : Dependency, value : Element) {
	find ProvidesCompetence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'universalPropertySet' attribute of elements with the stereotype 'ProvidesCompetence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProvidesCompetence'.
 * value : Element : A value of the attribute 'universalPropertySet'.
 */
pattern ProvidesCompetence_universalPropertySet(element : Dependency, value : Element) {
	find ProvidesCompetence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "universalPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'RequiresCompetence' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype RequiresCompetence.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern RequiresCompetence(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "RequiresCompetence");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'RequiresCompetence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'RequiresCompetence'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern RequiresCompetence_URI(element : Dependency, valuespec : LiteralString) {
	find RequiresCompetence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'RequiresCompetence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'RequiresCompetence'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern RequiresCompetence_actualPropertySet(element : Dependency, value : Element) {
	find RequiresCompetence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'RequiresCompetence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'RequiresCompetence'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern RequiresCompetence_conformsTo(element : Dependency, value : Element) {
	find RequiresCompetence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'RequiresCompetence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'RequiresCompetence'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern RequiresCompetence_endBoundaryType(element : Dependency, value : Element) {
	find RequiresCompetence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'measurementSet' attribute of elements with the stereotype 'RequiresCompetence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'RequiresCompetence'.
 * value : Element : A value of the attribute 'measurementSet'.
 */
pattern RequiresCompetence_measurementSet(element : Dependency, value : Element) {
	find RequiresCompetence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "measurementSet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'RequiresCompetence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'RequiresCompetence'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern RequiresCompetence_propertySet(element : Dependency, value : Element) {
	find RequiresCompetence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'RequiresCompetence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'RequiresCompetence'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern RequiresCompetence_startBoundaryType(element : Dependency, value : Element) {
	find RequiresCompetence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Responsibility' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Responsibility.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Responsibility(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Responsibility");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Responsibility_URI(element : Class, valuespec : LiteralString) {
	find Responsibility(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern Responsibility_actsUpon(element : Class, value : Element) {
	find Responsibility(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Responsibility_actualPropertySet(element : Class, value : Element) {
	find Responsibility(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern Responsibility_affectedFunctions(element : Class, value : Element) {
	find Responsibility(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern Responsibility_appliesTo(element : Class, value : Element) {
	find Responsibility(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Responsibility_conformsTo(element : Class, value : Element) {
	find Responsibility(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Responsibility_endBoundaryType(element : Class, value : Element) {
	find Responsibility(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern Responsibility_milestone(element : Class, value : Element) {
	find Responsibility(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern Responsibility_physicalLocation(element : Class, value : Element) {
	find Responsibility(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Responsibility_propertySet(element : Class, value : Element) {
	find Responsibility(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern Responsibility_requiredEnvironment(element : Class, value : Element) {
	find Responsibility(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Responsibility'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Responsibility'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Responsibility_startBoundaryType(element : Class, value : Element) {
	find Responsibility(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - ServiceElements - Behavior

/*
 * Pattern that queries elements with the stereotype 'ServiceFeature' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Feature' object with the stereotype ServiceFeature.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ServiceFeature(element : Feature, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ServiceFeature");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceFeature'.
 *
 * Parameters:
 * element: 'Feature' object with the stereotype 'ServiceFeature'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceFeature_URI(element : Feature, valuespec : LiteralString) {
	find ServiceFeature(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ServiceFeature'.
 *
 * Parameters:
 * element: 'Feature' object with the stereotype 'ServiceFeature'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ServiceFeature_actualPropertySet(element : Feature, value : Element) {
	find ServiceFeature(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceFeature'.
 *
 * Parameters:
 * element: 'Feature' object with the stereotype 'ServiceFeature'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceFeature_conformsTo(element : Feature, value : Element) {
	find ServiceFeature(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ServiceFeature'.
 *
 * Parameters:
 * element: 'Feature' object with the stereotype 'ServiceFeature'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ServiceFeature_endBoundaryType(element : Feature, value : Element) {
	find ServiceFeature(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ServiceFeature'.
 *
 * Parameters:
 * element: 'Feature' object with the stereotype 'ServiceFeature'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ServiceFeature_propertySet(element : Feature, value : Element) {
	find ServiceFeature(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ServiceFeature'.
 *
 * Parameters:
 * element: 'Feature' object with the stereotype 'ServiceFeature'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ServiceFeature_startBoundaryType(element : Feature, value : Element) {
	find ServiceFeature(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ServiceFunction' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Activity' object with the stereotype ServiceFunction.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ServiceFunction(element : Activity, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ServiceFunction");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceFunction'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ServiceFunction'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceFunction_URI(element : Activity, valuespec : LiteralString) {
	find ServiceFunction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ServiceFunction'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ServiceFunction'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ServiceFunction_actualPropertySet(element : Activity, value : Element) {
	find ServiceFunction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceFunction'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ServiceFunction'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceFunction_conformsTo(element : Activity, value : Element) {
	find ServiceFunction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ServiceFunction'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ServiceFunction'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ServiceFunction_endBoundaryType(element : Activity, value : Element) {
	find ServiceFunction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ServiceFunction'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ServiceFunction'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ServiceFunction_propertySet(element : Activity, value : Element) {
	find ServiceFunction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ServiceFunction'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ServiceFunction'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ServiceFunction_startBoundaryType(element : Activity, value : Element) {
	find ServiceFunction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ServiceFunctionAction' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'CallBehaviorAction' object with the stereotype ServiceFunctionAction.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ServiceFunctionAction(element : CallBehaviorAction, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ServiceFunctionAction");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceFunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ServiceFunctionAction'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceFunctionAction_URI(element : CallBehaviorAction, valuespec : LiteralString) {
	find ServiceFunctionAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ServiceFunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ServiceFunctionAction'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ServiceFunctionAction_actualPropertySet(element : CallBehaviorAction, value : Element) {
	find ServiceFunctionAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceFunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ServiceFunctionAction'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceFunctionAction_conformsTo(element : CallBehaviorAction, value : Element) {
	find ServiceFunctionAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ServiceFunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ServiceFunctionAction'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ServiceFunctionAction_endBoundaryType(element : CallBehaviorAction, value : Element) {
	find ServiceFunctionAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ServiceFunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ServiceFunctionAction'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ServiceFunctionAction_propertySet(element : CallBehaviorAction, value : Element) {
	find ServiceFunctionAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ServiceFunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ServiceFunctionAction'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ServiceFunctionAction_startBoundaryType(element : CallBehaviorAction, value : Element) {
	find ServiceFunctionAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ServiceFunctionEdge' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'ActivityEdge' object with the stereotype ServiceFunctionEdge.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ServiceFunctionEdge(element : ActivityEdge, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ServiceFunctionEdge");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceFunctionEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'ServiceFunctionEdge'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceFunctionEdge_URI(element : ActivityEdge, valuespec : LiteralString) {
	find ServiceFunctionEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ServiceFunctionEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'ServiceFunctionEdge'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ServiceFunctionEdge_actualPropertySet(element : ActivityEdge, value : Element) {
	find ServiceFunctionEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceFunctionEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'ServiceFunctionEdge'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceFunctionEdge_conformsTo(element : ActivityEdge, value : Element) {
	find ServiceFunctionEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ServiceFunctionEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'ServiceFunctionEdge'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ServiceFunctionEdge_endBoundaryType(element : ActivityEdge, value : Element) {
	find ServiceFunctionEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ServiceFunctionEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'ServiceFunctionEdge'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ServiceFunctionEdge_propertySet(element : ActivityEdge, value : Element) {
	find ServiceFunctionEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ServiceFunctionEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'ServiceFunctionEdge'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ServiceFunctionEdge_startBoundaryType(element : ActivityEdge, value : Element) {
	find ServiceFunctionEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ServiceInteraction' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Interaction' object with the stereotype ServiceInteraction.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ServiceInteraction(element : Interaction, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ServiceInteraction");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceInteraction'.
 *
 * Parameters:
 * element: 'Interaction' object with the stereotype 'ServiceInteraction'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceInteraction_URI(element : Interaction, valuespec : LiteralString) {
	find ServiceInteraction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ServiceInteraction'.
 *
 * Parameters:
 * element: 'Interaction' object with the stereotype 'ServiceInteraction'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ServiceInteraction_actualPropertySet(element : Interaction, value : Element) {
	find ServiceInteraction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceInteraction'.
 *
 * Parameters:
 * element: 'Interaction' object with the stereotype 'ServiceInteraction'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceInteraction_conformsTo(element : Interaction, value : Element) {
	find ServiceInteraction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ServiceInteraction'.
 *
 * Parameters:
 * element: 'Interaction' object with the stereotype 'ServiceInteraction'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ServiceInteraction_endBoundaryType(element : Interaction, value : Element) {
	find ServiceInteraction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ServiceInteraction'.
 *
 * Parameters:
 * element: 'Interaction' object with the stereotype 'ServiceInteraction'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ServiceInteraction_propertySet(element : Interaction, value : Element) {
	find ServiceInteraction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ServiceInteraction'.
 *
 * Parameters:
 * element: 'Interaction' object with the stereotype 'ServiceInteraction'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ServiceInteraction_startBoundaryType(element : Interaction, value : Element) {
	find ServiceInteraction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ServiceMessage' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Message' object with the stereotype ServiceMessage.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ServiceMessage(element : Message, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ServiceMessage");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ServiceMessage'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceMessage_URI(element : Message, valuespec : LiteralString) {
	find ServiceMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ServiceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ServiceMessage'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ServiceMessage_actualPropertySet(element : Message, value : Element) {
	find ServiceMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'carries' attribute of elements with the stereotype 'ServiceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ServiceMessage'.
 * value : Element : A value of the attribute 'carries'.
 */
pattern ServiceMessage_carries(element : Message, value : Element) {
	find ServiceMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "carries", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ServiceMessage'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceMessage_conformsTo(element : Message, value : Element) {
	find ServiceMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ServiceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ServiceMessage'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ServiceMessage_endBoundaryType(element : Message, value : Element) {
	find ServiceMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ServiceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ServiceMessage'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ServiceMessage_propertySet(element : Message, value : Element) {
	find ServiceMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ServiceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ServiceMessage'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ServiceMessage_startBoundaryType(element : Message, value : Element) {
	find ServiceMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ServiceMessageHandler' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Reception' object with the stereotype ServiceMessageHandler.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ServiceMessageHandler(element : Reception, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ServiceMessageHandler");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceMessageHandler'.
 *
 * Parameters:
 * element: 'Reception' object with the stereotype 'ServiceMessageHandler'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceMessageHandler_URI(element : Reception, valuespec : LiteralString) {
	find ServiceMessageHandler(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ServiceMessageHandler'.
 *
 * Parameters:
 * element: 'Reception' object with the stereotype 'ServiceMessageHandler'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ServiceMessageHandler_actualPropertySet(element : Reception, value : Element) {
	find ServiceMessageHandler(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceMessageHandler'.
 *
 * Parameters:
 * element: 'Reception' object with the stereotype 'ServiceMessageHandler'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceMessageHandler_conformsTo(element : Reception, value : Element) {
	find ServiceMessageHandler(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ServiceMessageHandler'.
 *
 * Parameters:
 * element: 'Reception' object with the stereotype 'ServiceMessageHandler'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ServiceMessageHandler_endBoundaryType(element : Reception, value : Element) {
	find ServiceMessageHandler(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ServiceMessageHandler'.
 *
 * Parameters:
 * element: 'Reception' object with the stereotype 'ServiceMessageHandler'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ServiceMessageHandler_propertySet(element : Reception, value : Element) {
	find ServiceMessageHandler(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ServiceMessageHandler'.
 *
 * Parameters:
 * element: 'Reception' object with the stereotype 'ServiceMessageHandler'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ServiceMessageHandler_startBoundaryType(element : Reception, value : Element) {
	find ServiceMessageHandler(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ServiceOperation' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Operation' object with the stereotype ServiceOperation.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ServiceOperation(element : Operation, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ServiceOperation");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ServiceOperation'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceOperation_URI(element : Operation, valuespec : LiteralString) {
	find ServiceOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'abstractBehavior' attribute of elements with the stereotype 'ServiceOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ServiceOperation'.
 * value : Activity : A value of the attribute 'abstractBehavior'.
 */
pattern ServiceOperation_abstractBehavior(element : Operation, value : Activity) {
	find ServiceOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "abstractBehavior", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ServiceOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ServiceOperation'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ServiceOperation_actualPropertySet(element : Operation, value : Element) {
	find ServiceOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ServiceOperation'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceOperation_conformsTo(element : Operation, value : Element) {
	find ServiceOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ServiceOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ServiceOperation'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ServiceOperation_endBoundaryType(element : Operation, value : Element) {
	find ServiceOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ServiceOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ServiceOperation'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ServiceOperation_propertySet(element : Operation, value : Element) {
	find ServiceOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ServiceOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ServiceOperation'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ServiceOperation_startBoundaryType(element : Operation, value : Element) {
	find ServiceOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ServiceParameter' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Parameter' object with the stereotype ServiceParameter.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ServiceParameter(element : Parameter, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ServiceParameter");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ServiceParameter'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceParameter_URI(element : Parameter, valuespec : LiteralString) {
	find ServiceParameter(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ServiceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ServiceParameter'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ServiceParameter_actualPropertySet(element : Parameter, value : Element) {
	find ServiceParameter(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ServiceParameter'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceParameter_conformsTo(element : Parameter, value : Element) {
	find ServiceParameter(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ServiceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ServiceParameter'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ServiceParameter_endBoundaryType(element : Parameter, value : Element) {
	find ServiceParameter(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ServiceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ServiceParameter'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ServiceParameter_propertySet(element : Parameter, value : Element) {
	find ServiceParameter(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ServiceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ServiceParameter'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ServiceParameter_startBoundaryType(element : Parameter, value : Element) {
	find ServiceParameter(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ServiceStateMachine' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'StateMachine' object with the stereotype ServiceStateMachine.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ServiceStateMachine(element : StateMachine, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ServiceStateMachine");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceStateMachine'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ServiceStateMachine'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceStateMachine_URI(element : StateMachine, valuespec : LiteralString) {
	find ServiceStateMachine(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ServiceStateMachine'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ServiceStateMachine'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ServiceStateMachine_actualPropertySet(element : StateMachine, value : Element) {
	find ServiceStateMachine(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceStateMachine'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ServiceStateMachine'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceStateMachine_conformsTo(element : StateMachine, value : Element) {
	find ServiceStateMachine(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ServiceStateMachine'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ServiceStateMachine'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ServiceStateMachine_endBoundaryType(element : StateMachine, value : Element) {
	find ServiceStateMachine(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ServiceStateMachine'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ServiceStateMachine'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ServiceStateMachine_propertySet(element : StateMachine, value : Element) {
	find ServiceStateMachine(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ServiceStateMachine'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ServiceStateMachine'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ServiceStateMachine_startBoundaryType(element : StateMachine, value : Element) {
	find ServiceStateMachine(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - ServiceElements - Structure

/*
 * Pattern that queries elements with the stereotype 'AsynchronousMessage' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Signal' object with the stereotype AsynchronousMessage.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern AsynchronousMessage(element : Signal, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "AsynchronousMessage");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'AsynchronousMessage'.
 *
 * Parameters:
 * element: 'Signal' object with the stereotype 'AsynchronousMessage'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern AsynchronousMessage_URI(element : Signal, valuespec : LiteralString) {
	find AsynchronousMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'AsynchronousMessage'.
 *
 * Parameters:
 * element: 'Signal' object with the stereotype 'AsynchronousMessage'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern AsynchronousMessage_actualPropertySet(element : Signal, value : Element) {
	find AsynchronousMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'AsynchronousMessage'.
 *
 * Parameters:
 * element: 'Signal' object with the stereotype 'AsynchronousMessage'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern AsynchronousMessage_conformsTo(element : Signal, value : Element) {
	find AsynchronousMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'AsynchronousMessage'.
 *
 * Parameters:
 * element: 'Signal' object with the stereotype 'AsynchronousMessage'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern AsynchronousMessage_endBoundaryType(element : Signal, value : Element) {
	find AsynchronousMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'AsynchronousMessage'.
 *
 * Parameters:
 * element: 'Signal' object with the stereotype 'AsynchronousMessage'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern AsynchronousMessage_propertySet(element : Signal, value : Element) {
	find AsynchronousMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'AsynchronousMessage'.
 *
 * Parameters:
 * element: 'Signal' object with the stereotype 'AsynchronousMessage'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern AsynchronousMessage_startBoundaryType(element : Signal, value : Element) {
	find AsynchronousMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Request' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Port' object with the stereotype Request.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Request(element : Port, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Request");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Request'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'Request'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Request_URI(element : Port, valuespec : LiteralString) {
	find Request(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Request'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'Request'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Request_actualPropertySet(element : Port, value : Element) {
	find Request(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Request'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'Request'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Request_conformsTo(element : Port, value : Element) {
	find Request(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Request'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'Request'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Request_endBoundaryType(element : Port, value : Element) {
	find Request(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Request'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'Request'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Request_propertySet(element : Port, value : Element) {
	find Request(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'providedByResource' attribute of elements with the stereotype 'Request'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'Request'.
 * value : InstanceSpecification : A value of the attribute 'providedByResource'.
 */
pattern Request_providedByResource(element : Port, value : InstanceSpecification) {
	find Request(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "providedByResource", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Request'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'Request'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Request_startBoundaryType(element : Port, value : Element) {
	find Request(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Service' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Port' object with the stereotype Service.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Service(element : Port, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Service");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Service'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'Service'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Service_URI(element : Port, valuespec : LiteralString) {
	find Service(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Service'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'Service'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Service_actualPropertySet(element : Port, value : Element) {
	find Service(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Service'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'Service'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Service_conformsTo(element : Port, value : Element) {
	find Service(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Service'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'Service'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Service_endBoundaryType(element : Port, value : Element) {
	find Service(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Service'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'Service'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Service_propertySet(element : Port, value : Element) {
	find Service(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'providedByResource' attribute of elements with the stereotype 'Service'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'Service'.
 * value : InstanceSpecification : A value of the attribute 'providedByResource'.
 */
pattern Service_providedByResource(element : Port, value : InstanceSpecification) {
	find Service(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "providedByResource", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Service'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'Service'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Service_startBoundaryType(element : Port, value : Element) {
	find Service(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ServiceAttribute' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ServiceAttribute.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ServiceAttribute(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ServiceAttribute");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceAttribute'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ServiceAttribute'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceAttribute_URI(element : Property, valuespec : LiteralString) {
	find ServiceAttribute(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ServiceAttribute'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ServiceAttribute'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ServiceAttribute_actualPropertySet(element : Property, value : Element) {
	find ServiceAttribute(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceAttribute'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ServiceAttribute'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceAttribute_conformsTo(element : Property, value : Element) {
	find ServiceAttribute(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ServiceAttribute'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ServiceAttribute'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ServiceAttribute_endBoundaryType(element : Property, value : Element) {
	find ServiceAttribute(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'maxValue' attribute of elements with the stereotype 'ServiceAttribute'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ServiceAttribute'.
 * valuespec : LiteralString : A value of the attribute 'maxValue'.
 */
pattern ServiceAttribute_maxValue(element : Property, valuespec : LiteralString) {
	find ServiceAttribute(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "maxValue", valuespec);
}
/*
 * Pattern that queries the 'minValue' attribute of elements with the stereotype 'ServiceAttribute'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ServiceAttribute'.
 * valuespec : LiteralString : A value of the attribute 'minValue'.
 */
pattern ServiceAttribute_minValue(element : Property, valuespec : LiteralString) {
	find ServiceAttribute(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "minValue", valuespec);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ServiceAttribute'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ServiceAttribute'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ServiceAttribute_propertySet(element : Property, value : Element) {
	find ServiceAttribute(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ServiceAttribute'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ServiceAttribute'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ServiceAttribute_startBoundaryType(element : Property, value : Element) {
	find ServiceAttribute(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ServiceInterface' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype ServiceInterface.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ServiceInterface(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ServiceInterface");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceInterface'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceInterface'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceInterface_URI(element : Class, valuespec : LiteralString) {
	find ServiceInterface(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ServiceInterface'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceInterface'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ServiceInterface_actualPropertySet(element : Class, value : Element) {
	find ServiceInterface(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'ServiceInterface'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceInterface'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern ServiceInterface_appliesTo(element : Class, value : Element) {
	find ServiceInterface(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceInterface'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceInterface'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceInterface_conformsTo(element : Class, value : Element) {
	find ServiceInterface(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ServiceInterface'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceInterface'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ServiceInterface_endBoundaryType(element : Class, value : Element) {
	find ServiceInterface(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ServiceInterface'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceInterface'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ServiceInterface_propertySet(element : Class, value : Element) {
	find ServiceInterface(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'serviceInteraction' attribute of elements with the stereotype 'ServiceInterface'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceInterface'.
 * value : Element : A value of the attribute 'serviceInteraction'.
 */
pattern ServiceInterface_serviceInteraction(element : Class, value : Element) {
	find ServiceInterface(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "serviceInteraction", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ServiceInterface'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceInterface'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ServiceInterface_startBoundaryType(element : Class, value : Element) {
	find ServiceInterface(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ServiceLevelValue' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Slot' object with the stereotype ServiceLevelValue.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ServiceLevelValue(element : Slot, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ServiceLevelValue");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceLevelValue'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ServiceLevelValue'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceLevelValue_URI(element : Slot, valuespec : LiteralString) {
	find ServiceLevelValue(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ServiceLevelValue'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ServiceLevelValue'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ServiceLevelValue_actualPropertySet(element : Slot, value : Element) {
	find ServiceLevelValue(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceLevelValue'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ServiceLevelValue'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceLevelValue_conformsTo(element : Slot, value : Element) {
	find ServiceLevelValue(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ServiceLevelValue'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ServiceLevelValue'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ServiceLevelValue_endBoundaryType(element : Slot, value : Element) {
	find ServiceLevelValue(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ServiceLevelValue'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ServiceLevelValue'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern ServiceLevelValue_endDate(element : Slot, value : Element) {
	find ServiceLevelValue(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'intention' attribute of elements with the stereotype 'ServiceLevelValue'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ServiceLevelValue'.
 * value : EnumerationLiteral : A value of the attribute 'intention'.
 */
pattern ServiceLevelValue_intention(element : Slot, value : EnumerationLiteral) {
	find ServiceLevelValue(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "intention", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ServiceLevelValue'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ServiceLevelValue'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ServiceLevelValue_propertySet(element : Slot, value : Element) {
	find ServiceLevelValue(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ServiceLevelValue'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ServiceLevelValue'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ServiceLevelValue_startBoundaryType(element : Slot, value : Element) {
	find ServiceLevelValue(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ServiceLevelValue'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ServiceLevelValue'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern ServiceLevelValue_startDate(element : Slot, value : Element) {
	find ServiceLevelValue(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ServiceLevelValueSet' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ServiceLevelValueSet.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ServiceLevelValueSet(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ServiceLevelValueSet");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceLevelValueSet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ServiceLevelValueSet'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceLevelValueSet_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ServiceLevelValueSet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ServiceLevelValueSet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ServiceLevelValueSet'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ServiceLevelValueSet_actualPropertySet(element : InstanceSpecification, value : Element) {
	find ServiceLevelValueSet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'ServiceLevelValueSet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ServiceLevelValueSet'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern ServiceLevelValueSet_appliesTo(element : InstanceSpecification, value : Element) {
	find ServiceLevelValueSet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceLevelValueSet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ServiceLevelValueSet'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceLevelValueSet_conformsTo(element : InstanceSpecification, value : Element) {
	find ServiceLevelValueSet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ServiceLevelValueSet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ServiceLevelValueSet'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ServiceLevelValueSet_endBoundaryType(element : InstanceSpecification, value : Element) {
	find ServiceLevelValueSet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ServiceLevelValueSet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ServiceLevelValueSet'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ServiceLevelValueSet_propertySet(element : InstanceSpecification, value : Element) {
	find ServiceLevelValueSet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'resourceBoundary' attribute of elements with the stereotype 'ServiceLevelValueSet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ServiceLevelValueSet'.
 * value : Element : A value of the attribute 'resourceBoundary'.
 */
pattern ServiceLevelValueSet_resourceBoundary(element : InstanceSpecification, value : Element) {
	find ServiceLevelValueSet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "resourceBoundary", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ServiceLevelValueSet'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ServiceLevelValueSet'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ServiceLevelValueSet_startBoundaryType(element : InstanceSpecification, value : Element) {
	find ServiceLevelValueSet(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ServicePolicy' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Constraint' object with the stereotype ServicePolicy.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ServicePolicy(element : Constraint, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ServicePolicy");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServicePolicy'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ServicePolicy'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServicePolicy_URI(element : Constraint, valuespec : LiteralString) {
	find ServicePolicy(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ServicePolicy'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ServicePolicy'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ServicePolicy_actualPropertySet(element : Constraint, value : Element) {
	find ServicePolicy(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServicePolicy'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ServicePolicy'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServicePolicy_conformsTo(element : Constraint, value : Element) {
	find ServicePolicy(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ServicePolicy'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ServicePolicy'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ServicePolicy_endBoundaryType(element : Constraint, value : Element) {
	find ServicePolicy(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ServicePolicy'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ServicePolicy'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ServicePolicy_propertySet(element : Constraint, value : Element) {
	find ServicePolicy(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'ruleKind' attribute of elements with the stereotype 'ServicePolicy'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ServicePolicy'.
 * value : EnumerationLiteral : A value of the attribute 'ruleKind'.
 */
pattern ServicePolicy_ruleKind(element : Constraint, value : EnumerationLiteral) {
	find ServicePolicy(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "ruleKind", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ServicePolicy'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ServicePolicy'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ServicePolicy_startBoundaryType(element : Constraint, value : Element) {
	find ServicePolicy(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ServicePort' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype ServicePort.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ServicePort(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ServicePort");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServicePort'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ServicePort'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServicePort_URI(element : Element, valuespec : LiteralString) {
	find ServicePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ServicePort'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ServicePort'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ServicePort_actualPropertySet(element : Element, value : Element) {
	find ServicePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServicePort'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ServicePort'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServicePort_conformsTo(element : Element, value : Element) {
	find ServicePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ServicePort'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ServicePort'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ServicePort_endBoundaryType(element : Element, value : Element) {
	find ServicePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ServicePort'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ServicePort'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ServicePort_propertySet(element : Element, value : Element) {
	find ServicePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'providedByResource' attribute of elements with the stereotype 'ServicePort'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ServicePort'.
 * value : InstanceSpecification : A value of the attribute 'providedByResource'.
 */
pattern ServicePort_providedByResource(element : Element, value : InstanceSpecification) {
	find ServicePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "providedByResource", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ServicePort'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ServicePort'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ServicePort_startBoundaryType(element : Element, value : Element) {
	find ServicePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - StrategicElements

/*
 * Pattern that queries elements with the stereotype 'Capability' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Capability.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Capability(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Capability");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Capability'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Capability'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Capability_URI(element : Class, valuespec : LiteralString) {
	find Capability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Capability'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Capability'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Capability_actualPropertySet(element : Class, value : Element) {
	find Capability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'Capability'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Capability'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern Capability_appliesTo(element : Class, value : Element) {
	find Capability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Capability'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Capability'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Capability_conformsTo(element : Class, value : Element) {
	find Capability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Capability'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Capability'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Capability_endBoundaryType(element : Class, value : Element) {
	find Capability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Capability'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Capability'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Capability_propertySet(element : Class, value : Element) {
	find Capability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Capability'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Capability'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Capability_startBoundaryType(element : Class, value : Element) {
	find Capability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'CapabilityProperty' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype CapabilityProperty.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern CapabilityProperty(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "CapabilityProperty");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'CapabilityProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'CapabilityProperty'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern CapabilityProperty_URI(element : Property, valuespec : LiteralString) {
	find CapabilityProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'CapabilityProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'CapabilityProperty'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern CapabilityProperty_actualPropertySet(element : Property, value : Element) {
	find CapabilityProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'CapabilityProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'CapabilityProperty'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern CapabilityProperty_conformsTo(element : Property, value : Element) {
	find CapabilityProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'CapabilityProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'CapabilityProperty'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern CapabilityProperty_endBoundaryType(element : Property, value : Element) {
	find CapabilityProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'maxValue' attribute of elements with the stereotype 'CapabilityProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'CapabilityProperty'.
 * valuespec : LiteralString : A value of the attribute 'maxValue'.
 */
pattern CapabilityProperty_maxValue(element : Property, valuespec : LiteralString) {
	find CapabilityProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "maxValue", valuespec);
}
/*
 * Pattern that queries the 'minValue' attribute of elements with the stereotype 'CapabilityProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'CapabilityProperty'.
 * valuespec : LiteralString : A value of the attribute 'minValue'.
 */
pattern CapabilityProperty_minValue(element : Property, valuespec : LiteralString) {
	find CapabilityProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "minValue", valuespec);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'CapabilityProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'CapabilityProperty'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern CapabilityProperty_propertySet(element : Property, value : Element) {
	find CapabilityProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'CapabilityProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'CapabilityProperty'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern CapabilityProperty_startBoundaryType(element : Property, value : Element) {
	find CapabilityProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'DesiredState' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype DesiredState.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern DesiredState(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "DesiredState");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'DesiredState'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'DesiredState'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern DesiredState_URI(element : Element, valuespec : LiteralString) {
	find DesiredState(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'DesiredState'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'DesiredState'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern DesiredState_actualPropertySet(element : Element, value : Element) {
	find DesiredState(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'DesiredState'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'DesiredState'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern DesiredState_conformsTo(element : Element, value : Element) {
	find DesiredState(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'DesiredState'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'DesiredState'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern DesiredState_endBoundaryType(element : Element, value : Element) {
	find DesiredState(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'DesiredState'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'DesiredState'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern DesiredState_propertySet(element : Element, value : Element) {
	find DesiredState(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'DesiredState'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'DesiredState'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern DesiredState_startBoundaryType(element : Element, value : Element) {
	find DesiredState(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Desirer' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype Desirer.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Desirer(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Desirer");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Desirer'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Desirer'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Desirer_URI(element : Element, valuespec : LiteralString) {
	find Desirer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Desirer'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Desirer'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Desirer_actualPropertySet(element : Element, value : Element) {
	find Desirer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Desirer'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Desirer'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Desirer_conformsTo(element : Element, value : Element) {
	find Desirer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Desirer'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Desirer'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Desirer_endBoundaryType(element : Element, value : Element) {
	find Desirer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Desirer'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Desirer'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Desirer_propertySet(element : Element, value : Element) {
	find Desirer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Desirer'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'Desirer'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Desirer_startBoundaryType(element : Element, value : Element) {
	find Desirer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'EnterpriseGoal' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype EnterpriseGoal.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern EnterpriseGoal(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "EnterpriseGoal");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern EnterpriseGoal_URI(element : Class, valuespec : LiteralString) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern EnterpriseGoal_actualPropertySet(element : Class, value : Element) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'benefits' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * valuespec : LiteralString : A value of the attribute 'benefits'.
 */
pattern EnterpriseGoal_benefits(element : Class, valuespec : LiteralString) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "benefits", valuespec);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern EnterpriseGoal_conformsTo(element : Class, value : Element) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern EnterpriseGoal_endBoundaryType(element : Class, value : Element) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'enterprisePhase' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * value : Class : A value of the attribute 'enterprisePhase'.
 */
pattern EnterpriseGoal_enterprisePhase(element : Class, value : Class) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "enterprisePhase", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern EnterpriseGoal_propertySet(element : Class, value : Element) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'EnterpriseGoal'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseGoal'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern EnterpriseGoal_startBoundaryType(element : Class, value : Element) {
	find EnterpriseGoal(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'EnterprisePhase' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype EnterprisePhase.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern EnterprisePhase(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "EnterprisePhase");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'EnterprisePhase'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterprisePhase'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern EnterprisePhase_URI(element : Class, valuespec : LiteralString) {
	find EnterprisePhase(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'EnterprisePhase'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterprisePhase'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern EnterprisePhase_actualPropertySet(element : Class, value : Element) {
	find EnterprisePhase(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'EnterprisePhase'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterprisePhase'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern EnterprisePhase_conformsTo(element : Class, value : Element) {
	find EnterprisePhase(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'describedBy' attribute of elements with the stereotype 'EnterprisePhase'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterprisePhase'.
 * value : Element : A value of the attribute 'describedBy'.
 */
pattern EnterprisePhase_describedBy(element : Class, value : Element) {
	find EnterprisePhase(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "describedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'EnterprisePhase'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterprisePhase'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern EnterprisePhase_endBoundaryType(element : Class, value : Element) {
	find EnterprisePhase(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'EnterprisePhase'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterprisePhase'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern EnterprisePhase_endDate(element : Class, value : Element) {
	find EnterprisePhase(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'fulfills' attribute of elements with the stereotype 'EnterprisePhase'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterprisePhase'.
 * value : Element : A value of the attribute 'fulfills'.
 */
pattern EnterprisePhase_fulfills(element : Class, value : Element) {
	find EnterprisePhase(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "fulfills", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'goals' attribute of elements with the stereotype 'EnterprisePhase'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterprisePhase'.
 * value : Class : A value of the attribute 'goals'.
 */
pattern EnterprisePhase_goals(element : Class, value : Class) {
	find EnterprisePhase(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "goals", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'EnterprisePhase'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterprisePhase'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern EnterprisePhase_propertySet(element : Class, value : Element) {
	find EnterprisePhase(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'EnterprisePhase'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterprisePhase'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern EnterprisePhase_startBoundaryType(element : Class, value : Element) {
	find EnterprisePhase(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'EnterprisePhase'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterprisePhase'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern EnterprisePhase_startDate(element : Class, value : Element) {
	find EnterprisePhase(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'statementTasks' attribute of elements with the stereotype 'EnterprisePhase'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterprisePhase'.
 * value : Element : A value of the attribute 'statementTasks'.
 */
pattern EnterprisePhase_statementTasks(element : Class, value : Element) {
	find EnterprisePhase(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "statementTasks", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'visions' attribute of elements with the stereotype 'EnterprisePhase'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterprisePhase'.
 * value : Class : A value of the attribute 'visions'.
 */
pattern EnterprisePhase_visions(element : Class, value : Class) {
	find EnterprisePhase(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "visions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'EnterpriseVision' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype EnterpriseVision.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern EnterpriseVision(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "EnterpriseVision");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'EnterpriseVision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseVision'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern EnterpriseVision_URI(element : Class, valuespec : LiteralString) {
	find EnterpriseVision(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'EnterpriseVision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseVision'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern EnterpriseVision_actualPropertySet(element : Class, value : Element) {
	find EnterpriseVision(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'EnterpriseVision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseVision'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern EnterpriseVision_conformsTo(element : Class, value : Element) {
	find EnterpriseVision(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'EnterpriseVision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseVision'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern EnterpriseVision_endBoundaryType(element : Class, value : Element) {
	find EnterpriseVision(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'enterprisePhase' attribute of elements with the stereotype 'EnterpriseVision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseVision'.
 * value : Class : A value of the attribute 'enterprisePhase'.
 */
pattern EnterpriseVision_enterprisePhase(element : Class, value : Class) {
	find EnterpriseVision(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "enterprisePhase", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'EnterpriseVision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseVision'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern EnterpriseVision_propertySet(element : Class, value : Element) {
	find EnterpriseVision(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'EnterpriseVision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseVision'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern EnterpriseVision_startBoundaryType(element : Class, value : Element) {
	find EnterpriseVision(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'statement' attribute of elements with the stereotype 'EnterpriseVision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EnterpriseVision'.
 * value : Comment : A value of the attribute 'statement'.
 */
pattern EnterpriseVision_statement(element : Class, value : Comment) {
	find EnterpriseVision(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "statement", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Exhibits' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype Exhibits.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Exhibits(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Exhibits");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Exhibits'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Exhibits'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Exhibits_URI(element : Dependency, valuespec : LiteralString) {
	find Exhibits(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Exhibits'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Exhibits'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Exhibits_actualPropertySet(element : Dependency, value : Element) {
	find Exhibits(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Exhibits'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Exhibits'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Exhibits_conformsTo(element : Dependency, value : Element) {
	find Exhibits(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Exhibits'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Exhibits'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Exhibits_endBoundaryType(element : Dependency, value : Element) {
	find Exhibits(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'environmentalConditions' attribute of elements with the stereotype 'Exhibits'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Exhibits'.
 * value : Element : A value of the attribute 'environmentalConditions'.
 */
pattern Exhibits_environmentalConditions(element : Dependency, value : Element) {
	find Exhibits(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "environmentalConditions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Exhibits'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Exhibits'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Exhibits_propertySet(element : Dependency, value : Element) {
	find Exhibits(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Exhibits'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Exhibits'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Exhibits_startBoundaryType(element : Dependency, value : Element) {
	find Exhibits(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'universalCapabilitySet' attribute of elements with the stereotype 'Exhibits'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Exhibits'.
 * value : Element : A value of the attribute 'universalCapabilitySet'.
 */
pattern Exhibits_universalCapabilitySet(element : Dependency, value : Element) {
	find Exhibits(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "universalCapabilitySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'MapsToCapability' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype MapsToCapability.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern MapsToCapability(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "MapsToCapability");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'MapsToCapability'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'MapsToCapability'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern MapsToCapability_URI(element : Dependency, valuespec : LiteralString) {
	find MapsToCapability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'MapsToCapability'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'MapsToCapability'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern MapsToCapability_actualPropertySet(element : Dependency, value : Element) {
	find MapsToCapability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'MapsToCapability'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'MapsToCapability'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern MapsToCapability_conformsTo(element : Dependency, value : Element) {
	find MapsToCapability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'MapsToCapability'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'MapsToCapability'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern MapsToCapability_endBoundaryType(element : Dependency, value : Element) {
	find MapsToCapability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'MapsToCapability'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'MapsToCapability'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern MapsToCapability_propertySet(element : Dependency, value : Element) {
	find MapsToCapability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'MapsToCapability'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'MapsToCapability'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern MapsToCapability_startBoundaryType(element : Dependency, value : Element) {
	find MapsToCapability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'StructuralPart' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype StructuralPart.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern StructuralPart(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "StructuralPart");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'StructuralPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'StructuralPart'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern StructuralPart_URI(element : Property, valuespec : LiteralString) {
	find StructuralPart(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'StructuralPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'StructuralPart'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern StructuralPart_actualPropertySet(element : Property, value : Element) {
	find StructuralPart(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'StructuralPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'StructuralPart'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern StructuralPart_conformsTo(element : Property, value : Element) {
	find StructuralPart(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'StructuralPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'StructuralPart'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern StructuralPart_endBoundaryType(element : Property, value : Element) {
	find StructuralPart(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'StructuralPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'StructuralPart'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern StructuralPart_propertySet(element : Property, value : Element) {
	find StructuralPart(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'StructuralPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'StructuralPart'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern StructuralPart_startBoundaryType(element : Property, value : Element) {
	find StructuralPart(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'TemporalPart' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype TemporalPart.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern TemporalPart(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "TemporalPart");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'TemporalPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'TemporalPart'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern TemporalPart_URI(element : Property, valuespec : LiteralString) {
	find TemporalPart(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'TemporalPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'TemporalPart'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern TemporalPart_actualPropertySet(element : Property, value : Element) {
	find TemporalPart(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'TemporalPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'TemporalPart'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern TemporalPart_conformsTo(element : Property, value : Element) {
	find TemporalPart(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'TemporalPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'TemporalPart'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern TemporalPart_endBoundaryType(element : Property, value : Element) {
	find TemporalPart(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'TemporalPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'TemporalPart'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern TemporalPart_propertySet(element : Property, value : Element) {
	find TemporalPart(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'TemporalPart'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'TemporalPart'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern TemporalPart_startBoundaryType(element : Property, value : Element) {
	find TemporalPart(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'VisionStatement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Comment' object with the stereotype VisionStatement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern VisionStatement(element : Comment, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "VisionStatement");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'VisionStatement'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'VisionStatement'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern VisionStatement_URI(element : Comment, valuespec : LiteralString) {
	find VisionStatement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'VisionStatement'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'VisionStatement'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern VisionStatement_actualPropertySet(element : Comment, value : Element) {
	find VisionStatement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'VisionStatement'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'VisionStatement'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern VisionStatement_conformsTo(element : Comment, value : Element) {
	find VisionStatement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'VisionStatement'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'VisionStatement'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern VisionStatement_endBoundaryType(element : Comment, value : Element) {
	find VisionStatement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'VisionStatement'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'VisionStatement'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern VisionStatement_propertySet(element : Comment, value : Element) {
	find VisionStatement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'VisionStatement'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'VisionStatement'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern VisionStatement_startBoundaryType(element : Comment, value : Element) {
	find VisionStatement(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - SystemsElements - Behavior

/*
 * Pattern that queries elements with the stereotype 'Function' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Activity' object with the stereotype Function.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Function(element : Activity, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Function");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Function'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Function'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Function_URI(element : Activity, valuespec : LiteralString) {
	find Function(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'activityPerformableUnderCondition' attribute of elements with the stereotype 'Function'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Function'.
 * value : Element : A value of the attribute 'activityPerformableUnderCondition'.
 */
pattern Function_activityPerformableUnderCondition(element : Activity, value : Element) {
	find Function(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "activityPerformableUnderCondition", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Function'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Function'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Function_actualPropertySet(element : Activity, value : Element) {
	find Function(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Function'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Function'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Function_conformsTo(element : Activity, value : Element) {
	find Function(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Function'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Function'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Function_endBoundaryType(element : Activity, value : Element) {
	find Function(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Function'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Function'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Function_propertySet(element : Activity, value : Element) {
	find Function(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'realizedBy' attribute of elements with the stereotype 'Function'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Function'.
 * value : Operation : A value of the attribute 'realizedBy'.
 */
pattern Function_realizedBy(element : Activity, value : Operation) {
	find Function(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "realizedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Function'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Function'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Function_startBoundaryType(element : Activity, value : Element) {
	find Function(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'subject' attribute of elements with the stereotype 'Function'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Function'.
 * value : Element : A value of the attribute 'subject'.
 */
pattern Function_subject(element : Activity, value : Element) {
	find Function(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "subject", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'FunctionAction' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'CallBehaviorAction' object with the stereotype FunctionAction.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern FunctionAction(element : CallBehaviorAction, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "FunctionAction");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'FunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'FunctionAction'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern FunctionAction_URI(element : CallBehaviorAction, valuespec : LiteralString) {
	find FunctionAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'FunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'FunctionAction'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern FunctionAction_actualPropertySet(element : CallBehaviorAction, value : Element) {
	find FunctionAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'FunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'FunctionAction'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern FunctionAction_conformsTo(element : CallBehaviorAction, value : Element) {
	find FunctionAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'FunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'FunctionAction'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern FunctionAction_endBoundaryType(element : CallBehaviorAction, value : Element) {
	find FunctionAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'FunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'FunctionAction'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern FunctionAction_propertySet(element : CallBehaviorAction, value : Element) {
	find FunctionAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'FunctionAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'FunctionAction'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern FunctionAction_startBoundaryType(element : CallBehaviorAction, value : Element) {
	find FunctionAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'FunctionEdge' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'ActivityEdge' object with the stereotype FunctionEdge.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern FunctionEdge(element : ActivityEdge, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "FunctionEdge");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'FunctionEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'FunctionEdge'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern FunctionEdge_URI(element : ActivityEdge, valuespec : LiteralString) {
	find FunctionEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'FunctionEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'FunctionEdge'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern FunctionEdge_actualPropertySet(element : ActivityEdge, value : Element) {
	find FunctionEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'carriedItem' attribute of elements with the stereotype 'FunctionEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'FunctionEdge'.
 * value : Element : A value of the attribute 'carriedItem'.
 */
pattern FunctionEdge_carriedItem(element : ActivityEdge, value : Element) {
	find FunctionEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "carriedItem", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'FunctionEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'FunctionEdge'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern FunctionEdge_conformsTo(element : ActivityEdge, value : Element) {
	find FunctionEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'FunctionEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'FunctionEdge'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern FunctionEdge_endBoundaryType(element : ActivityEdge, value : Element) {
	find FunctionEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'FunctionEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'FunctionEdge'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern FunctionEdge_propertySet(element : ActivityEdge, value : Element) {
	find FunctionEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'FunctionEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'FunctionEdge'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern FunctionEdge_startBoundaryType(element : ActivityEdge, value : Element) {
	find FunctionEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ResourceEventTrace' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Interaction' object with the stereotype ResourceEventTrace.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ResourceEventTrace(element : Interaction, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ResourceEventTrace");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceEventTrace'.
 *
 * Parameters:
 * element: 'Interaction' object with the stereotype 'ResourceEventTrace'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceEventTrace_URI(element : Interaction, valuespec : LiteralString) {
	find ResourceEventTrace(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ResourceEventTrace'.
 *
 * Parameters:
 * element: 'Interaction' object with the stereotype 'ResourceEventTrace'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ResourceEventTrace_actualPropertySet(element : Interaction, value : Element) {
	find ResourceEventTrace(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceEventTrace'.
 *
 * Parameters:
 * element: 'Interaction' object with the stereotype 'ResourceEventTrace'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceEventTrace_conformsTo(element : Interaction, value : Element) {
	find ResourceEventTrace(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ResourceEventTrace'.
 *
 * Parameters:
 * element: 'Interaction' object with the stereotype 'ResourceEventTrace'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ResourceEventTrace_endBoundaryType(element : Interaction, value : Element) {
	find ResourceEventTrace(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ResourceEventTrace'.
 *
 * Parameters:
 * element: 'Interaction' object with the stereotype 'ResourceEventTrace'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ResourceEventTrace_propertySet(element : Interaction, value : Element) {
	find ResourceEventTrace(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ResourceEventTrace'.
 *
 * Parameters:
 * element: 'Interaction' object with the stereotype 'ResourceEventTrace'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ResourceEventTrace_startBoundaryType(element : Interaction, value : Element) {
	find ResourceEventTrace(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ResourceMessage' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Message' object with the stereotype ResourceMessage.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ResourceMessage(element : Message, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ResourceMessage");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ResourceMessage'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceMessage_URI(element : Message, valuespec : LiteralString) {
	find ResourceMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ResourceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ResourceMessage'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ResourceMessage_actualPropertySet(element : Message, value : Element) {
	find ResourceMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'carries' attribute of elements with the stereotype 'ResourceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ResourceMessage'.
 * value : Element : A value of the attribute 'carries'.
 */
pattern ResourceMessage_carries(element : Message, value : Element) {
	find ResourceMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "carries", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ResourceMessage'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceMessage_conformsTo(element : Message, value : Element) {
	find ResourceMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ResourceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ResourceMessage'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ResourceMessage_endBoundaryType(element : Message, value : Element) {
	find ResourceMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ResourceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ResourceMessage'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ResourceMessage_propertySet(element : Message, value : Element) {
	find ResourceMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ResourceMessage'.
 *
 * Parameters:
 * element: 'Message' object with the stereotype 'ResourceMessage'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ResourceMessage_startBoundaryType(element : Message, value : Element) {
	find ResourceMessage(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ResourceOperation' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Operation' object with the stereotype ResourceOperation.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ResourceOperation(element : Operation, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ResourceOperation");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ResourceOperation'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceOperation_URI(element : Operation, valuespec : LiteralString) {
	find ResourceOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ResourceOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ResourceOperation'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ResourceOperation_actualPropertySet(element : Operation, value : Element) {
	find ResourceOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ResourceOperation'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceOperation_conformsTo(element : Operation, value : Element) {
	find ResourceOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ResourceOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ResourceOperation'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ResourceOperation_endBoundaryType(element : Operation, value : Element) {
	find ResourceOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ResourceOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ResourceOperation'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ResourceOperation_propertySet(element : Operation, value : Element) {
	find ResourceOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'realizes' attribute of elements with the stereotype 'ResourceOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ResourceOperation'.
 * value : Activity : A value of the attribute 'realizes'.
 */
pattern ResourceOperation_realizes(element : Operation, value : Activity) {
	find ResourceOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "realizes", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ResourceOperation'.
 *
 * Parameters:
 * element: 'Operation' object with the stereotype 'ResourceOperation'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ResourceOperation_startBoundaryType(element : Operation, value : Element) {
	find ResourceOperation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ResourceParameter' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Parameter' object with the stereotype ResourceParameter.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ResourceParameter(element : Parameter, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ResourceParameter");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ResourceParameter'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceParameter_URI(element : Parameter, valuespec : LiteralString) {
	find ResourceParameter(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ResourceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ResourceParameter'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ResourceParameter_actualPropertySet(element : Parameter, value : Element) {
	find ResourceParameter(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ResourceParameter'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceParameter_conformsTo(element : Parameter, value : Element) {
	find ResourceParameter(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ResourceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ResourceParameter'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ResourceParameter_endBoundaryType(element : Parameter, value : Element) {
	find ResourceParameter(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ResourceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ResourceParameter'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ResourceParameter_propertySet(element : Parameter, value : Element) {
	find ResourceParameter(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ResourceParameter'.
 *
 * Parameters:
 * element: 'Parameter' object with the stereotype 'ResourceParameter'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ResourceParameter_startBoundaryType(element : Parameter, value : Element) {
	find ResourceParameter(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ResourceState' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'State' object with the stereotype ResourceState.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ResourceState(element : State, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ResourceState");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceState'.
 *
 * Parameters:
 * element: 'State' object with the stereotype 'ResourceState'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceState_URI(element : State, valuespec : LiteralString) {
	find ResourceState(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ResourceState'.
 *
 * Parameters:
 * element: 'State' object with the stereotype 'ResourceState'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ResourceState_actualPropertySet(element : State, value : Element) {
	find ResourceState(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceState'.
 *
 * Parameters:
 * element: 'State' object with the stereotype 'ResourceState'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceState_conformsTo(element : State, value : Element) {
	find ResourceState(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ResourceState'.
 *
 * Parameters:
 * element: 'State' object with the stereotype 'ResourceState'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ResourceState_endBoundaryType(element : State, value : Element) {
	find ResourceState(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ResourceState'.
 *
 * Parameters:
 * element: 'State' object with the stereotype 'ResourceState'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ResourceState_propertySet(element : State, value : Element) {
	find ResourceState(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ResourceState'.
 *
 * Parameters:
 * element: 'State' object with the stereotype 'ResourceState'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ResourceState_startBoundaryType(element : State, value : Element) {
	find ResourceState(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ResourceStateMachine' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'StateMachine' object with the stereotype ResourceStateMachine.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ResourceStateMachine(element : StateMachine, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ResourceStateMachine");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceStateMachine'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ResourceStateMachine'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceStateMachine_URI(element : StateMachine, valuespec : LiteralString) {
	find ResourceStateMachine(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ResourceStateMachine'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ResourceStateMachine'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ResourceStateMachine_actualPropertySet(element : StateMachine, value : Element) {
	find ResourceStateMachine(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceStateMachine'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ResourceStateMachine'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceStateMachine_conformsTo(element : StateMachine, value : Element) {
	find ResourceStateMachine(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ResourceStateMachine'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ResourceStateMachine'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ResourceStateMachine_endBoundaryType(element : StateMachine, value : Element) {
	find ResourceStateMachine(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ResourceStateMachine'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ResourceStateMachine'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ResourceStateMachine_propertySet(element : StateMachine, value : Element) {
	find ResourceStateMachine(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ResourceStateMachine'.
 *
 * Parameters:
 * element: 'StateMachine' object with the stereotype 'ResourceStateMachine'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ResourceStateMachine_startBoundaryType(element : StateMachine, value : Element) {
	find ResourceStateMachine(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - SystemsElements - Data

/*
 * Pattern that queries elements with the stereotype 'DataModel' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype DataModel.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern DataModel(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "DataModel");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'DataModel'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'DataModel'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern DataModel_URI(element : Element, valuespec : LiteralString) {
	find DataModel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'DataModel'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'DataModel'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern DataModel_actualPropertySet(element : Element, value : Element) {
	find DataModel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'DataModel'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'DataModel'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern DataModel_conformsTo(element : Element, value : Element) {
	find DataModel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'DataModel'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'DataModel'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern DataModel_endBoundaryType(element : Element, value : Element) {
	find DataModel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'DataModel'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'DataModel'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern DataModel_propertySet(element : Element, value : Element) {
	find DataModel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'DataModel'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'DataModel'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern DataModel_startBoundaryType(element : Element, value : Element) {
	find DataModel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'PhysicalDataModel' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Package' object with the stereotype PhysicalDataModel.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern PhysicalDataModel(element : Package, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "PhysicalDataModel");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'PhysicalDataModel'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'PhysicalDataModel'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern PhysicalDataModel_URI(element : Package, valuespec : LiteralString) {
	find PhysicalDataModel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'PhysicalDataModel'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'PhysicalDataModel'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern PhysicalDataModel_actualPropertySet(element : Package, value : Element) {
	find PhysicalDataModel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'PhysicalDataModel'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'PhysicalDataModel'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern PhysicalDataModel_conformsTo(element : Package, value : Element) {
	find PhysicalDataModel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'PhysicalDataModel'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'PhysicalDataModel'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern PhysicalDataModel_endBoundaryType(element : Package, value : Element) {
	find PhysicalDataModel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalDataModelType' attribute of elements with the stereotype 'PhysicalDataModel'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'PhysicalDataModel'.
 * valuespec : LiteralString : A value of the attribute 'physicalDataModelType'.
 */
pattern PhysicalDataModel_physicalDataModelType(element : Package, valuespec : LiteralString) {
	find PhysicalDataModel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalDataModelType", valuespec);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'PhysicalDataModel'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'PhysicalDataModel'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern PhysicalDataModel_propertySet(element : Package, value : Element) {
	find PhysicalDataModel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'PhysicalDataModel'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'PhysicalDataModel'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern PhysicalDataModel_startBoundaryType(element : Package, value : Element) {
	find PhysicalDataModel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - SystemsElements - Flows

/*
 * Pattern that queries elements with the stereotype 'ResourceInteraction' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InformationFlow' object with the stereotype ResourceInteraction.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ResourceInteraction(element : InformationFlow, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ResourceInteraction");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceInteraction'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'ResourceInteraction'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceInteraction_URI(element : InformationFlow, valuespec : LiteralString) {
	find ResourceInteraction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ResourceInteraction'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'ResourceInteraction'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ResourceInteraction_actualPropertySet(element : InformationFlow, value : Element) {
	find ResourceInteraction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceInteraction'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'ResourceInteraction'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceInteraction_conformsTo(element : InformationFlow, value : Element) {
	find ResourceInteraction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ResourceInteraction'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'ResourceInteraction'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ResourceInteraction_endBoundaryType(element : InformationFlow, value : Element) {
	find ResourceInteraction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ResourceInteraction'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'ResourceInteraction'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ResourceInteraction_propertySet(element : InformationFlow, value : Element) {
	find ResourceInteraction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ResourceInteraction'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'ResourceInteraction'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ResourceInteraction_startBoundaryType(element : InformationFlow, value : Element) {
	find ResourceInteraction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ResourceInteractionItem' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype ResourceInteractionItem.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ResourceInteractionItem(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ResourceInteractionItem");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceInteractionItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ResourceInteractionItem'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceInteractionItem_URI(element : Element, valuespec : LiteralString) {
	find ResourceInteractionItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ResourceInteractionItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ResourceInteractionItem'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ResourceInteractionItem_actualPropertySet(element : Element, value : Element) {
	find ResourceInteractionItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'ResourceInteractionItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ResourceInteractionItem'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern ResourceInteractionItem_affectedFunctions(element : Element, value : Element) {
	find ResourceInteractionItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'ResourceInteractionItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ResourceInteractionItem'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern ResourceInteractionItem_appliesTo(element : Element, value : Element) {
	find ResourceInteractionItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceInteractionItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ResourceInteractionItem'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceInteractionItem_conformsTo(element : Element, value : Element) {
	find ResourceInteractionItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ResourceInteractionItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ResourceInteractionItem'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ResourceInteractionItem_endBoundaryType(element : Element, value : Element) {
	find ResourceInteractionItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'ResourceInteractionItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ResourceInteractionItem'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern ResourceInteractionItem_physicalLocation(element : Element, value : Element) {
	find ResourceInteractionItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ResourceInteractionItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ResourceInteractionItem'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ResourceInteractionItem_propertySet(element : Element, value : Element) {
	find ResourceInteractionItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'ResourceInteractionItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ResourceInteractionItem'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern ResourceInteractionItem_requiredEnvironment(element : Element, value : Element) {
	find ResourceInteractionItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ResourceInteractionItem'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ResourceInteractionItem'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ResourceInteractionItem_startBoundaryType(element : Element, value : Element) {
	find ResourceInteractionItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - SystemsElements - Structure

/*
 * Pattern that queries elements with the stereotype 'CapabilityConfiguration' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype CapabilityConfiguration.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern CapabilityConfiguration(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "CapabilityConfiguration");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern CapabilityConfiguration_URI(element : Class, valuespec : LiteralString) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern CapabilityConfiguration_actsUpon(element : Class, value : Element) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern CapabilityConfiguration_actualPropertySet(element : Class, value : Element) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern CapabilityConfiguration_affectedFunctions(element : Class, value : Element) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern CapabilityConfiguration_appliesTo(element : Class, value : Element) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern CapabilityConfiguration_conformsTo(element : Class, value : Element) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'doctrine' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * value : Constraint : A value of the attribute 'doctrine'.
 */
pattern CapabilityConfiguration_doctrine(element : Class, value : Constraint) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "doctrine", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern CapabilityConfiguration_endBoundaryType(element : Class, value : Element) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern CapabilityConfiguration_milestone(element : Class, value : Element) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern CapabilityConfiguration_physicalLocation(element : Class, value : Element) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern CapabilityConfiguration_propertySet(element : Class, value : Element) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern CapabilityConfiguration_requiredEnvironment(element : Class, value : Element) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'CapabilityConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'CapabilityConfiguration'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern CapabilityConfiguration_startBoundaryType(element : Class, value : Element) {
	find CapabilityConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'FieldedCapability' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype FieldedCapability.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern FieldedCapability(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "FieldedCapability");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'FieldedCapability'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'FieldedCapability'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern FieldedCapability_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find FieldedCapability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'FieldedCapability'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'FieldedCapability'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern FieldedCapability_actualPropertySet(element : InstanceSpecification, value : Element) {
	find FieldedCapability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'FieldedCapability'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'FieldedCapability'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern FieldedCapability_conformsTo(element : InstanceSpecification, value : Element) {
	find FieldedCapability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'FieldedCapability'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'FieldedCapability'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern FieldedCapability_endBoundaryType(element : InstanceSpecification, value : Element) {
	find FieldedCapability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'FieldedCapability'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'FieldedCapability'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern FieldedCapability_propertySet(element : InstanceSpecification, value : Element) {
	find FieldedCapability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'FieldedCapability'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'FieldedCapability'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern FieldedCapability_startBoundaryType(element : InstanceSpecification, value : Element) {
	find FieldedCapability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Forecast' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype Forecast.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Forecast(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Forecast");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Forecast'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Forecast'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Forecast_URI(element : Dependency, valuespec : LiteralString) {
	find Forecast(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Forecast'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Forecast'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Forecast_actualPropertySet(element : Dependency, value : Element) {
	find Forecast(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Forecast'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Forecast'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Forecast_conformsTo(element : Dependency, value : Element) {
	find Forecast(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Forecast'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Forecast'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Forecast_endBoundaryType(element : Dependency, value : Element) {
	find Forecast(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'Forecast'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Forecast'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern Forecast_endDate(element : Dependency, value : Element) {
	find Forecast(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Forecast'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Forecast'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Forecast_propertySet(element : Dependency, value : Element) {
	find Forecast(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Forecast'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Forecast'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Forecast_startBoundaryType(element : Dependency, value : Element) {
	find Forecast(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'Forecast'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Forecast'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern Forecast_startDate(element : Dependency, value : Element) {
	find Forecast(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Materiel' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Materiel.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Materiel(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Materiel");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Materiel'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Materiel'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Materiel_URI(element : Class, valuespec : LiteralString) {
	find Materiel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Materiel'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Materiel'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Materiel_actualPropertySet(element : Class, value : Element) {
	find Materiel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'Materiel'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Materiel'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern Materiel_affectedFunctions(element : Class, value : Element) {
	find Materiel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'Materiel'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Materiel'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern Materiel_appliesTo(element : Class, value : Element) {
	find Materiel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Materiel'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Materiel'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Materiel_conformsTo(element : Class, value : Element) {
	find Materiel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Materiel'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Materiel'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Materiel_endBoundaryType(element : Class, value : Element) {
	find Materiel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'Materiel'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Materiel'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern Materiel_physicalLocation(element : Class, value : Element) {
	find Materiel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Materiel'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Materiel'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Materiel_propertySet(element : Class, value : Element) {
	find Materiel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'Materiel'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Materiel'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern Materiel_requiredEnvironment(element : Class, value : Element) {
	find Materiel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Materiel'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Materiel'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Materiel_startBoundaryType(element : Class, value : Element) {
	find Materiel(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'PhysicalArchitecture' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype PhysicalArchitecture.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern PhysicalArchitecture(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "PhysicalArchitecture");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'PhysicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalArchitecture'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern PhysicalArchitecture_URI(element : Class, valuespec : LiteralString) {
	find PhysicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'PhysicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalArchitecture'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern PhysicalArchitecture_actsUpon(element : Class, value : Element) {
	find PhysicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'PhysicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalArchitecture'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern PhysicalArchitecture_actualPropertySet(element : Class, value : Element) {
	find PhysicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'PhysicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalArchitecture'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern PhysicalArchitecture_affectedFunctions(element : Class, value : Element) {
	find PhysicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'PhysicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalArchitecture'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern PhysicalArchitecture_appliesTo(element : Class, value : Element) {
	find PhysicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'PhysicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalArchitecture'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern PhysicalArchitecture_conformsTo(element : Class, value : Element) {
	find PhysicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'PhysicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalArchitecture'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern PhysicalArchitecture_endBoundaryType(element : Class, value : Element) {
	find PhysicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'PhysicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalArchitecture'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern PhysicalArchitecture_milestone(element : Class, value : Element) {
	find PhysicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'PhysicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalArchitecture'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern PhysicalArchitecture_physicalLocation(element : Class, value : Element) {
	find PhysicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'PhysicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalArchitecture'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern PhysicalArchitecture_propertySet(element : Class, value : Element) {
	find PhysicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'PhysicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalArchitecture'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern PhysicalArchitecture_requiredEnvironment(element : Class, value : Element) {
	find PhysicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'PhysicalArchitecture'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalArchitecture'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern PhysicalArchitecture_startBoundaryType(element : Class, value : Element) {
	find PhysicalArchitecture(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'PhysicalResource' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype PhysicalResource.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern PhysicalResource(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "PhysicalResource");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern PhysicalResource_URI(element : Class, valuespec : LiteralString) {
	find PhysicalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern PhysicalResource_actsUpon(element : Class, value : Element) {
	find PhysicalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern PhysicalResource_actualPropertySet(element : Class, value : Element) {
	find PhysicalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern PhysicalResource_affectedFunctions(element : Class, value : Element) {
	find PhysicalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern PhysicalResource_appliesTo(element : Class, value : Element) {
	find PhysicalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern PhysicalResource_conformsTo(element : Class, value : Element) {
	find PhysicalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern PhysicalResource_endBoundaryType(element : Class, value : Element) {
	find PhysicalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern PhysicalResource_milestone(element : Class, value : Element) {
	find PhysicalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern PhysicalResource_physicalLocation(element : Class, value : Element) {
	find PhysicalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern PhysicalResource_propertySet(element : Class, value : Element) {
	find PhysicalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern PhysicalResource_requiredEnvironment(element : Class, value : Element) {
	find PhysicalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'PhysicalResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PhysicalResource'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern PhysicalResource_startBoundaryType(element : Class, value : Element) {
	find PhysicalResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ResourceArtifact' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype ResourceArtifact.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ResourceArtifact(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ResourceArtifact");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceArtifact_URI(element : Class, valuespec : LiteralString) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern ResourceArtifact_actsUpon(element : Class, value : Element) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ResourceArtifact_actualPropertySet(element : Class, value : Element) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern ResourceArtifact_affectedFunctions(element : Class, value : Element) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern ResourceArtifact_appliesTo(element : Class, value : Element) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceArtifact_conformsTo(element : Class, value : Element) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ResourceArtifact_endBoundaryType(element : Class, value : Element) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern ResourceArtifact_milestone(element : Class, value : Element) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern ResourceArtifact_physicalLocation(element : Class, value : Element) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ResourceArtifact_propertySet(element : Class, value : Element) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern ResourceArtifact_requiredEnvironment(element : Class, value : Element) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ResourceArtifact'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ResourceArtifact'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ResourceArtifact_startBoundaryType(element : Class, value : Element) {
	find ResourceArtifact(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ResourceConnector' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Connector' object with the stereotype ResourceConnector.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ResourceConnector(element : Connector, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ResourceConnector");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceConnector'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceConnector_URI(element : Connector, valuespec : LiteralString) {
	find ResourceConnector(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ResourceConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceConnector'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ResourceConnector_actualPropertySet(element : Connector, value : Element) {
	find ResourceConnector(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceConnector'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceConnector_conformsTo(element : Connector, value : Element) {
	find ResourceConnector(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ResourceConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceConnector'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ResourceConnector_endBoundaryType(element : Connector, value : Element) {
	find ResourceConnector(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'implements' attribute of elements with the stereotype 'ResourceConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceConnector'.
 * value : Element : A value of the attribute 'implements'.
 */
pattern ResourceConnector_implements(element : Connector, value : Element) {
	find ResourceConnector(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "implements", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ResourceConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceConnector'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ResourceConnector_propertySet(element : Connector, value : Element) {
	find ResourceConnector(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'realizedExchange' attribute of elements with the stereotype 'ResourceConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceConnector'.
 * value : Element : A value of the attribute 'realizedExchange'.
 */
pattern ResourceConnector_realizedExchange(element : Connector, value : Element) {
	find ResourceConnector(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "realizedExchange", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'realizedInterface' attribute of elements with the stereotype 'ResourceConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceConnector'.
 * value : Connector : A value of the attribute 'realizedInterface'.
 */
pattern ResourceConnector_realizedInterface(element : Connector, value : Connector) {
	find ResourceConnector(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "realizedInterface", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ResourceConnector'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceConnector'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ResourceConnector_startBoundaryType(element : Connector, value : Element) {
	find ResourceConnector(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ResourceConstraint' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Constraint' object with the stereotype ResourceConstraint.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ResourceConstraint(element : Constraint, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ResourceConstraint");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ResourceConstraint'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceConstraint_URI(element : Constraint, valuespec : LiteralString) {
	find ResourceConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ResourceConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ResourceConstraint'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ResourceConstraint_actualPropertySet(element : Constraint, value : Element) {
	find ResourceConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ResourceConstraint'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceConstraint_conformsTo(element : Constraint, value : Element) {
	find ResourceConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ResourceConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ResourceConstraint'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ResourceConstraint_endBoundaryType(element : Constraint, value : Element) {
	find ResourceConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ResourceConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ResourceConstraint'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ResourceConstraint_propertySet(element : Constraint, value : Element) {
	find ResourceConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'ruleKind' attribute of elements with the stereotype 'ResourceConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ResourceConstraint'.
 * value : EnumerationLiteral : A value of the attribute 'ruleKind'.
 */
pattern ResourceConstraint_ruleKind(element : Constraint, value : EnumerationLiteral) {
	find ResourceConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "ruleKind", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ResourceConstraint'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'ResourceConstraint'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ResourceConstraint_startBoundaryType(element : Constraint, value : Element) {
	find ResourceConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ResourceInterface' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Connector' object with the stereotype ResourceInterface.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ResourceInterface(element : Connector, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ResourceInterface");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceInterface'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceInterface'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceInterface_URI(element : Connector, valuespec : LiteralString) {
	find ResourceInterface(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ResourceInterface'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceInterface'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ResourceInterface_actualPropertySet(element : Connector, value : Element) {
	find ResourceInterface(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceInterface'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceInterface'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceInterface_conformsTo(element : Connector, value : Element) {
	find ResourceInterface(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ResourceInterface'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceInterface'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ResourceInterface_endBoundaryType(element : Connector, value : Element) {
	find ResourceInterface(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'identifier' attribute of elements with the stereotype 'ResourceInterface'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceInterface'.
 * valuespec : LiteralString : A value of the attribute 'identifier'.
 */
pattern ResourceInterface_identifier(element : Connector, valuespec : LiteralString) {
	find ResourceInterface(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "identifier", valuespec);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ResourceInterface'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceInterface'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ResourceInterface_propertySet(element : Connector, value : Element) {
	find ResourceInterface(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'realizedExchange' attribute of elements with the stereotype 'ResourceInterface'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceInterface'.
 * value : Element : A value of the attribute 'realizedExchange'.
 */
pattern ResourceInterface_realizedExchange(element : Connector, value : Element) {
	find ResourceInterface(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "realizedExchange", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'realizingConnector' attribute of elements with the stereotype 'ResourceInterface'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceInterface'.
 * value : Connector : A value of the attribute 'realizingConnector'.
 */
pattern ResourceInterface_realizingConnector(element : Connector, value : Connector) {
	find ResourceInterface(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "realizingConnector", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ResourceInterface'.
 *
 * Parameters:
 * element: 'Connector' object with the stereotype 'ResourceInterface'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ResourceInterface_startBoundaryType(element : Connector, value : Element) {
	find ResourceInterface(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ResourcePort' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Port' object with the stereotype ResourcePort.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ResourcePort(element : Port, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ResourcePort");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourcePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'ResourcePort'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourcePort_URI(element : Port, valuespec : LiteralString) {
	find ResourcePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ResourcePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'ResourcePort'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ResourcePort_actualPropertySet(element : Port, value : Element) {
	find ResourcePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourcePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'ResourcePort'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourcePort_conformsTo(element : Port, value : Element) {
	find ResourcePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ResourcePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'ResourcePort'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ResourcePort_endBoundaryType(element : Port, value : Element) {
	find ResourcePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'implements' attribute of elements with the stereotype 'ResourcePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'ResourcePort'.
 * value : Element : A value of the attribute 'implements'.
 */
pattern ResourcePort_implements(element : Port, value : Element) {
	find ResourcePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "implements", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ResourcePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'ResourcePort'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ResourcePort_propertySet(element : Port, value : Element) {
	find ResourcePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ResourcePort'.
 *
 * Parameters:
 * element: 'Port' object with the stereotype 'ResourcePort'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ResourcePort_startBoundaryType(element : Port, value : Element) {
	find ResourcePort(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ResourceRole' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ResourceRole.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ResourceRole(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ResourceRole");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ResourceRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ResourceRole'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ResourceRole_URI(element : Property, valuespec : LiteralString) {
	find ResourceRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ResourceRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ResourceRole'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ResourceRole_actualPropertySet(element : Property, value : Element) {
	find ResourceRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ResourceRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ResourceRole'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ResourceRole_conformsTo(element : Property, value : Element) {
	find ResourceRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ResourceRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ResourceRole'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ResourceRole_endBoundaryType(element : Property, value : Element) {
	find ResourceRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'performsInContext' attribute of elements with the stereotype 'ResourceRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ResourceRole'.
 * value : Element : A value of the attribute 'performsInContext'.
 */
pattern ResourceRole_performsInContext(element : Property, value : Element) {
	find ResourceRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "performsInContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ResourceRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ResourceRole'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ResourceRole_propertySet(element : Property, value : Element) {
	find ResourceRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'roleKind' attribute of elements with the stereotype 'ResourceRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ResourceRole'.
 * value : EnumerationLiteral : A value of the attribute 'roleKind'.
 */
pattern ResourceRole_roleKind(element : Property, value : EnumerationLiteral) {
	find ResourceRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "roleKind", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ResourceRole'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ResourceRole'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ResourceRole_startBoundaryType(element : Property, value : Element) {
	find ResourceRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Software' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Software.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Software(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Software");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Software_URI(element : Class, valuespec : LiteralString) {
	find Software(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern Software_actsUpon(element : Class, value : Element) {
	find Software(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Software_actualPropertySet(element : Class, value : Element) {
	find Software(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern Software_affectedFunctions(element : Class, value : Element) {
	find Software(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern Software_appliesTo(element : Class, value : Element) {
	find Software(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Software_conformsTo(element : Class, value : Element) {
	find Software(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Software_endBoundaryType(element : Class, value : Element) {
	find Software(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern Software_milestone(element : Class, value : Element) {
	find Software(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern Software_physicalLocation(element : Class, value : Element) {
	find Software(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Software_propertySet(element : Class, value : Element) {
	find Software(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern Software_requiredEnvironment(element : Class, value : Element) {
	find Software(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Software'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Software'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Software_startBoundaryType(element : Class, value : Element) {
	find Software(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'SubjectOfForecast' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype SubjectOfForecast.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern SubjectOfForecast(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "SubjectOfForecast");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SubjectOfForecast'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfForecast'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern SubjectOfForecast_URI(element : Element, valuespec : LiteralString) {
	find SubjectOfForecast(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'SubjectOfForecast'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfForecast'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern SubjectOfForecast_actualPropertySet(element : Element, value : Element) {
	find SubjectOfForecast(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SubjectOfForecast'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfForecast'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern SubjectOfForecast_conformsTo(element : Element, value : Element) {
	find SubjectOfForecast(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'SubjectOfForecast'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfForecast'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern SubjectOfForecast_endBoundaryType(element : Element, value : Element) {
	find SubjectOfForecast(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'SubjectOfForecast'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfForecast'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern SubjectOfForecast_propertySet(element : Element, value : Element) {
	find SubjectOfForecast(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'SubjectOfForecast'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfForecast'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern SubjectOfForecast_startBoundaryType(element : Element, value : Element) {
	find SubjectOfForecast(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'SubjectOfResourceConstraint' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype SubjectOfResourceConstraint.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern SubjectOfResourceConstraint(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "SubjectOfResourceConstraint");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SubjectOfResourceConstraint'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfResourceConstraint'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern SubjectOfResourceConstraint_URI(element : Element, valuespec : LiteralString) {
	find SubjectOfResourceConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'SubjectOfResourceConstraint'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfResourceConstraint'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern SubjectOfResourceConstraint_actualPropertySet(element : Element, value : Element) {
	find SubjectOfResourceConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SubjectOfResourceConstraint'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfResourceConstraint'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern SubjectOfResourceConstraint_conformsTo(element : Element, value : Element) {
	find SubjectOfResourceConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'SubjectOfResourceConstraint'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfResourceConstraint'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern SubjectOfResourceConstraint_endBoundaryType(element : Element, value : Element) {
	find SubjectOfResourceConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'SubjectOfResourceConstraint'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfResourceConstraint'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern SubjectOfResourceConstraint_propertySet(element : Element, value : Element) {
	find SubjectOfResourceConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'SubjectOfResourceConstraint'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'SubjectOfResourceConstraint'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern SubjectOfResourceConstraint_startBoundaryType(element : Element, value : Element) {
	find SubjectOfResourceConstraint(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'SystemResource' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype SystemResource.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern SystemResource(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "SystemResource");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SystemResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SystemResource'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern SystemResource_URI(element : Class, valuespec : LiteralString) {
	find SystemResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'SystemResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SystemResource'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern SystemResource_actsUpon(element : Class, value : Element) {
	find SystemResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'SystemResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SystemResource'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern SystemResource_actualPropertySet(element : Class, value : Element) {
	find SystemResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'SystemResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SystemResource'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern SystemResource_affectedFunctions(element : Class, value : Element) {
	find SystemResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'SystemResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SystemResource'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern SystemResource_appliesTo(element : Class, value : Element) {
	find SystemResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SystemResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SystemResource'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern SystemResource_conformsTo(element : Class, value : Element) {
	find SystemResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'SystemResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SystemResource'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern SystemResource_endBoundaryType(element : Class, value : Element) {
	find SystemResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'SystemResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SystemResource'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern SystemResource_milestone(element : Class, value : Element) {
	find SystemResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'SystemResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SystemResource'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern SystemResource_physicalLocation(element : Class, value : Element) {
	find SystemResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'SystemResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SystemResource'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern SystemResource_propertySet(element : Class, value : Element) {
	find SystemResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'SystemResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SystemResource'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern SystemResource_requiredEnvironment(element : Class, value : Element) {
	find SystemResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'SystemResource'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'SystemResource'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern SystemResource_startBoundaryType(element : Class, value : Element) {
	find SystemResource(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'VersionOfConfiguration' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype VersionOfConfiguration.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern VersionOfConfiguration(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "VersionOfConfiguration");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'VersionOfConfiguration'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'VersionOfConfiguration'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern VersionOfConfiguration_URI(element : Property, valuespec : LiteralString) {
	find VersionOfConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'VersionOfConfiguration'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'VersionOfConfiguration'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern VersionOfConfiguration_actualPropertySet(element : Property, value : Element) {
	find VersionOfConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'VersionOfConfiguration'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'VersionOfConfiguration'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern VersionOfConfiguration_conformsTo(element : Property, value : Element) {
	find VersionOfConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'VersionOfConfiguration'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'VersionOfConfiguration'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern VersionOfConfiguration_endBoundaryType(element : Property, value : Element) {
	find VersionOfConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'VersionOfConfiguration'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'VersionOfConfiguration'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern VersionOfConfiguration_propertySet(element : Property, value : Element) {
	find VersionOfConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'VersionOfConfiguration'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'VersionOfConfiguration'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern VersionOfConfiguration_startBoundaryType(element : Property, value : Element) {
	find VersionOfConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'WholeLifeConfiguration' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype WholeLifeConfiguration.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern WholeLifeConfiguration(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "WholeLifeConfiguration");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'WholeLifeConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeConfiguration'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern WholeLifeConfiguration_URI(element : Class, valuespec : LiteralString) {
	find WholeLifeConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'WholeLifeConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeConfiguration'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern WholeLifeConfiguration_actualPropertySet(element : Class, value : Element) {
	find WholeLifeConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'WholeLifeConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeConfiguration'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern WholeLifeConfiguration_conformsTo(element : Class, value : Element) {
	find WholeLifeConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'WholeLifeConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeConfiguration'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern WholeLifeConfiguration_endBoundaryType(element : Class, value : Element) {
	find WholeLifeConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'WholeLifeConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeConfiguration'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern WholeLifeConfiguration_propertySet(element : Class, value : Element) {
	find WholeLifeConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'WholeLifeConfiguration'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeConfiguration'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern WholeLifeConfiguration_startBoundaryType(element : Class, value : Element) {
	find WholeLifeConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - TechnicalStandardsElements

/*
 * Pattern that queries elements with the stereotype 'Protocol' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Protocol.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Protocol(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Protocol");
}
/*
 * Pattern that queries the 'InformationTechnologyStandardCategory' attribute of elements with the stereotype 'Protocol'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Protocol'.
 * valuespec : LiteralString : A value of the attribute 'InformationTechnologyStandardCategory'.
 */
pattern Protocol_InformationTechnologyStandardCategory(element : Class, valuespec : LiteralString) {
	find Protocol(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "InformationTechnologyStandardCategory", valuespec);
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Protocol'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Protocol'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Protocol_URI(element : Class, valuespec : LiteralString) {
	find Protocol(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Protocol'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Protocol'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Protocol_actualPropertySet(element : Class, value : Element) {
	find Protocol(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Protocol'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Protocol'.
 * value : Class : A value of the attribute 'conformsTo'.
 */
pattern Protocol_conformsTo(element : Class, value : Class) {
	find Protocol(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'currentStatus' attribute of elements with the stereotype 'Protocol'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Protocol'.
 * valuespec : LiteralString : A value of the attribute 'currentStatus'.
 */
pattern Protocol_currentStatus(element : Class, valuespec : LiteralString) {
	find Protocol(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "currentStatus", valuespec);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Protocol'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Protocol'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Protocol_endBoundaryType(element : Class, value : Element) {
	find Protocol(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'mandatedDate' attribute of elements with the stereotype 'Protocol'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Protocol'.
 * value : Element : A value of the attribute 'mandatedDate'.
 */
pattern Protocol_mandatedDate(element : Class, value : Element) {
	find Protocol(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "mandatedDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Protocol'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Protocol'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Protocol_propertySet(element : Class, value : Element) {
	find Protocol(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'ratifiedBy' attribute of elements with the stereotype 'Protocol'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Protocol'.
 * value : Element : A value of the attribute 'ratifiedBy'.
 */
pattern Protocol_ratifiedBy(element : Class, value : Element) {
	find Protocol(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "ratifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'retiredDate' attribute of elements with the stereotype 'Protocol'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Protocol'.
 * value : Element : A value of the attribute 'retiredDate'.
 */
pattern Protocol_retiredDate(element : Class, value : Element) {
	find Protocol(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "retiredDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'shortName' attribute of elements with the stereotype 'Protocol'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Protocol'.
 * valuespec : LiteralString : A value of the attribute 'shortName'.
 */
pattern Protocol_shortName(element : Class, valuespec : LiteralString) {
	find Protocol(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "shortName", valuespec);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Protocol'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Protocol'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Protocol_startBoundaryType(element : Class, value : Element) {
	find Protocol(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'version' attribute of elements with the stereotype 'Protocol'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Protocol'.
 * valuespec : LiteralString : A value of the attribute 'version'.
 */
pattern Protocol_version(element : Class, valuespec : LiteralString) {
	find Protocol(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "version", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'ProtocolImplementation' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype ProtocolImplementation.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ProtocolImplementation(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ProtocolImplementation");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProtocolImplementation'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ProtocolImplementation'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProtocolImplementation_URI(element : Element, valuespec : LiteralString) {
	find ProtocolImplementation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ProtocolImplementation'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ProtocolImplementation'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ProtocolImplementation_actualPropertySet(element : Element, value : Element) {
	find ProtocolImplementation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProtocolImplementation'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ProtocolImplementation'.
 * value : Class : A value of the attribute 'conformsTo'.
 */
pattern ProtocolImplementation_conformsTo(element : Element, value : Class) {
	find ProtocolImplementation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ProtocolImplementation'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ProtocolImplementation'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ProtocolImplementation_endBoundaryType(element : Element, value : Element) {
	find ProtocolImplementation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'implements' attribute of elements with the stereotype 'ProtocolImplementation'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ProtocolImplementation'.
 * value : Class : A value of the attribute 'implements'.
 */
pattern ProtocolImplementation_implements(element : Element, value : Class) {
	find ProtocolImplementation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "implements", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ProtocolImplementation'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ProtocolImplementation'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ProtocolImplementation_propertySet(element : Element, value : Element) {
	find ProtocolImplementation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ProtocolImplementation'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ProtocolImplementation'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ProtocolImplementation_startBoundaryType(element : Element, value : Element) {
	find ProtocolImplementation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Standard' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Standard.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Standard(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Standard");
}
/*
 * Pattern that queries the 'InformationTechnologyStandardCategory' attribute of elements with the stereotype 'Standard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Standard'.
 * valuespec : LiteralString : A value of the attribute 'InformationTechnologyStandardCategory'.
 */
pattern Standard_InformationTechnologyStandardCategory(element : Class, valuespec : LiteralString) {
	find Standard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "InformationTechnologyStandardCategory", valuespec);
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Standard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Standard'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Standard_URI(element : Class, valuespec : LiteralString) {
	find Standard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Standard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Standard'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Standard_actualPropertySet(element : Class, value : Element) {
	find Standard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Standard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Standard'.
 * value : Class : A value of the attribute 'conformsTo'.
 */
pattern Standard_conformsTo(element : Class, value : Class) {
	find Standard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'currentStatus' attribute of elements with the stereotype 'Standard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Standard'.
 * valuespec : LiteralString : A value of the attribute 'currentStatus'.
 */
pattern Standard_currentStatus(element : Class, valuespec : LiteralString) {
	find Standard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "currentStatus", valuespec);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Standard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Standard'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Standard_endBoundaryType(element : Class, value : Element) {
	find Standard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'mandatedDate' attribute of elements with the stereotype 'Standard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Standard'.
 * value : Element : A value of the attribute 'mandatedDate'.
 */
pattern Standard_mandatedDate(element : Class, value : Element) {
	find Standard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "mandatedDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Standard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Standard'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Standard_propertySet(element : Class, value : Element) {
	find Standard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'ratifiedBy' attribute of elements with the stereotype 'Standard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Standard'.
 * value : Element : A value of the attribute 'ratifiedBy'.
 */
pattern Standard_ratifiedBy(element : Class, value : Element) {
	find Standard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "ratifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'retiredDate' attribute of elements with the stereotype 'Standard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Standard'.
 * value : Element : A value of the attribute 'retiredDate'.
 */
pattern Standard_retiredDate(element : Class, value : Element) {
	find Standard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "retiredDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'shortName' attribute of elements with the stereotype 'Standard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Standard'.
 * valuespec : LiteralString : A value of the attribute 'shortName'.
 */
pattern Standard_shortName(element : Class, valuespec : LiteralString) {
	find Standard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "shortName", valuespec);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Standard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Standard'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Standard_startBoundaryType(element : Class, value : Element) {
	find Standard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'version' attribute of elements with the stereotype 'Standard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Standard'.
 * valuespec : LiteralString : A value of the attribute 'version'.
 */
pattern Standard_version(element : Class, valuespec : LiteralString) {
	find Standard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "version", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'StandardConfiguration' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Comment' object with the stereotype StandardConfiguration.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern StandardConfiguration(element : Comment, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "StandardConfiguration");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'StandardConfiguration'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'StandardConfiguration'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern StandardConfiguration_URI(element : Comment, valuespec : LiteralString) {
	find StandardConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'StandardConfiguration'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'StandardConfiguration'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern StandardConfiguration_actualPropertySet(element : Comment, value : Element) {
	find StandardConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'StandardConfiguration'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'StandardConfiguration'.
 * value : Class : A value of the attribute 'conformsTo'.
 */
pattern StandardConfiguration_conformsTo(element : Comment, value : Class) {
	find StandardConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'StandardConfiguration'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'StandardConfiguration'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern StandardConfiguration_endBoundaryType(element : Comment, value : Element) {
	find StandardConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'StandardConfiguration'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'StandardConfiguration'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern StandardConfiguration_propertySet(element : Comment, value : Element) {
	find StandardConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'StandardConfiguration'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'StandardConfiguration'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern StandardConfiguration_startBoundaryType(element : Comment, value : Element) {
	find StandardConfiguration(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// Core - TechnicalStandardsElements - Data

/*
 * Pattern that queries elements with the stereotype 'Details' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype Details.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Details(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Details");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Details'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Details'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Details_URI(element : Dependency, valuespec : LiteralString) {
	find Details(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Details'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Details'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Details_actualPropertySet(element : Dependency, value : Element) {
	find Details(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Details'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Details'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Details_conformsTo(element : Dependency, value : Element) {
	find Details(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Details'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Details'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Details_endBoundaryType(element : Dependency, value : Element) {
	find Details(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Details'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Details'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Details_propertySet(element : Dependency, value : Element) {
	find Details(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Details'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Details'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Details_startBoundaryType(element : Dependency, value : Element) {
	find Details(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'EntityAttribute' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype EntityAttribute.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern EntityAttribute(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "EntityAttribute");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'EntityAttribute'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'EntityAttribute'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern EntityAttribute_URI(element : Property, valuespec : LiteralString) {
	find EntityAttribute(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'EntityAttribute'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'EntityAttribute'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern EntityAttribute_actualPropertySet(element : Property, value : Element) {
	find EntityAttribute(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'EntityAttribute'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'EntityAttribute'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern EntityAttribute_conformsTo(element : Property, value : Element) {
	find EntityAttribute(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'EntityAttribute'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'EntityAttribute'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern EntityAttribute_endBoundaryType(element : Property, value : Element) {
	find EntityAttribute(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'EntityAttribute'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'EntityAttribute'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern EntityAttribute_propertySet(element : Property, value : Element) {
	find EntityAttribute(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'EntityAttribute'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'EntityAttribute'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern EntityAttribute_startBoundaryType(element : Property, value : Element) {
	find EntityAttribute(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'EntityItem' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype EntityItem.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern EntityItem(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "EntityItem");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'EntityItem'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EntityItem'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern EntityItem_URI(element : Class, valuespec : LiteralString) {
	find EntityItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'EntityItem'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EntityItem'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern EntityItem_actualPropertySet(element : Class, value : Element) {
	find EntityItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'EntityItem'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EntityItem'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern EntityItem_conformsTo(element : Class, value : Element) {
	find EntityItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'EntityItem'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EntityItem'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern EntityItem_endBoundaryType(element : Class, value : Element) {
	find EntityItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'EntityItem'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EntityItem'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern EntityItem_propertySet(element : Class, value : Element) {
	find EntityItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'EntityItem'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'EntityItem'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern EntityItem_startBoundaryType(element : Class, value : Element) {
	find EntityItem(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'EntityRelationship' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Association' object with the stereotype EntityRelationship.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern EntityRelationship(element : Association, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "EntityRelationship");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'EntityRelationship'.
 *
 * Parameters:
 * element: 'Association' object with the stereotype 'EntityRelationship'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern EntityRelationship_URI(element : Association, valuespec : LiteralString) {
	find EntityRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'EntityRelationship'.
 *
 * Parameters:
 * element: 'Association' object with the stereotype 'EntityRelationship'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern EntityRelationship_actualPropertySet(element : Association, value : Element) {
	find EntityRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'EntityRelationship'.
 *
 * Parameters:
 * element: 'Association' object with the stereotype 'EntityRelationship'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern EntityRelationship_conformsTo(element : Association, value : Element) {
	find EntityRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'EntityRelationship'.
 *
 * Parameters:
 * element: 'Association' object with the stereotype 'EntityRelationship'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern EntityRelationship_endBoundaryType(element : Association, value : Element) {
	find EntityRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'EntityRelationship'.
 *
 * Parameters:
 * element: 'Association' object with the stereotype 'EntityRelationship'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern EntityRelationship_propertySet(element : Association, value : Element) {
	find EntityRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'EntityRelationship'.
 *
 * Parameters:
 * element: 'Association' object with the stereotype 'EntityRelationship'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern EntityRelationship_startBoundaryType(element : Association, value : Element) {
	find EntityRelationship(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// DoDAF - AcquisitionElements

/*
 * Pattern that queries elements with the stereotype 'ActivityPartOfProject' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype ActivityPartOfProject.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ActivityPartOfProject(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ActivityPartOfProject");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActivityPartOfProject'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ActivityPartOfProject'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActivityPartOfProject_URI(element : Dependency, valuespec : LiteralString) {
	find ActivityPartOfProject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ActivityPartOfProject'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ActivityPartOfProject'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ActivityPartOfProject_actualPropertySet(element : Dependency, value : Element) {
	find ActivityPartOfProject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActivityPartOfProject'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ActivityPartOfProject'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActivityPartOfProject_conformsTo(element : Dependency, value : Element) {
	find ActivityPartOfProject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ActivityPartOfProject'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ActivityPartOfProject'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ActivityPartOfProject_endBoundaryType(element : Dependency, value : Element) {
	find ActivityPartOfProject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ActivityPartOfProject'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ActivityPartOfProject'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ActivityPartOfProject_propertySet(element : Dependency, value : Element) {
	find ActivityPartOfProject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ActivityPartOfProject'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ActivityPartOfProject'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ActivityPartOfProject_startBoundaryType(element : Dependency, value : Element) {
	find ActivityPartOfProject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Project' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype Project.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Project(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Project");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Project'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Project_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find Project(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Project'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Project_actualPropertySet(element : InstanceSpecification, value : Element) {
	find Project(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Project'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Project_conformsTo(element : InstanceSpecification, value : Element) {
	find Project(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Project'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Project_endBoundaryType(element : InstanceSpecification, value : Element) {
	find Project(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Project'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern Project_endDate(element : InstanceSpecification, value : Element) {
	find Project(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'ownedMilestones' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Project'.
 * value : Element : A value of the attribute 'ownedMilestones'.
 */
pattern Project_ownedMilestones(element : InstanceSpecification, value : Element) {
	find Project(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "ownedMilestones", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'part' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Project'.
 * value : Element : A value of the attribute 'part'.
 */
pattern Project_part(element : InstanceSpecification, value : Element) {
	find Project(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "part", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Project'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Project_propertySet(element : InstanceSpecification, value : Element) {
	find Project(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Project'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Project_startBoundaryType(element : InstanceSpecification, value : Element) {
	find Project(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Project'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern Project_startDate(element : InstanceSpecification, value : Element) {
	find Project(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'whole' attribute of elements with the stereotype 'Project'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Project'.
 * value : Element : A value of the attribute 'whole'.
 */
pattern Project_whole(element : InstanceSpecification, value : Element) {
	find Project(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "whole", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ProjectActivity' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Activity' object with the stereotype ProjectActivity.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ProjectActivity(element : Activity, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ProjectActivity");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProjectActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ProjectActivity'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProjectActivity_URI(element : Activity, valuespec : LiteralString) {
	find ProjectActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'activityPerformableUnderCondition' attribute of elements with the stereotype 'ProjectActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ProjectActivity'.
 * value : Element : A value of the attribute 'activityPerformableUnderCondition'.
 */
pattern ProjectActivity_activityPerformableUnderCondition(element : Activity, value : Element) {
	find ProjectActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "activityPerformableUnderCondition", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ProjectActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ProjectActivity'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ProjectActivity_actualPropertySet(element : Activity, value : Element) {
	find ProjectActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProjectActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ProjectActivity'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProjectActivity_conformsTo(element : Activity, value : Element) {
	find ProjectActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ProjectActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ProjectActivity'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ProjectActivity_endBoundaryType(element : Activity, value : Element) {
	find ProjectActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ProjectActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ProjectActivity'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ProjectActivity_propertySet(element : Activity, value : Element) {
	find ProjectActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ProjectActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'ProjectActivity'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ProjectActivity_startBoundaryType(element : Activity, value : Element) {
	find ProjectActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ProjectActivityAction' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'CallBehaviorAction' object with the stereotype ProjectActivityAction.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ProjectActivityAction(element : CallBehaviorAction, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ProjectActivityAction");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProjectActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ProjectActivityAction'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProjectActivityAction_URI(element : CallBehaviorAction, valuespec : LiteralString) {
	find ProjectActivityAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ProjectActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ProjectActivityAction'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ProjectActivityAction_actualPropertySet(element : CallBehaviorAction, value : Element) {
	find ProjectActivityAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProjectActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ProjectActivityAction'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProjectActivityAction_conformsTo(element : CallBehaviorAction, value : Element) {
	find ProjectActivityAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ProjectActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ProjectActivityAction'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ProjectActivityAction_endBoundaryType(element : CallBehaviorAction, value : Element) {
	find ProjectActivityAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ProjectActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ProjectActivityAction'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ProjectActivityAction_propertySet(element : CallBehaviorAction, value : Element) {
	find ProjectActivityAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ProjectActivityAction'.
 *
 * Parameters:
 * element: 'CallBehaviorAction' object with the stereotype 'ProjectActivityAction'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ProjectActivityAction_startBoundaryType(element : CallBehaviorAction, value : Element) {
	find ProjectActivityAction(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ProjectActivityEdge' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'ActivityEdge' object with the stereotype ProjectActivityEdge.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ProjectActivityEdge(element : ActivityEdge, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ProjectActivityEdge");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProjectActivityEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'ProjectActivityEdge'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProjectActivityEdge_URI(element : ActivityEdge, valuespec : LiteralString) {
	find ProjectActivityEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ProjectActivityEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'ProjectActivityEdge'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ProjectActivityEdge_actualPropertySet(element : ActivityEdge, value : Element) {
	find ProjectActivityEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProjectActivityEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'ProjectActivityEdge'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProjectActivityEdge_conformsTo(element : ActivityEdge, value : Element) {
	find ProjectActivityEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ProjectActivityEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'ProjectActivityEdge'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ProjectActivityEdge_endBoundaryType(element : ActivityEdge, value : Element) {
	find ProjectActivityEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ProjectActivityEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'ProjectActivityEdge'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ProjectActivityEdge_propertySet(element : ActivityEdge, value : Element) {
	find ProjectActivityEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ProjectActivityEdge'.
 *
 * Parameters:
 * element: 'ActivityEdge' object with the stereotype 'ProjectActivityEdge'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ProjectActivityEdge_startBoundaryType(element : ActivityEdge, value : Element) {
	find ProjectActivityEdge(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// DoDAF - AllElements

/*
 * Pattern that queries elements with the stereotype 'Information' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Comment' object with the stereotype Information.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Information(element : Comment, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Information");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Information'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Information'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Information_URI(element : Comment, valuespec : LiteralString) {
	find Information(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Information'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Information'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Information_actualPropertySet(element : Comment, value : Element) {
	find Information(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Information'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Information'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Information_conformsTo(element : Comment, value : Element) {
	find Information(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Information'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Information'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Information_endBoundaryType(element : Comment, value : Element) {
	find Information(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'informationKind' attribute of elements with the stereotype 'Information'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Information'.
 * value : EnumerationLiteral : A value of the attribute 'informationKind'.
 */
pattern Information_informationKind(element : Comment, value : EnumerationLiteral) {
	find Information(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "informationKind", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Information'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Information'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Information_propertySet(element : Comment, value : Element) {
	find Information(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Information'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Information'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Information_startBoundaryType(element : Comment, value : Element) {
	find Information(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// DoDAF - AllElements - Behavior

/*
 * Pattern that queries elements with the stereotype 'ActivityPerformedByPerformer' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype ActivityPerformedByPerformer.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ActivityPerformedByPerformer(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ActivityPerformedByPerformer");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActivityPerformedByPerformer'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ActivityPerformedByPerformer'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActivityPerformedByPerformer_URI(element : Dependency, valuespec : LiteralString) {
	find ActivityPerformedByPerformer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ActivityPerformedByPerformer'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ActivityPerformedByPerformer'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ActivityPerformedByPerformer_actualPropertySet(element : Dependency, value : Element) {
	find ActivityPerformedByPerformer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActivityPerformedByPerformer'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ActivityPerformedByPerformer'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActivityPerformedByPerformer_conformsTo(element : Dependency, value : Element) {
	find ActivityPerformedByPerformer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ActivityPerformedByPerformer'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ActivityPerformedByPerformer'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ActivityPerformedByPerformer_endBoundaryType(element : Dependency, value : Element) {
	find ActivityPerformedByPerformer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ActivityPerformedByPerformer'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ActivityPerformedByPerformer'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ActivityPerformedByPerformer_propertySet(element : Dependency, value : Element) {
	find ActivityPerformedByPerformer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ActivityPerformedByPerformer'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ActivityPerformedByPerformer'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ActivityPerformedByPerformer_startBoundaryType(element : Dependency, value : Element) {
	find ActivityPerformedByPerformer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// DoDAF - AllElements - Environment

/*
 * Pattern that queries elements with the stereotype 'Condition' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'DataType' object with the stereotype Condition.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Condition(element : DataType, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Condition");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Condition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Condition'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Condition_URI(element : DataType, valuespec : LiteralString) {
	find Condition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Condition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Condition'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Condition_actualPropertySet(element : DataType, value : Element) {
	find Condition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'Condition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Condition'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern Condition_appliesTo(element : DataType, value : Element) {
	find Condition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conditionKind' attribute of elements with the stereotype 'Condition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Condition'.
 * valuespec : LiteralString : A value of the attribute 'conditionKind'.
 */
pattern Condition_conditionKind(element : DataType, valuespec : LiteralString) {
	find Condition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conditionKind", valuespec);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Condition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Condition'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Condition_conformsTo(element : DataType, value : Element) {
	find Condition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Condition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Condition'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Condition_endBoundaryType(element : DataType, value : Element) {
	find Condition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Condition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Condition'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Condition_propertySet(element : DataType, value : Element) {
	find Condition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Condition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Condition'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Condition_startBoundaryType(element : DataType, value : Element) {
	find Condition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ConditionProperty' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ConditionProperty.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ConditionProperty(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ConditionProperty");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ConditionProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ConditionProperty'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ConditionProperty_URI(element : Property, valuespec : LiteralString) {
	find ConditionProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ConditionProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ConditionProperty'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ConditionProperty_actualPropertySet(element : Property, value : Element) {
	find ConditionProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ConditionProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ConditionProperty'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ConditionProperty_conformsTo(element : Property, value : Element) {
	find ConditionProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ConditionProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ConditionProperty'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ConditionProperty_endBoundaryType(element : Property, value : Element) {
	find ConditionProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'maxValue' attribute of elements with the stereotype 'ConditionProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ConditionProperty'.
 * valuespec : LiteralString : A value of the attribute 'maxValue'.
 */
pattern ConditionProperty_maxValue(element : Property, valuespec : LiteralString) {
	find ConditionProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "maxValue", valuespec);
}
/*
 * Pattern that queries the 'minValue' attribute of elements with the stereotype 'ConditionProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ConditionProperty'.
 * valuespec : LiteralString : A value of the attribute 'minValue'.
 */
pattern ConditionProperty_minValue(element : Property, valuespec : LiteralString) {
	find ConditionProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "minValue", valuespec);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ConditionProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ConditionProperty'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ConditionProperty_propertySet(element : Property, value : Element) {
	find ConditionProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ConditionProperty'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ConditionProperty'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ConditionProperty_startBoundaryType(element : Property, value : Element) {
	find ConditionProperty(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'GeoPoliticalExtent' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype GeoPoliticalExtent.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern GeoPoliticalExtent(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "GeoPoliticalExtent");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'GeoPoliticalExtent'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'GeoPoliticalExtent'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern GeoPoliticalExtent_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find GeoPoliticalExtent(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'GeoPoliticalExtent'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'GeoPoliticalExtent'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern GeoPoliticalExtent_actualPropertySet(element : InstanceSpecification, value : Element) {
	find GeoPoliticalExtent(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'GeoPoliticalExtent'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'GeoPoliticalExtent'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern GeoPoliticalExtent_conformsTo(element : InstanceSpecification, value : Element) {
	find GeoPoliticalExtent(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'customKind' attribute of elements with the stereotype 'GeoPoliticalExtent'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'GeoPoliticalExtent'.
 * valuespec : LiteralString : A value of the attribute 'customKind'.
 */
pattern GeoPoliticalExtent_customKind(element : InstanceSpecification, valuespec : LiteralString) {
	find GeoPoliticalExtent(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "customKind", valuespec);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'GeoPoliticalExtent'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'GeoPoliticalExtent'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern GeoPoliticalExtent_endBoundaryType(element : InstanceSpecification, value : Element) {
	find GeoPoliticalExtent(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'geoPoliticalExtentKind' attribute of elements with the stereotype 'GeoPoliticalExtent'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'GeoPoliticalExtent'.
 * value : EnumerationLiteral : A value of the attribute 'geoPoliticalExtentKind'.
 */
pattern GeoPoliticalExtent_geoPoliticalExtentKind(element : InstanceSpecification, value : EnumerationLiteral) {
	find GeoPoliticalExtent(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "geoPoliticalExtentKind", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'GeoPoliticalExtent'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'GeoPoliticalExtent'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern GeoPoliticalExtent_propertySet(element : InstanceSpecification, value : Element) {
	find GeoPoliticalExtent(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'GeoPoliticalExtent'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'GeoPoliticalExtent'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern GeoPoliticalExtent_startBoundaryType(element : InstanceSpecification, value : Element) {
	find GeoPoliticalExtent(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'GeoPoliticalExtentType' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'DataType' object with the stereotype GeoPoliticalExtentType.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern GeoPoliticalExtentType(element : DataType, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "GeoPoliticalExtentType");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern GeoPoliticalExtentType_URI(element : DataType, valuespec : LiteralString) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern GeoPoliticalExtentType_actsUpon(element : DataType, value : Element) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern GeoPoliticalExtentType_actualPropertySet(element : DataType, value : Element) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern GeoPoliticalExtentType_affectedFunctions(element : DataType, value : Element) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern GeoPoliticalExtentType_appliesTo(element : DataType, value : Element) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern GeoPoliticalExtentType_conformsTo(element : DataType, value : Element) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'customKind' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * valuespec : LiteralString : A value of the attribute 'customKind'.
 */
pattern GeoPoliticalExtentType_customKind(element : DataType, valuespec : LiteralString) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "customKind", valuespec);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern GeoPoliticalExtentType_endBoundaryType(element : DataType, value : Element) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'geoPoliticalExtentTypeKind' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * value : EnumerationLiteral : A value of the attribute 'geoPoliticalExtentTypeKind'.
 */
pattern GeoPoliticalExtentType_geoPoliticalExtentTypeKind(element : DataType, value : EnumerationLiteral) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "geoPoliticalExtentTypeKind", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern GeoPoliticalExtentType_physicalLocation(element : DataType, value : Element) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern GeoPoliticalExtentType_propertySet(element : DataType, value : Element) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern GeoPoliticalExtentType_requiredEnvironment(element : DataType, value : Element) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'GeoPoliticalExtentType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'GeoPoliticalExtentType'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern GeoPoliticalExtentType_startBoundaryType(element : DataType, value : Element) {
	find GeoPoliticalExtentType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Location' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype Location.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Location(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Location");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Location'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Location'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Location_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find Location(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Location'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Location'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Location_actualPropertySet(element : InstanceSpecification, value : Element) {
	find Location(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'address' attribute of elements with the stereotype 'Location'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Location'.
 * valuespec : LiteralString : A value of the attribute 'address'.
 */
pattern Location_address(element : InstanceSpecification, valuespec : LiteralString) {
	find Location(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "address", valuespec);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Location'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Location'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Location_conformsTo(element : InstanceSpecification, value : Element) {
	find Location(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'customKind' attribute of elements with the stereotype 'Location'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Location'.
 * valuespec : LiteralString : A value of the attribute 'customKind'.
 */
pattern Location_customKind(element : InstanceSpecification, valuespec : LiteralString) {
	find Location(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "customKind", valuespec);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Location'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Location'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Location_endBoundaryType(element : InstanceSpecification, value : Element) {
	find Location(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'locationKind' attribute of elements with the stereotype 'Location'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Location'.
 * value : EnumerationLiteral : A value of the attribute 'locationKind'.
 */
pattern Location_locationKind(element : InstanceSpecification, value : EnumerationLiteral) {
	find Location(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "locationKind", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'locationNamedByAddress' attribute of elements with the stereotype 'Location'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Location'.
 * valuespec : LiteralBoolean : A value of the attribute 'locationNamedByAddress'.
 */
pattern Location_locationNamedByAddress(element : InstanceSpecification, valuespec : LiteralBoolean) {
	find Location(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "locationNamedByAddress", valuespec);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Location'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Location'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Location_propertySet(element : InstanceSpecification, value : Element) {
	find Location(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Location'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Location'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Location_startBoundaryType(element : InstanceSpecification, value : Element) {
	find Location(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// DoDAF - AllElements - Measurements

/*
 * Pattern that queries elements with the stereotype 'Measure' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype Measure.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Measure(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Measure");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Measure'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Measure'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Measure_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find Measure(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Measure'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Measure'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Measure_actualPropertySet(element : InstanceSpecification, value : Element) {
	find Measure(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'Measure'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Measure'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern Measure_appliesTo(element : InstanceSpecification, value : Element) {
	find Measure(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Measure'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Measure'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Measure_conformsTo(element : InstanceSpecification, value : Element) {
	find Measure(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Measure'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Measure'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Measure_endBoundaryType(element : InstanceSpecification, value : Element) {
	find Measure(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Measure'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Measure'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Measure_propertySet(element : InstanceSpecification, value : Element) {
	find Measure(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Measure'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'Measure'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Measure_startBoundaryType(element : InstanceSpecification, value : Element) {
	find Measure(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'MeasureType' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'DataType' object with the stereotype MeasureType.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern MeasureType(element : DataType, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "MeasureType");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'MeasureType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'MeasureType'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern MeasureType_URI(element : DataType, valuespec : LiteralString) {
	find MeasureType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'MeasureType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'MeasureType'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern MeasureType_actualPropertySet(element : DataType, value : Element) {
	find MeasureType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'MeasureType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'MeasureType'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern MeasureType_appliesTo(element : DataType, value : Element) {
	find MeasureType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'MeasureType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'MeasureType'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern MeasureType_conformsTo(element : DataType, value : Element) {
	find MeasureType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'MeasureType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'MeasureType'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern MeasureType_endBoundaryType(element : DataType, value : Element) {
	find MeasureType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'MeasureType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'MeasureType'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern MeasureType_propertySet(element : DataType, value : Element) {
	find MeasureType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'MeasureType'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'MeasureType'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern MeasureType_startBoundaryType(element : DataType, value : Element) {
	find MeasureType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// DoDAF - OperationalElements - Structure

/*
 * Pattern that queries elements with the stereotype 'Performer' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Performer.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Performer(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Performer");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Performer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Performer'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Performer_URI(element : Class, valuespec : LiteralString) {
	find Performer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'Performer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Performer'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern Performer_actsUpon(element : Class, value : Element) {
	find Performer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Performer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Performer'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Performer_actualPropertySet(element : Class, value : Element) {
	find Performer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'Performer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Performer'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern Performer_appliesTo(element : Class, value : Element) {
	find Performer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Performer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Performer'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Performer_conformsTo(element : Class, value : Element) {
	find Performer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'connectedNodes' attribute of elements with the stereotype 'Performer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Performer'.
 * value : Element : A value of the attribute 'connectedNodes'.
 */
pattern Performer_connectedNodes(element : Class, value : Element) {
	find Performer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "connectedNodes", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Performer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Performer'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Performer_endBoundaryType(element : Class, value : Element) {
	find Performer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'Performer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Performer'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern Performer_physicalLocation(element : Class, value : Element) {
	find Performer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Performer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Performer'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Performer_propertySet(element : Class, value : Element) {
	find Performer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'Performer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Performer'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern Performer_requiredEnvironment(element : Class, value : Element) {
	find Performer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Performer'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Performer'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Performer_startBoundaryType(element : Class, value : Element) {
	find Performer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// DoDAF - OperationalElements - Structure - Organizational

/*
 * Pattern that queries elements with the stereotype 'IndividualPersonRole' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype IndividualPersonRole.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern IndividualPersonRole(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "IndividualPersonRole");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'IndividualPersonRole'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'IndividualPersonRole'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern IndividualPersonRole_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find IndividualPersonRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'IndividualPersonRole'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'IndividualPersonRole'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern IndividualPersonRole_actualPropertySet(element : InstanceSpecification, value : Element) {
	find IndividualPersonRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'IndividualPersonRole'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'IndividualPersonRole'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern IndividualPersonRole_conformsTo(element : InstanceSpecification, value : Element) {
	find IndividualPersonRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'IndividualPersonRole'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'IndividualPersonRole'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern IndividualPersonRole_endBoundaryType(element : InstanceSpecification, value : Element) {
	find IndividualPersonRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'filledBy' attribute of elements with the stereotype 'IndividualPersonRole'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'IndividualPersonRole'.
 * value : Element : A value of the attribute 'filledBy'.
 */
pattern IndividualPersonRole_filledBy(element : InstanceSpecification, value : Element) {
	find IndividualPersonRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "filledBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'IndividualPersonRole'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'IndividualPersonRole'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern IndividualPersonRole_physicalLocation(element : InstanceSpecification, value : Element) {
	find IndividualPersonRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'IndividualPersonRole'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'IndividualPersonRole'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern IndividualPersonRole_propertySet(element : InstanceSpecification, value : Element) {
	find IndividualPersonRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'IndividualPersonRole'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'IndividualPersonRole'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern IndividualPersonRole_requiredEnvironment(element : InstanceSpecification, value : Element) {
	find IndividualPersonRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'IndividualPersonRole'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'IndividualPersonRole'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern IndividualPersonRole_startBoundaryType(element : InstanceSpecification, value : Element) {
	find IndividualPersonRole(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'OrganizationType' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype OrganizationType.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern OrganizationType(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "OrganizationType");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OrganizationType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationType'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OrganizationType_URI(element : Class, valuespec : LiteralString) {
	find OrganizationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'OrganizationType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationType'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern OrganizationType_actsUpon(element : Class, value : Element) {
	find OrganizationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'OrganizationType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationType'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern OrganizationType_actualPropertySet(element : Class, value : Element) {
	find OrganizationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'OrganizationType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationType'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern OrganizationType_affectedFunctions(element : Class, value : Element) {
	find OrganizationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'OrganizationType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationType'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern OrganizationType_appliesTo(element : Class, value : Element) {
	find OrganizationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OrganizationType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationType'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OrganizationType_conformsTo(element : Class, value : Element) {
	find OrganizationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'OrganizationType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationType'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern OrganizationType_endBoundaryType(element : Class, value : Element) {
	find OrganizationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'OrganizationType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationType'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern OrganizationType_milestone(element : Class, value : Element) {
	find OrganizationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'OrganizationType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationType'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern OrganizationType_physicalLocation(element : Class, value : Element) {
	find OrganizationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'OrganizationType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationType'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern OrganizationType_propertySet(element : Class, value : Element) {
	find OrganizationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'OrganizationType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationType'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern OrganizationType_requiredEnvironment(element : Class, value : Element) {
	find OrganizationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'OrganizationType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'OrganizationType'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern OrganizationType_startBoundaryType(element : Class, value : Element) {
	find OrganizationType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'PersonType' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype PersonType.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern PersonType(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "PersonType");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'PersonType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PersonType'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern PersonType_URI(element : Class, valuespec : LiteralString) {
	find PersonType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'PersonType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PersonType'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern PersonType_actsUpon(element : Class, value : Element) {
	find PersonType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'PersonType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PersonType'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern PersonType_actualPropertySet(element : Class, value : Element) {
	find PersonType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'PersonType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PersonType'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern PersonType_affectedFunctions(element : Class, value : Element) {
	find PersonType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'PersonType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PersonType'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern PersonType_appliesTo(element : Class, value : Element) {
	find PersonType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'PersonType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PersonType'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern PersonType_conformsTo(element : Class, value : Element) {
	find PersonType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'PersonType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PersonType'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern PersonType_endBoundaryType(element : Class, value : Element) {
	find PersonType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'PersonType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PersonType'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern PersonType_milestone(element : Class, value : Element) {
	find PersonType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'PersonType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PersonType'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern PersonType_physicalLocation(element : Class, value : Element) {
	find PersonType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'PersonType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PersonType'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern PersonType_propertySet(element : Class, value : Element) {
	find PersonType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'PersonType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PersonType'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern PersonType_requiredEnvironment(element : Class, value : Element) {
	find PersonType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'PersonType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'PersonType'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern PersonType_startBoundaryType(element : Class, value : Element) {
	find PersonType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Skill' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Skill.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Skill(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Skill");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Skill'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Skill'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Skill_URI(element : Class, valuespec : LiteralString) {
	find Skill(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Skill'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Skill'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Skill_actualPropertySet(element : Class, value : Element) {
	find Skill(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'Skill'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Skill'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern Skill_appliesTo(element : Class, value : Element) {
	find Skill(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Skill'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Skill'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Skill_conformsTo(element : Class, value : Element) {
	find Skill(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Skill'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Skill'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Skill_endBoundaryType(element : Class, value : Element) {
	find Skill(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Skill'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Skill'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Skill_propertySet(element : Class, value : Element) {
	find Skill(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Skill'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Skill'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Skill_startBoundaryType(element : Class, value : Element) {
	find Skill(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'SkillOfPersonType' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype SkillOfPersonType.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern SkillOfPersonType(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "SkillOfPersonType");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SkillOfPersonType'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'SkillOfPersonType'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern SkillOfPersonType_URI(element : Dependency, valuespec : LiteralString) {
	find SkillOfPersonType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'SkillOfPersonType'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'SkillOfPersonType'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern SkillOfPersonType_actualPropertySet(element : Dependency, value : Element) {
	find SkillOfPersonType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SkillOfPersonType'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'SkillOfPersonType'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern SkillOfPersonType_conformsTo(element : Dependency, value : Element) {
	find SkillOfPersonType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'SkillOfPersonType'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'SkillOfPersonType'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern SkillOfPersonType_endBoundaryType(element : Dependency, value : Element) {
	find SkillOfPersonType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'SkillOfPersonType'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'SkillOfPersonType'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern SkillOfPersonType_propertySet(element : Dependency, value : Element) {
	find SkillOfPersonType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'SkillOfPersonType'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'SkillOfPersonType'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern SkillOfPersonType_startBoundaryType(element : Dependency, value : Element) {
	find SkillOfPersonType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'universalPropertySet' attribute of elements with the stereotype 'SkillOfPersonType'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'SkillOfPersonType'.
 * value : Element : A value of the attribute 'universalPropertySet'.
 */
pattern SkillOfPersonType_universalPropertySet(element : Dependency, value : Element) {
	find SkillOfPersonType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "universalPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}

// DoDAF - ServiceElements

/*
 * Pattern that queries elements with the stereotype 'ServiceAccess' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype ServiceAccess.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ServiceAccess(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ServiceAccess");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceAccess'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceAccess'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceAccess_URI(element : Class, valuespec : LiteralString) {
	find ServiceAccess(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'ServiceAccess'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceAccess'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern ServiceAccess_actsUpon(element : Class, value : Element) {
	find ServiceAccess(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ServiceAccess'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceAccess'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ServiceAccess_actualPropertySet(element : Class, value : Element) {
	find ServiceAccess(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'ServiceAccess'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceAccess'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern ServiceAccess_affectedFunctions(element : Class, value : Element) {
	find ServiceAccess(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'ServiceAccess'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceAccess'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern ServiceAccess_appliesTo(element : Class, value : Element) {
	find ServiceAccess(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceAccess'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceAccess'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceAccess_conformsTo(element : Class, value : Element) {
	find ServiceAccess(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ServiceAccess'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceAccess'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ServiceAccess_endBoundaryType(element : Class, value : Element) {
	find ServiceAccess(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'ServiceAccess'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceAccess'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern ServiceAccess_milestone(element : Class, value : Element) {
	find ServiceAccess(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'ServiceAccess'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceAccess'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern ServiceAccess_physicalLocation(element : Class, value : Element) {
	find ServiceAccess(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ServiceAccess'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceAccess'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ServiceAccess_propertySet(element : Class, value : Element) {
	find ServiceAccess(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'ServiceAccess'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceAccess'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern ServiceAccess_requiredEnvironment(element : Class, value : Element) {
	find ServiceAccess(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ServiceAccess'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ServiceAccess'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ServiceAccess_startBoundaryType(element : Class, value : Element) {
	find ServiceAccess(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ServiceDescription' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Package' object with the stereotype ServiceDescription.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ServiceDescription(element : Package, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ServiceDescription");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ServiceDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ServiceDescription'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ServiceDescription_URI(element : Package, valuespec : LiteralString) {
	find ServiceDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ServiceDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ServiceDescription'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ServiceDescription_actualPropertySet(element : Package, value : Element) {
	find ServiceDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'approvalAuthority' attribute of elements with the stereotype 'ServiceDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ServiceDescription'.
 * valuespec : LiteralString : A value of the attribute 'approvalAuthority'.
 */
pattern ServiceDescription_approvalAuthority(element : Package, valuespec : LiteralString) {
	find ServiceDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "approvalAuthority", valuespec);
}
/*
 * Pattern that queries the 'architect' attribute of elements with the stereotype 'ServiceDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ServiceDescription'.
 * valuespec : LiteralString : A value of the attribute 'architect'.
 */
pattern ServiceDescription_architect(element : Package, valuespec : LiteralString) {
	find ServiceDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "architect", valuespec);
}
/*
 * Pattern that queries the 'architectureFramework' attribute of elements with the stereotype 'ServiceDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ServiceDescription'.
 * value : EnumerationLiteral : A value of the attribute 'architectureFramework'.
 */
pattern ServiceDescription_architectureFramework(element : Package, value : EnumerationLiteral) {
	find ServiceDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "architectureFramework", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'assumptionAndConstraint' attribute of elements with the stereotype 'ServiceDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ServiceDescription'.
 * valuespec : LiteralString : A value of the attribute 'assumptionAndConstraint'.
 */
pattern ServiceDescription_assumptionAndConstraint(element : Package, valuespec : LiteralString) {
	find ServiceDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "assumptionAndConstraint", valuespec);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ServiceDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ServiceDescription'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ServiceDescription_conformsTo(element : Package, value : Element) {
	find ServiceDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'creatingOrganization' attribute of elements with the stereotype 'ServiceDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ServiceDescription'.
 * valuespec : LiteralString : A value of the attribute 'creatingOrganization'.
 */
pattern ServiceDescription_creatingOrganization(element : Package, valuespec : LiteralString) {
	find ServiceDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "creatingOrganization", valuespec);
}
/*
 * Pattern that queries the 'dateCompleted' attribute of elements with the stereotype 'ServiceDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ServiceDescription'.
 * valuespec : LiteralString : A value of the attribute 'dateCompleted'.
 */
pattern ServiceDescription_dateCompleted(element : Package, valuespec : LiteralString) {
	find ServiceDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "dateCompleted", valuespec);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ServiceDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ServiceDescription'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ServiceDescription_endBoundaryType(element : Package, value : Element) {
	find ServiceDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ServiceDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ServiceDescription'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ServiceDescription_propertySet(element : Package, value : Element) {
	find ServiceDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'purpose' attribute of elements with the stereotype 'ServiceDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ServiceDescription'.
 * valuespec : LiteralString : A value of the attribute 'purpose'.
 */
pattern ServiceDescription_purpose(element : Package, valuespec : LiteralString) {
	find ServiceDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "purpose", valuespec);
}
/*
 * Pattern that queries the 'recommendations' attribute of elements with the stereotype 'ServiceDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ServiceDescription'.
 * valuespec : LiteralString : A value of the attribute 'recommendations'.
 */
pattern ServiceDescription_recommendations(element : Package, valuespec : LiteralString) {
	find ServiceDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "recommendations", valuespec);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ServiceDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ServiceDescription'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ServiceDescription_startBoundaryType(element : Package, value : Element) {
	find ServiceDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'summaryOfFindings' attribute of elements with the stereotype 'ServiceDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ServiceDescription'.
 * valuespec : LiteralString : A value of the attribute 'summaryOfFindings'.
 */
pattern ServiceDescription_summaryOfFindings(element : Package, valuespec : LiteralString) {
	find ServiceDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "summaryOfFindings", valuespec);
}
/*
 * Pattern that queries the 'toBe' attribute of elements with the stereotype 'ServiceDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ServiceDescription'.
 * valuespec : LiteralBoolean : A value of the attribute 'toBe'.
 */
pattern ServiceDescription_toBe(element : Package, valuespec : LiteralBoolean) {
	find ServiceDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "toBe", valuespec);
}
/*
 * Pattern that queries the 'toolsUsed' attribute of elements with the stereotype 'ServiceDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ServiceDescription'.
 * valuespec : LiteralString : A value of the attribute 'toolsUsed'.
 */
pattern ServiceDescription_toolsUsed(element : Package, valuespec : LiteralString) {
	find ServiceDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "toolsUsed", valuespec);
}
/*
 * Pattern that queries the 'viewpoint' attribute of elements with the stereotype 'ServiceDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ServiceDescription'.
 * valuespec : LiteralString : A value of the attribute 'viewpoint'.
 */
pattern ServiceDescription_viewpoint(element : Package, valuespec : LiteralString) {
	find ServiceDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "viewpoint", valuespec);
}
/*
 * Pattern that queries the 'views' attribute of elements with the stereotype 'ServiceDescription'.
 *
 * Parameters:
 * element: 'Package' object with the stereotype 'ServiceDescription'.
 * value : Element : A value of the attribute 'views'.
 */
pattern ServiceDescription_views(element : Package, value : Element) {
	find ServiceDescription(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "views", valuespec);
	ElementValue.element(valuespec, value);
}

// DoDAF - StrategicElements

/*
 * Pattern that queries elements with the stereotype 'ActivityPartOfCapability' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype ActivityPartOfCapability.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ActivityPartOfCapability(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ActivityPartOfCapability");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActivityPartOfCapability'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ActivityPartOfCapability'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActivityPartOfCapability_URI(element : Dependency, valuespec : LiteralString) {
	find ActivityPartOfCapability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ActivityPartOfCapability'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ActivityPartOfCapability'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ActivityPartOfCapability_actualPropertySet(element : Dependency, value : Element) {
	find ActivityPartOfCapability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActivityPartOfCapability'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ActivityPartOfCapability'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActivityPartOfCapability_conformsTo(element : Dependency, value : Element) {
	find ActivityPartOfCapability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ActivityPartOfCapability'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ActivityPartOfCapability'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ActivityPartOfCapability_endBoundaryType(element : Dependency, value : Element) {
	find ActivityPartOfCapability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ActivityPartOfCapability'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ActivityPartOfCapability'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ActivityPartOfCapability_propertySet(element : Dependency, value : Element) {
	find ActivityPartOfCapability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ActivityPartOfCapability'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ActivityPartOfCapability'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ActivityPartOfCapability_startBoundaryType(element : Dependency, value : Element) {
	find ActivityPartOfCapability(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'CapabilityOfPerformer' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype CapabilityOfPerformer.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern CapabilityOfPerformer(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "CapabilityOfPerformer");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'CapabilityOfPerformer'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'CapabilityOfPerformer'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern CapabilityOfPerformer_URI(element : Dependency, valuespec : LiteralString) {
	find CapabilityOfPerformer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'CapabilityOfPerformer'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'CapabilityOfPerformer'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern CapabilityOfPerformer_actualPropertySet(element : Dependency, value : Element) {
	find CapabilityOfPerformer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'CapabilityOfPerformer'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'CapabilityOfPerformer'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern CapabilityOfPerformer_conformsTo(element : Dependency, value : Element) {
	find CapabilityOfPerformer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'CapabilityOfPerformer'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'CapabilityOfPerformer'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern CapabilityOfPerformer_endBoundaryType(element : Dependency, value : Element) {
	find CapabilityOfPerformer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'environmentalConditions' attribute of elements with the stereotype 'CapabilityOfPerformer'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'CapabilityOfPerformer'.
 * value : Element : A value of the attribute 'environmentalConditions'.
 */
pattern CapabilityOfPerformer_environmentalConditions(element : Dependency, value : Element) {
	find CapabilityOfPerformer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "environmentalConditions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'CapabilityOfPerformer'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'CapabilityOfPerformer'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern CapabilityOfPerformer_propertySet(element : Dependency, value : Element) {
	find CapabilityOfPerformer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'CapabilityOfPerformer'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'CapabilityOfPerformer'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern CapabilityOfPerformer_startBoundaryType(element : Dependency, value : Element) {
	find CapabilityOfPerformer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'universalCapabilitySet' attribute of elements with the stereotype 'CapabilityOfPerformer'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'CapabilityOfPerformer'.
 * value : Element : A value of the attribute 'universalCapabilitySet'.
 */
pattern CapabilityOfPerformer_universalCapabilitySet(element : Dependency, value : Element) {
	find CapabilityOfPerformer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "universalCapabilitySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'DesiredEffect' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype DesiredEffect.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern DesiredEffect(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "DesiredEffect");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'DesiredEffect'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'DesiredEffect'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern DesiredEffect_URI(element : Dependency, valuespec : LiteralString) {
	find DesiredEffect(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'DesiredEffect'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'DesiredEffect'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern DesiredEffect_actualPropertySet(element : Dependency, value : Element) {
	find DesiredEffect(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'DesiredEffect'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'DesiredEffect'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern DesiredEffect_conformsTo(element : Dependency, value : Element) {
	find DesiredEffect(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'desiredResourceFutureState' attribute of elements with the stereotype 'DesiredEffect'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'DesiredEffect'.
 * value : State : A value of the attribute 'desiredResourceFutureState'.
 */
pattern DesiredEffect_desiredResourceFutureState(element : Dependency, value : State) {
	find DesiredEffect(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "desiredResourceFutureState", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'DesiredEffect'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'DesiredEffect'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern DesiredEffect_endBoundaryType(element : Dependency, value : Element) {
	find DesiredEffect(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'DesiredEffect'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'DesiredEffect'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern DesiredEffect_propertySet(element : Dependency, value : Element) {
	find DesiredEffect(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'providedMOE' attribute of elements with the stereotype 'DesiredEffect'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'DesiredEffect'.
 * value : Element : A value of the attribute 'providedMOE'.
 */
pattern DesiredEffect_providedMOE(element : Dependency, value : Element) {
	find DesiredEffect(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "providedMOE", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'DesiredEffect'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'DesiredEffect'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern DesiredEffect_startBoundaryType(element : Dependency, value : Element) {
	find DesiredEffect(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Vision' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Vision.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Vision(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Vision");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Vision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Vision'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Vision_URI(element : Class, valuespec : LiteralString) {
	find Vision(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Vision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Vision'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Vision_actualPropertySet(element : Class, value : Element) {
	find Vision(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Vision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Vision'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Vision_conformsTo(element : Class, value : Element) {
	find Vision(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Vision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Vision'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Vision_endBoundaryType(element : Class, value : Element) {
	find Vision(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'enterprisePhase' attribute of elements with the stereotype 'Vision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Vision'.
 * value : Element : A value of the attribute 'enterprisePhase'.
 */
pattern Vision_enterprisePhase(element : Class, value : Element) {
	find Vision(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "enterprisePhase", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Vision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Vision'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Vision_propertySet(element : Class, value : Element) {
	find Vision(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Vision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Vision'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Vision_startBoundaryType(element : Class, value : Element) {
	find Vision(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'statement' attribute of elements with the stereotype 'Vision'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Vision'.
 * value : Element : A value of the attribute 'statement'.
 */
pattern Vision_statement(element : Class, value : Element) {
	find Vision(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "statement", valuespec);
	ElementValue.element(valuespec, value);
}

// DoDAF - SystemElements - Structure

/*
 * Pattern that queries elements with the stereotype 'System' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype System.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern System(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "System");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern System_URI(element : Class, valuespec : LiteralString) {
	find System(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern System_actsUpon(element : Class, value : Element) {
	find System(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern System_actualPropertySet(element : Class, value : Element) {
	find System(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern System_affectedFunctions(element : Class, value : Element) {
	find System(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern System_appliesTo(element : Class, value : Element) {
	find System(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern System_conformsTo(element : Class, value : Element) {
	find System(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern System_endBoundaryType(element : Class, value : Element) {
	find System(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern System_milestone(element : Class, value : Element) {
	find System(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern System_physicalLocation(element : Class, value : Element) {
	find System(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern System_propertySet(element : Class, value : Element) {
	find System(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern System_requiredEnvironment(element : Class, value : Element) {
	find System(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'System'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'System'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern System_startBoundaryType(element : Class, value : Element) {
	find System(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// DoDAF - TechnicalStandardsElements

/*
 * Pattern that queries elements with the stereotype 'FunctionalStandard' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype FunctionalStandard.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern FunctionalStandard(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "FunctionalStandard");
}
/*
 * Pattern that queries the 'InformationTechnologyStandardCategory' attribute of elements with the stereotype 'FunctionalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'FunctionalStandard'.
 * valuespec : LiteralString : A value of the attribute 'InformationTechnologyStandardCategory'.
 */
pattern FunctionalStandard_InformationTechnologyStandardCategory(element : Class, valuespec : LiteralString) {
	find FunctionalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "InformationTechnologyStandardCategory", valuespec);
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'FunctionalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'FunctionalStandard'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern FunctionalStandard_URI(element : Class, valuespec : LiteralString) {
	find FunctionalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'FunctionalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'FunctionalStandard'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern FunctionalStandard_actualPropertySet(element : Class, value : Element) {
	find FunctionalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'FunctionalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'FunctionalStandard'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern FunctionalStandard_conformsTo(element : Class, value : Element) {
	find FunctionalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'currentStatus' attribute of elements with the stereotype 'FunctionalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'FunctionalStandard'.
 * valuespec : LiteralString : A value of the attribute 'currentStatus'.
 */
pattern FunctionalStandard_currentStatus(element : Class, valuespec : LiteralString) {
	find FunctionalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "currentStatus", valuespec);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'FunctionalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'FunctionalStandard'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern FunctionalStandard_endBoundaryType(element : Class, value : Element) {
	find FunctionalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'mandatedDate' attribute of elements with the stereotype 'FunctionalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'FunctionalStandard'.
 * value : Element : A value of the attribute 'mandatedDate'.
 */
pattern FunctionalStandard_mandatedDate(element : Class, value : Element) {
	find FunctionalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "mandatedDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'FunctionalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'FunctionalStandard'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern FunctionalStandard_propertySet(element : Class, value : Element) {
	find FunctionalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'ratifiedBy' attribute of elements with the stereotype 'FunctionalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'FunctionalStandard'.
 * value : Element : A value of the attribute 'ratifiedBy'.
 */
pattern FunctionalStandard_ratifiedBy(element : Class, value : Element) {
	find FunctionalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "ratifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'retiredDate' attribute of elements with the stereotype 'FunctionalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'FunctionalStandard'.
 * value : Element : A value of the attribute 'retiredDate'.
 */
pattern FunctionalStandard_retiredDate(element : Class, value : Element) {
	find FunctionalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "retiredDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'shortName' attribute of elements with the stereotype 'FunctionalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'FunctionalStandard'.
 * valuespec : LiteralString : A value of the attribute 'shortName'.
 */
pattern FunctionalStandard_shortName(element : Class, valuespec : LiteralString) {
	find FunctionalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "shortName", valuespec);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'FunctionalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'FunctionalStandard'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern FunctionalStandard_startBoundaryType(element : Class, value : Element) {
	find FunctionalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'version' attribute of elements with the stereotype 'FunctionalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'FunctionalStandard'.
 * valuespec : LiteralString : A value of the attribute 'version'.
 */
pattern FunctionalStandard_version(element : Class, valuespec : LiteralString) {
	find FunctionalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "version", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'TechnicalStandard' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype TechnicalStandard.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern TechnicalStandard(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "TechnicalStandard");
}
/*
 * Pattern that queries the 'InformationTechnologyStandardCategory' attribute of elements with the stereotype 'TechnicalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'TechnicalStandard'.
 * valuespec : LiteralString : A value of the attribute 'InformationTechnologyStandardCategory'.
 */
pattern TechnicalStandard_InformationTechnologyStandardCategory(element : Class, valuespec : LiteralString) {
	find TechnicalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "InformationTechnologyStandardCategory", valuespec);
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'TechnicalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'TechnicalStandard'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern TechnicalStandard_URI(element : Class, valuespec : LiteralString) {
	find TechnicalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'TechnicalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'TechnicalStandard'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern TechnicalStandard_actualPropertySet(element : Class, value : Element) {
	find TechnicalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'TechnicalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'TechnicalStandard'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern TechnicalStandard_conformsTo(element : Class, value : Element) {
	find TechnicalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'currentStatus' attribute of elements with the stereotype 'TechnicalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'TechnicalStandard'.
 * valuespec : LiteralString : A value of the attribute 'currentStatus'.
 */
pattern TechnicalStandard_currentStatus(element : Class, valuespec : LiteralString) {
	find TechnicalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "currentStatus", valuespec);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'TechnicalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'TechnicalStandard'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern TechnicalStandard_endBoundaryType(element : Class, value : Element) {
	find TechnicalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'mandatedDate' attribute of elements with the stereotype 'TechnicalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'TechnicalStandard'.
 * value : Element : A value of the attribute 'mandatedDate'.
 */
pattern TechnicalStandard_mandatedDate(element : Class, value : Element) {
	find TechnicalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "mandatedDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'TechnicalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'TechnicalStandard'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern TechnicalStandard_propertySet(element : Class, value : Element) {
	find TechnicalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'ratifiedBy' attribute of elements with the stereotype 'TechnicalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'TechnicalStandard'.
 * value : Element : A value of the attribute 'ratifiedBy'.
 */
pattern TechnicalStandard_ratifiedBy(element : Class, value : Element) {
	find TechnicalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "ratifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'retiredDate' attribute of elements with the stereotype 'TechnicalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'TechnicalStandard'.
 * value : Element : A value of the attribute 'retiredDate'.
 */
pattern TechnicalStandard_retiredDate(element : Class, value : Element) {
	find TechnicalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "retiredDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'shortName' attribute of elements with the stereotype 'TechnicalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'TechnicalStandard'.
 * valuespec : LiteralString : A value of the attribute 'shortName'.
 */
pattern TechnicalStandard_shortName(element : Class, valuespec : LiteralString) {
	find TechnicalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "shortName", valuespec);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'TechnicalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'TechnicalStandard'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern TechnicalStandard_startBoundaryType(element : Class, value : Element) {
	find TechnicalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'version' attribute of elements with the stereotype 'TechnicalStandard'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'TechnicalStandard'.
 * valuespec : LiteralString : A value of the attribute 'version'.
 */
pattern TechnicalStandard_version(element : Class, valuespec : LiteralString) {
	find TechnicalStandard(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "version", valuespec);
}

// DoDAF - TechnicalStandardsElements - Data

/*
 * Pattern that queries elements with the stereotype 'AssociationOfInformation' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Association' object with the stereotype AssociationOfInformation.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern AssociationOfInformation(element : Association, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "AssociationOfInformation");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'AssociationOfInformation'.
 *
 * Parameters:
 * element: 'Association' object with the stereotype 'AssociationOfInformation'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern AssociationOfInformation_URI(element : Association, valuespec : LiteralString) {
	find AssociationOfInformation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'AssociationOfInformation'.
 *
 * Parameters:
 * element: 'Association' object with the stereotype 'AssociationOfInformation'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern AssociationOfInformation_actualPropertySet(element : Association, value : Element) {
	find AssociationOfInformation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'AssociationOfInformation'.
 *
 * Parameters:
 * element: 'Association' object with the stereotype 'AssociationOfInformation'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern AssociationOfInformation_conformsTo(element : Association, value : Element) {
	find AssociationOfInformation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'AssociationOfInformation'.
 *
 * Parameters:
 * element: 'Association' object with the stereotype 'AssociationOfInformation'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern AssociationOfInformation_endBoundaryType(element : Association, value : Element) {
	find AssociationOfInformation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'AssociationOfInformation'.
 *
 * Parameters:
 * element: 'Association' object with the stereotype 'AssociationOfInformation'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern AssociationOfInformation_propertySet(element : Association, value : Element) {
	find AssociationOfInformation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'AssociationOfInformation'.
 *
 * Parameters:
 * element: 'Association' object with the stereotype 'AssociationOfInformation'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern AssociationOfInformation_startBoundaryType(element : Association, value : Element) {
	find AssociationOfInformation(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'SecurityAttributesGroup' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'DataType' object with the stereotype SecurityAttributesGroup.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern SecurityAttributesGroup(element : DataType, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "SecurityAttributesGroup");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SecurityAttributesGroup'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'SecurityAttributesGroup'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern SecurityAttributesGroup_URI(element : DataType, valuespec : LiteralString) {
	find SecurityAttributesGroup(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'SecurityAttributesGroup'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'SecurityAttributesGroup'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern SecurityAttributesGroup_actualPropertySet(element : DataType, value : Element) {
	find SecurityAttributesGroup(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'SecurityAttributesGroup'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'SecurityAttributesGroup'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern SecurityAttributesGroup_appliesTo(element : DataType, value : Element) {
	find SecurityAttributesGroup(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SecurityAttributesGroup'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'SecurityAttributesGroup'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern SecurityAttributesGroup_conformsTo(element : DataType, value : Element) {
	find SecurityAttributesGroup(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'SecurityAttributesGroup'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'SecurityAttributesGroup'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern SecurityAttributesGroup_endBoundaryType(element : DataType, value : Element) {
	find SecurityAttributesGroup(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'SecurityAttributesGroup'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'SecurityAttributesGroup'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern SecurityAttributesGroup_propertySet(element : DataType, value : Element) {
	find SecurityAttributesGroup(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'SecurityAttributesGroup'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'SecurityAttributesGroup'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern SecurityAttributesGroup_startBoundaryType(element : DataType, value : Element) {
	find SecurityAttributesGroup(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// MODAF - AcquisitionElements - Milestones

/*
 * Pattern that queries elements with the stereotype 'ActualProjectMilestone' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ActualProjectMilestone.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ActualProjectMilestone(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ActualProjectMilestone");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActualProjectMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProjectMilestone'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActualProjectMilestone_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualProjectMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ActualProjectMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProjectMilestone'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ActualProjectMilestone_actualPropertySet(element : InstanceSpecification, value : Element) {
	find ActualProjectMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActualProjectMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProjectMilestone'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActualProjectMilestone_conformsTo(element : InstanceSpecification, value : Element) {
	find ActualProjectMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'date' attribute of elements with the stereotype 'ActualProjectMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProjectMilestone'.
 * value : Element : A value of the attribute 'date'.
 */
pattern ActualProjectMilestone_date(element : InstanceSpecification, value : Element) {
	find ActualProjectMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "date", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'description' attribute of elements with the stereotype 'ActualProjectMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProjectMilestone'.
 * valuespec : LiteralString : A value of the attribute 'description'.
 */
pattern ActualProjectMilestone_description(element : InstanceSpecification, valuespec : LiteralString) {
	find ActualProjectMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "description", valuespec);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ActualProjectMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProjectMilestone'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ActualProjectMilestone_endBoundaryType(element : InstanceSpecification, value : Element) {
	find ActualProjectMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ActualProjectMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProjectMilestone'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ActualProjectMilestone_propertySet(element : InstanceSpecification, value : Element) {
	find ActualProjectMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'resource' attribute of elements with the stereotype 'ActualProjectMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProjectMilestone'.
 * value : Element : A value of the attribute 'resource'.
 */
pattern ActualProjectMilestone_resource(element : InstanceSpecification, value : Element) {
	find ActualProjectMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "resource", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ActualProjectMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ActualProjectMilestone'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ActualProjectMilestone_startBoundaryType(element : InstanceSpecification, value : Element) {
	find ActualProjectMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'IncrementMilestone' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype IncrementMilestone.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern IncrementMilestone(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "IncrementMilestone");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'IncrementMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'IncrementMilestone'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern IncrementMilestone_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find IncrementMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'IncrementMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'IncrementMilestone'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern IncrementMilestone_actualPropertySet(element : InstanceSpecification, value : Element) {
	find IncrementMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'IncrementMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'IncrementMilestone'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern IncrementMilestone_conformsTo(element : InstanceSpecification, value : Element) {
	find IncrementMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'date' attribute of elements with the stereotype 'IncrementMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'IncrementMilestone'.
 * value : Element : A value of the attribute 'date'.
 */
pattern IncrementMilestone_date(element : InstanceSpecification, value : Element) {
	find IncrementMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "date", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'description' attribute of elements with the stereotype 'IncrementMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'IncrementMilestone'.
 * valuespec : LiteralString : A value of the attribute 'description'.
 */
pattern IncrementMilestone_description(element : InstanceSpecification, valuespec : LiteralString) {
	find IncrementMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "description", valuespec);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'IncrementMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'IncrementMilestone'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern IncrementMilestone_endBoundaryType(element : InstanceSpecification, value : Element) {
	find IncrementMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'IncrementMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'IncrementMilestone'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern IncrementMilestone_propertySet(element : InstanceSpecification, value : Element) {
	find IncrementMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'resource' attribute of elements with the stereotype 'IncrementMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'IncrementMilestone'.
 * value : Element : A value of the attribute 'resource'.
 */
pattern IncrementMilestone_resource(element : InstanceSpecification, value : Element) {
	find IncrementMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "resource", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'IncrementMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'IncrementMilestone'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern IncrementMilestone_startBoundaryType(element : InstanceSpecification, value : Element) {
	find IncrementMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'MilestoneSequence' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype MilestoneSequence.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern MilestoneSequence(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "MilestoneSequence");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'MilestoneSequence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'MilestoneSequence'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern MilestoneSequence_URI(element : Dependency, valuespec : LiteralString) {
	find MilestoneSequence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'MilestoneSequence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'MilestoneSequence'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern MilestoneSequence_actualPropertySet(element : Dependency, value : Element) {
	find MilestoneSequence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'MilestoneSequence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'MilestoneSequence'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern MilestoneSequence_conformsTo(element : Dependency, value : Element) {
	find MilestoneSequence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'MilestoneSequence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'MilestoneSequence'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern MilestoneSequence_endBoundaryType(element : Dependency, value : Element) {
	find MilestoneSequence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'MilestoneSequence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'MilestoneSequence'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern MilestoneSequence_propertySet(element : Dependency, value : Element) {
	find MilestoneSequence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'MilestoneSequence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'MilestoneSequence'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern MilestoneSequence_startBoundaryType(element : Dependency, value : Element) {
	find MilestoneSequence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'OutOfServiceMilestone' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype OutOfServiceMilestone.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern OutOfServiceMilestone(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "OutOfServiceMilestone");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OutOfServiceMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'OutOfServiceMilestone'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OutOfServiceMilestone_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find OutOfServiceMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'OutOfServiceMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'OutOfServiceMilestone'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern OutOfServiceMilestone_actualPropertySet(element : InstanceSpecification, value : Element) {
	find OutOfServiceMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OutOfServiceMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'OutOfServiceMilestone'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OutOfServiceMilestone_conformsTo(element : InstanceSpecification, value : Element) {
	find OutOfServiceMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'date' attribute of elements with the stereotype 'OutOfServiceMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'OutOfServiceMilestone'.
 * value : Element : A value of the attribute 'date'.
 */
pattern OutOfServiceMilestone_date(element : InstanceSpecification, value : Element) {
	find OutOfServiceMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "date", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'description' attribute of elements with the stereotype 'OutOfServiceMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'OutOfServiceMilestone'.
 * valuespec : LiteralString : A value of the attribute 'description'.
 */
pattern OutOfServiceMilestone_description(element : InstanceSpecification, valuespec : LiteralString) {
	find OutOfServiceMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "description", valuespec);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'OutOfServiceMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'OutOfServiceMilestone'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern OutOfServiceMilestone_endBoundaryType(element : InstanceSpecification, value : Element) {
	find OutOfServiceMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'OutOfServiceMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'OutOfServiceMilestone'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern OutOfServiceMilestone_propertySet(element : InstanceSpecification, value : Element) {
	find OutOfServiceMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'resource' attribute of elements with the stereotype 'OutOfServiceMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'OutOfServiceMilestone'.
 * value : Element : A value of the attribute 'resource'.
 */
pattern OutOfServiceMilestone_resource(element : InstanceSpecification, value : Element) {
	find OutOfServiceMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "resource", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'OutOfServiceMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'OutOfServiceMilestone'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern OutOfServiceMilestone_startBoundaryType(element : InstanceSpecification, value : Element) {
	find OutOfServiceMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ProjectMilestone' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype ProjectMilestone.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ProjectMilestone(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ProjectMilestone");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProjectMilestone'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProjectMilestone'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProjectMilestone_URI(element : Class, valuespec : LiteralString) {
	find ProjectMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ProjectMilestone'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProjectMilestone'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ProjectMilestone_actualPropertySet(element : Class, value : Element) {
	find ProjectMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProjectMilestone'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProjectMilestone'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProjectMilestone_conformsTo(element : Class, value : Element) {
	find ProjectMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ProjectMilestone'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProjectMilestone'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ProjectMilestone_endBoundaryType(element : Class, value : Element) {
	find ProjectMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ProjectMilestone'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProjectMilestone'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ProjectMilestone_propertySet(element : Class, value : Element) {
	find ProjectMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ProjectMilestone'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ProjectMilestone'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ProjectMilestone_startBoundaryType(element : Class, value : Element) {
	find ProjectMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ProjectOwnership' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype ProjectOwnership.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ProjectOwnership(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ProjectOwnership");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProjectOwnership'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProjectOwnership'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProjectOwnership_URI(element : Dependency, valuespec : LiteralString) {
	find ProjectOwnership(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ProjectOwnership'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProjectOwnership'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ProjectOwnership_actualPropertySet(element : Dependency, value : Element) {
	find ProjectOwnership(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProjectOwnership'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProjectOwnership'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProjectOwnership_conformsTo(element : Dependency, value : Element) {
	find ProjectOwnership(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ProjectOwnership'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProjectOwnership'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ProjectOwnership_endBoundaryType(element : Dependency, value : Element) {
	find ProjectOwnership(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ProjectOwnership'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProjectOwnership'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern ProjectOwnership_endDate(element : Dependency, value : Element) {
	find ProjectOwnership(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ProjectOwnership'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProjectOwnership'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ProjectOwnership_propertySet(element : Dependency, value : Element) {
	find ProjectOwnership(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ProjectOwnership'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProjectOwnership'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ProjectOwnership_startBoundaryType(element : Dependency, value : Element) {
	find ProjectOwnership(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ProjectOwnership'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProjectOwnership'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern ProjectOwnership_startDate(element : Dependency, value : Element) {
	find ProjectOwnership(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ProjectSequence' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype ProjectSequence.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ProjectSequence(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ProjectSequence");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProjectSequence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProjectSequence'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProjectSequence_URI(element : Dependency, valuespec : LiteralString) {
	find ProjectSequence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ProjectSequence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProjectSequence'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ProjectSequence_actualPropertySet(element : Dependency, value : Element) {
	find ProjectSequence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProjectSequence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProjectSequence'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProjectSequence_conformsTo(element : Dependency, value : Element) {
	find ProjectSequence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ProjectSequence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProjectSequence'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ProjectSequence_endBoundaryType(element : Dependency, value : Element) {
	find ProjectSequence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ProjectSequence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProjectSequence'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ProjectSequence_propertySet(element : Dependency, value : Element) {
	find ProjectSequence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ProjectSequence'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'ProjectSequence'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ProjectSequence_startBoundaryType(element : Dependency, value : Element) {
	find ProjectSequence(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// MODAF - AcquisitionElements - Structure

/*
 * Pattern that queries elements with the stereotype 'ProjectStatus' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Slot' object with the stereotype ProjectStatus.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ProjectStatus(element : Slot, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ProjectStatus");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProjectStatus'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ProjectStatus'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProjectStatus_URI(element : Slot, valuespec : LiteralString) {
	find ProjectStatus(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ProjectStatus'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ProjectStatus'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ProjectStatus_actualPropertySet(element : Slot, value : Element) {
	find ProjectStatus(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProjectStatus'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ProjectStatus'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProjectStatus_conformsTo(element : Slot, value : Element) {
	find ProjectStatus(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ProjectStatus'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ProjectStatus'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ProjectStatus_endBoundaryType(element : Slot, value : Element) {
	find ProjectStatus(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'ProjectStatus'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ProjectStatus'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern ProjectStatus_endDate(element : Slot, value : Element) {
	find ProjectStatus(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'intention' attribute of elements with the stereotype 'ProjectStatus'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ProjectStatus'.
 * value : EnumerationLiteral : A value of the attribute 'intention'.
 */
pattern ProjectStatus_intention(element : Slot, value : EnumerationLiteral) {
	find ProjectStatus(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "intention", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ProjectStatus'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ProjectStatus'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ProjectStatus_propertySet(element : Slot, value : Element) {
	find ProjectStatus(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ProjectStatus'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ProjectStatus'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ProjectStatus_startBoundaryType(element : Slot, value : Element) {
	find ProjectStatus(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'ProjectStatus'.
 *
 * Parameters:
 * element: 'Slot' object with the stereotype 'ProjectStatus'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern ProjectStatus_startDate(element : Slot, value : Element) {
	find ProjectStatus(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ProjectTheme' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ProjectTheme.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ProjectTheme(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ProjectTheme");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProjectTheme'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectTheme'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProjectTheme_URI(element : Property, valuespec : LiteralString) {
	find ProjectTheme(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ProjectTheme'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectTheme'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ProjectTheme_actualPropertySet(element : Property, value : Element) {
	find ProjectTheme(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProjectTheme'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectTheme'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProjectTheme_conformsTo(element : Property, value : Element) {
	find ProjectTheme(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ProjectTheme'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectTheme'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ProjectTheme_endBoundaryType(element : Property, value : Element) {
	find ProjectTheme(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ProjectTheme'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectTheme'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ProjectTheme_propertySet(element : Property, value : Element) {
	find ProjectTheme(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ProjectTheme'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProjectTheme'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ProjectTheme_startBoundaryType(element : Property, value : Element) {
	find ProjectTheme(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'StatusIndicators' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Enumeration' object with the stereotype StatusIndicators.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern StatusIndicators(element : Enumeration, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "StatusIndicators");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'StatusIndicators'.
 *
 * Parameters:
 * element: 'Enumeration' object with the stereotype 'StatusIndicators'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern StatusIndicators_URI(element : Enumeration, valuespec : LiteralString) {
	find StatusIndicators(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'StatusIndicators'.
 *
 * Parameters:
 * element: 'Enumeration' object with the stereotype 'StatusIndicators'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern StatusIndicators_actualPropertySet(element : Enumeration, value : Element) {
	find StatusIndicators(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'StatusIndicators'.
 *
 * Parameters:
 * element: 'Enumeration' object with the stereotype 'StatusIndicators'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern StatusIndicators_conformsTo(element : Enumeration, value : Element) {
	find StatusIndicators(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'StatusIndicators'.
 *
 * Parameters:
 * element: 'Enumeration' object with the stereotype 'StatusIndicators'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern StatusIndicators_endBoundaryType(element : Enumeration, value : Element) {
	find StatusIndicators(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'StatusIndicators'.
 *
 * Parameters:
 * element: 'Enumeration' object with the stereotype 'StatusIndicators'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern StatusIndicators_propertySet(element : Enumeration, value : Element) {
	find StatusIndicators(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'StatusIndicators'.
 *
 * Parameters:
 * element: 'Enumeration' object with the stereotype 'StatusIndicators'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern StatusIndicators_startBoundaryType(element : Enumeration, value : Element) {
	find StatusIndicators(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// MODAF - AllElements - Environment

/*
 * Pattern that queries elements with the stereotype 'Climate' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'DataType' object with the stereotype Climate.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Climate(element : DataType, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Climate");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Climate'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Climate'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Climate_URI(element : DataType, valuespec : LiteralString) {
	find Climate(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Climate'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Climate'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Climate_actualPropertySet(element : DataType, value : Element) {
	find Climate(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'Climate'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Climate'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern Climate_appliesTo(element : DataType, value : Element) {
	find Climate(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Climate'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Climate'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Climate_conformsTo(element : DataType, value : Element) {
	find Climate(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Climate'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Climate'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Climate_endBoundaryType(element : DataType, value : Element) {
	find Climate(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Climate'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Climate'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Climate_propertySet(element : DataType, value : Element) {
	find Climate(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Climate'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Climate'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Climate_startBoundaryType(element : DataType, value : Element) {
	find Climate(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'LightCondition' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'DataType' object with the stereotype LightCondition.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern LightCondition(element : DataType, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "LightCondition");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'LightCondition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'LightCondition'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern LightCondition_URI(element : DataType, valuespec : LiteralString) {
	find LightCondition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'LightCondition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'LightCondition'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern LightCondition_actualPropertySet(element : DataType, value : Element) {
	find LightCondition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'LightCondition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'LightCondition'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern LightCondition_appliesTo(element : DataType, value : Element) {
	find LightCondition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'LightCondition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'LightCondition'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern LightCondition_conformsTo(element : DataType, value : Element) {
	find LightCondition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'LightCondition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'LightCondition'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern LightCondition_endBoundaryType(element : DataType, value : Element) {
	find LightCondition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'LightCondition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'LightCondition'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern LightCondition_propertySet(element : DataType, value : Element) {
	find LightCondition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'LightCondition'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'LightCondition'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern LightCondition_startBoundaryType(element : DataType, value : Element) {
	find LightCondition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// MODAF - AllElements - Ontology

/*
 * Pattern that queries elements with the stereotype 'Alias' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Comment' object with the stereotype Alias.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Alias(element : Comment, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Alias");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Alias'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Alias'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Alias_URI(element : Comment, valuespec : LiteralString) {
	find Alias(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Alias'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Alias'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Alias_actualPropertySet(element : Comment, value : Element) {
	find Alias(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Alias'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Alias'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Alias_conformsTo(element : Comment, value : Element) {
	find Alias(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Alias'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Alias'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Alias_endBoundaryType(element : Comment, value : Element) {
	find Alias(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'nameOwner' attribute of elements with the stereotype 'Alias'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Alias'.
 * valuespec : LiteralString : A value of the attribute 'nameOwner'.
 */
pattern Alias_nameOwner(element : Comment, valuespec : LiteralString) {
	find Alias(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "nameOwner", valuespec);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Alias'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Alias'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Alias_propertySet(element : Comment, value : Element) {
	find Alias(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Alias'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Alias'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Alias_startBoundaryType(element : Comment, value : Element) {
	find Alias(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Definition' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Comment' object with the stereotype Definition.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Definition(element : Comment, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Definition");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Definition'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Definition'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Definition_URI(element : Comment, valuespec : LiteralString) {
	find Definition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Definition'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Definition'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Definition_actualPropertySet(element : Comment, value : Element) {
	find Definition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'author' attribute of elements with the stereotype 'Definition'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Definition'.
 * valuespec : LiteralString : A value of the attribute 'author'.
 */
pattern Definition_author(element : Comment, valuespec : LiteralString) {
	find Definition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "author", valuespec);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Definition'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Definition'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Definition_conformsTo(element : Comment, value : Element) {
	find Definition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Definition'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Definition'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Definition_endBoundaryType(element : Comment, value : Element) {
	find Definition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Definition'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Definition'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Definition_propertySet(element : Comment, value : Element) {
	find Definition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Definition'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'Definition'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Definition_startBoundaryType(element : Comment, value : Element) {
	find Definition(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ExternalIndividual' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype ExternalIndividual.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ExternalIndividual(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ExternalIndividual");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ExternalIndividual'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ExternalIndividual'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ExternalIndividual_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find ExternalIndividual(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ExternalIndividual'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ExternalIndividual'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ExternalIndividual_actualPropertySet(element : InstanceSpecification, value : Element) {
	find ExternalIndividual(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ExternalIndividual'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ExternalIndividual'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ExternalIndividual_conformsTo(element : InstanceSpecification, value : Element) {
	find ExternalIndividual(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ExternalIndividual'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ExternalIndividual'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ExternalIndividual_endBoundaryType(element : InstanceSpecification, value : Element) {
	find ExternalIndividual(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ExternalIndividual'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ExternalIndividual'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ExternalIndividual_propertySet(element : InstanceSpecification, value : Element) {
	find ExternalIndividual(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ExternalIndividual'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ExternalIndividual'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ExternalIndividual_startBoundaryType(element : InstanceSpecification, value : Element) {
	find ExternalIndividual(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'url' attribute of elements with the stereotype 'ExternalIndividual'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'ExternalIndividual'.
 * valuespec : LiteralString : A value of the attribute 'url'.
 */
pattern ExternalIndividual_url(element : InstanceSpecification, valuespec : LiteralString) {
	find ExternalIndividual(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "url", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'ExternalTuple' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype ExternalTuple.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ExternalTuple(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ExternalTuple");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ExternalTuple'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalTuple'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ExternalTuple_URI(element : Class, valuespec : LiteralString) {
	find ExternalTuple(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ExternalTuple'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalTuple'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ExternalTuple_actualPropertySet(element : Class, value : Element) {
	find ExternalTuple(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ExternalTuple'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalTuple'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ExternalTuple_conformsTo(element : Class, value : Element) {
	find ExternalTuple(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ExternalTuple'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalTuple'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ExternalTuple_endBoundaryType(element : Class, value : Element) {
	find ExternalTuple(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ExternalTuple'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalTuple'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ExternalTuple_propertySet(element : Class, value : Element) {
	find ExternalTuple(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ExternalTuple'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalTuple'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ExternalTuple_startBoundaryType(element : Class, value : Element) {
	find ExternalTuple(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'url' attribute of elements with the stereotype 'ExternalTuple'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalTuple'.
 * valuespec : LiteralString : A value of the attribute 'url'.
 */
pattern ExternalTuple_url(element : Class, valuespec : LiteralString) {
	find ExternalTuple(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "url", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'ExternalTupleType' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype ExternalTupleType.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ExternalTupleType(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ExternalTupleType");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ExternalTupleType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalTupleType'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ExternalTupleType_URI(element : Class, valuespec : LiteralString) {
	find ExternalTupleType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ExternalTupleType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalTupleType'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ExternalTupleType_actualPropertySet(element : Class, value : Element) {
	find ExternalTupleType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ExternalTupleType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalTupleType'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ExternalTupleType_conformsTo(element : Class, value : Element) {
	find ExternalTupleType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ExternalTupleType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalTupleType'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ExternalTupleType_endBoundaryType(element : Class, value : Element) {
	find ExternalTupleType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ExternalTupleType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalTupleType'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ExternalTupleType_propertySet(element : Class, value : Element) {
	find ExternalTupleType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ExternalTupleType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalTupleType'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ExternalTupleType_startBoundaryType(element : Class, value : Element) {
	find ExternalTupleType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'url' attribute of elements with the stereotype 'ExternalTupleType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalTupleType'.
 * valuespec : LiteralString : A value of the attribute 'url'.
 */
pattern ExternalTupleType_url(element : Class, valuespec : LiteralString) {
	find ExternalTupleType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "url", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'ExternalType' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype ExternalType.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ExternalType(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ExternalType");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ExternalType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalType'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ExternalType_URI(element : Class, valuespec : LiteralString) {
	find ExternalType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ExternalType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalType'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ExternalType_actualPropertySet(element : Class, value : Element) {
	find ExternalType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ExternalType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalType'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ExternalType_conformsTo(element : Class, value : Element) {
	find ExternalType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ExternalType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalType'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ExternalType_endBoundaryType(element : Class, value : Element) {
	find ExternalType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ExternalType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalType'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ExternalType_propertySet(element : Class, value : Element) {
	find ExternalType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ExternalType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalType'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ExternalType_startBoundaryType(element : Class, value : Element) {
	find ExternalType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'url' attribute of elements with the stereotype 'ExternalType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'ExternalType'.
 * valuespec : LiteralString : A value of the attribute 'url'.
 */
pattern ExternalType_url(element : Class, valuespec : LiteralString) {
	find ExternalType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "url", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'OntologyReference' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype OntologyReference.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern OntologyReference(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "OntologyReference");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OntologyReference'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OntologyReference'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OntologyReference_URI(element : Element, valuespec : LiteralString) {
	find OntologyReference(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'OntologyReference'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OntologyReference'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern OntologyReference_actualPropertySet(element : Element, value : Element) {
	find OntologyReference(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OntologyReference'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OntologyReference'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OntologyReference_conformsTo(element : Element, value : Element) {
	find OntologyReference(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'OntologyReference'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OntologyReference'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern OntologyReference_endBoundaryType(element : Element, value : Element) {
	find OntologyReference(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'OntologyReference'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OntologyReference'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern OntologyReference_propertySet(element : Element, value : Element) {
	find OntologyReference(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'OntologyReference'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OntologyReference'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern OntologyReference_startBoundaryType(element : Element, value : Element) {
	find OntologyReference(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'url' attribute of elements with the stereotype 'OntologyReference'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'OntologyReference'.
 * valuespec : LiteralString : A value of the attribute 'url'.
 */
pattern OntologyReference_url(element : Element, valuespec : LiteralString) {
	find OntologyReference(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "url", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'Overlap' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype Overlap.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Overlap(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Overlap");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Overlap'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Overlap'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Overlap_URI(element : Dependency, valuespec : LiteralString) {
	find Overlap(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Overlap'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Overlap'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Overlap_actualPropertySet(element : Dependency, value : Element) {
	find Overlap(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Overlap'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Overlap'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Overlap_conformsTo(element : Dependency, value : Element) {
	find Overlap(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Overlap'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Overlap'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Overlap_endBoundaryType(element : Dependency, value : Element) {
	find Overlap(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Overlap'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Overlap'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Overlap_propertySet(element : Dependency, value : Element) {
	find Overlap(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Overlap'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Overlap'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Overlap_startBoundaryType(element : Dependency, value : Element) {
	find Overlap(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'SameAs' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype SameAs.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern SameAs(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "SameAs");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'SameAs'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'SameAs'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern SameAs_URI(element : Dependency, valuespec : LiteralString) {
	find SameAs(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'SameAs'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'SameAs'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern SameAs_actualPropertySet(element : Dependency, value : Element) {
	find SameAs(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'SameAs'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'SameAs'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern SameAs_conformsTo(element : Dependency, value : Element) {
	find SameAs(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'SameAs'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'SameAs'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern SameAs_endBoundaryType(element : Dependency, value : Element) {
	find SameAs(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'SameAs'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'SameAs'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern SameAs_propertySet(element : Dependency, value : Element) {
	find SameAs(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'SameAs'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'SameAs'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern SameAs_startBoundaryType(element : Dependency, value : Element) {
	find SameAs(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'StereotypeExtension' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Comment' object with the stereotype StereotypeExtension.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern StereotypeExtension(element : Comment, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "StereotypeExtension");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'StereotypeExtension'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'StereotypeExtension'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern StereotypeExtension_URI(element : Comment, valuespec : LiteralString) {
	find StereotypeExtension(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'StereotypeExtension'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'StereotypeExtension'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern StereotypeExtension_actualPropertySet(element : Comment, value : Element) {
	find StereotypeExtension(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'StereotypeExtension'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'StereotypeExtension'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern StereotypeExtension_conformsTo(element : Comment, value : Element) {
	find StereotypeExtension(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'StereotypeExtension'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'StereotypeExtension'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern StereotypeExtension_endBoundaryType(element : Comment, value : Element) {
	find StereotypeExtension(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'ontologyReference' attribute of elements with the stereotype 'StereotypeExtension'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'StereotypeExtension'.
 * value : Element : A value of the attribute 'ontologyReference'.
 */
pattern StereotypeExtension_ontologyReference(element : Comment, value : Element) {
	find StereotypeExtension(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "ontologyReference", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'StereotypeExtension'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'StereotypeExtension'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern StereotypeExtension_propertySet(element : Comment, value : Element) {
	find StereotypeExtension(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'StereotypeExtension'.
 *
 * Parameters:
 * element: 'Comment' object with the stereotype 'StereotypeExtension'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern StereotypeExtension_startBoundaryType(element : Comment, value : Element) {
	find StereotypeExtension(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// MODAF - OperationalElements - Behavior

/*
 * Pattern that queries elements with the stereotype 'ActivitySubject' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype ActivitySubject.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ActivitySubject(element : Element, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ActivitySubject");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ActivitySubject'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ActivitySubject'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ActivitySubject_URI(element : Element, valuespec : LiteralString) {
	find ActivitySubject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'ActivitySubject'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ActivitySubject'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern ActivitySubject_actsUpon(element : Element, value : Element) {
	find ActivitySubject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ActivitySubject'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ActivitySubject'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ActivitySubject_actualPropertySet(element : Element, value : Element) {
	find ActivitySubject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ActivitySubject'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ActivitySubject'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ActivitySubject_conformsTo(element : Element, value : Element) {
	find ActivitySubject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ActivitySubject'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ActivitySubject'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ActivitySubject_endBoundaryType(element : Element, value : Element) {
	find ActivitySubject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ActivitySubject'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ActivitySubject'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ActivitySubject_propertySet(element : Element, value : Element) {
	find ActivitySubject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ActivitySubject'.
 *
 * Parameters:
 * element: 'Element' object with the stereotype 'ActivitySubject'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ActivitySubject_startBoundaryType(element : Element, value : Element) {
	find ActivitySubject(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'OwnsProcess' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype OwnsProcess.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern OwnsProcess(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "OwnsProcess");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'OwnsProcess'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'OwnsProcess'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern OwnsProcess_URI(element : Dependency, valuespec : LiteralString) {
	find OwnsProcess(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'OwnsProcess'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'OwnsProcess'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern OwnsProcess_actualPropertySet(element : Dependency, value : Element) {
	find OwnsProcess(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'OwnsProcess'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'OwnsProcess'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern OwnsProcess_conformsTo(element : Dependency, value : Element) {
	find OwnsProcess(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'OwnsProcess'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'OwnsProcess'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern OwnsProcess_endBoundaryType(element : Dependency, value : Element) {
	find OwnsProcess(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'OwnsProcess'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'OwnsProcess'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern OwnsProcess_propertySet(element : Dependency, value : Element) {
	find OwnsProcess(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'OwnsProcess'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'OwnsProcess'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern OwnsProcess_startBoundaryType(element : Dependency, value : Element) {
	find OwnsProcess(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Process' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Activity' object with the stereotype Process.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Process(element : Activity, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Process");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Process'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Process'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Process_URI(element : Activity, valuespec : LiteralString) {
	find Process(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Process'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Process'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Process_actualPropertySet(element : Activity, value : Element) {
	find Process(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Process'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Process'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Process_conformsTo(element : Activity, value : Element) {
	find Process(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Process'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Process'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Process_endBoundaryType(element : Activity, value : Element) {
	find Process(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Process'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Process'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Process_propertySet(element : Activity, value : Element) {
	find Process(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Process'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'Process'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Process_startBoundaryType(element : Activity, value : Element) {
	find Process(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'StandardOperationalActivity' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Activity' object with the stereotype StandardOperationalActivity.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern StandardOperationalActivity(element : Activity, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "StandardOperationalActivity");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'StandardOperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'StandardOperationalActivity'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern StandardOperationalActivity_URI(element : Activity, valuespec : LiteralString) {
	find StandardOperationalActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'activityPerformableUnderCondition' attribute of elements with the stereotype 'StandardOperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'StandardOperationalActivity'.
 * value : Element : A value of the attribute 'activityPerformableUnderCondition'.
 */
pattern StandardOperationalActivity_activityPerformableUnderCondition(element : Activity, value : Element) {
	find StandardOperationalActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "activityPerformableUnderCondition", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'StandardOperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'StandardOperationalActivity'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern StandardOperationalActivity_actualPropertySet(element : Activity, value : Element) {
	find StandardOperationalActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'StandardOperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'StandardOperationalActivity'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern StandardOperationalActivity_conformsTo(element : Activity, value : Element) {
	find StandardOperationalActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'StandardOperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'StandardOperationalActivity'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern StandardOperationalActivity_endBoundaryType(element : Activity, value : Element) {
	find StandardOperationalActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'StandardOperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'StandardOperationalActivity'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern StandardOperationalActivity_propertySet(element : Activity, value : Element) {
	find StandardOperationalActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'realizedBy' attribute of elements with the stereotype 'StandardOperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'StandardOperationalActivity'.
 * value : Element : A value of the attribute 'realizedBy'.
 */
pattern StandardOperationalActivity_realizedBy(element : Activity, value : Element) {
	find StandardOperationalActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "realizedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'StandardOperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'StandardOperationalActivity'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern StandardOperationalActivity_startBoundaryType(element : Activity, value : Element) {
	find StandardOperationalActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'subject' attribute of elements with the stereotype 'StandardOperationalActivity'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'StandardOperationalActivity'.
 * value : Element : A value of the attribute 'subject'.
 */
pattern StandardOperationalActivity_subject(element : Activity, value : Element) {
	find StandardOperationalActivity(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "subject", valuespec);
	ElementValue.element(valuespec, value);
}

// MODAF - OperationalElements - Flows

/*
 * Pattern that queries elements with the stereotype 'Control' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InformationFlow' object with the stereotype Control.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Control(element : InformationFlow, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Control");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Control'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Control'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Control_URI(element : InformationFlow, valuespec : LiteralString) {
	find Control(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Control'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Control'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Control_actualPropertySet(element : InformationFlow, value : Element) {
	find Control(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Control'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Control'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Control_conformsTo(element : InformationFlow, value : Element) {
	find Control(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Control'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Control'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Control_endBoundaryType(element : InformationFlow, value : Element) {
	find Control(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Control'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Control'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Control_propertySet(element : InformationFlow, value : Element) {
	find Control(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Control'.
 *
 * Parameters:
 * element: 'InformationFlow' object with the stereotype 'Control'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Control_startBoundaryType(element : InformationFlow, value : Element) {
	find Control(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// MODAF - OperationalElements - Structure

/*
 * Pattern that queries elements with the stereotype 'Energy' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Energy.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Energy(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Energy");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Energy'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Energy'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Energy_URI(element : Class, valuespec : LiteralString) {
	find Energy(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'Energy'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Energy'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern Energy_actsUpon(element : Class, value : Element) {
	find Energy(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Energy'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Energy'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Energy_actualPropertySet(element : Class, value : Element) {
	find Energy(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'Energy'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Energy'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern Energy_affectedFunctions(element : Class, value : Element) {
	find Energy(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'Energy'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Energy'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern Energy_appliesTo(element : Class, value : Element) {
	find Energy(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Energy'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Energy'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Energy_conformsTo(element : Class, value : Element) {
	find Energy(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Energy'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Energy'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Energy_endBoundaryType(element : Class, value : Element) {
	find Energy(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'Energy'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Energy'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern Energy_physicalLocation(element : Class, value : Element) {
	find Energy(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Energy'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Energy'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Energy_propertySet(element : Class, value : Element) {
	find Energy(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'Energy'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Energy'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern Energy_requiredEnvironment(element : Class, value : Element) {
	find Energy(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Energy'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'Energy'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Energy_startBoundaryType(element : Class, value : Element) {
	find Energy(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ProblemDomain' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ProblemDomain.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ProblemDomain(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ProblemDomain");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProblemDomain'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProblemDomain'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProblemDomain_URI(element : Property, valuespec : LiteralString) {
	find ProblemDomain(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ProblemDomain'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProblemDomain'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ProblemDomain_actualPropertySet(element : Property, value : Element) {
	find ProblemDomain(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProblemDomain'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProblemDomain'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProblemDomain_conformsTo(element : Property, value : Element) {
	find ProblemDomain(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ProblemDomain'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProblemDomain'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ProblemDomain_endBoundaryType(element : Property, value : Element) {
	find ProblemDomain(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'performsInContext' attribute of elements with the stereotype 'ProblemDomain'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProblemDomain'.
 * value : Element : A value of the attribute 'performsInContext'.
 */
pattern ProblemDomain_performsInContext(element : Property, value : Element) {
	find ProblemDomain(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "performsInContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ProblemDomain'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProblemDomain'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ProblemDomain_propertySet(element : Property, value : Element) {
	find ProblemDomain(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ProblemDomain'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProblemDomain'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ProblemDomain_startBoundaryType(element : Property, value : Element) {
	find ProblemDomain(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Trustline' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype Trustline.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Trustline(element : Dependency, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Trustline");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'Trustline'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Trustline'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern Trustline_URI(element : Dependency, valuespec : LiteralString) {
	find Trustline(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'Trustline'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Trustline'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern Trustline_actualPropertySet(element : Dependency, value : Element) {
	find Trustline(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'Trustline'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Trustline'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern Trustline_conformsTo(element : Dependency, value : Element) {
	find Trustline(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'Trustline'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Trustline'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern Trustline_endBoundaryType(element : Dependency, value : Element) {
	find Trustline(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'level' attribute of elements with the stereotype 'Trustline'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Trustline'.
 * valuespec : LiteralString : A value of the attribute 'level'.
 */
pattern Trustline_level(element : Dependency, valuespec : LiteralString) {
	find Trustline(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "level", valuespec);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'Trustline'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Trustline'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern Trustline_propertySet(element : Dependency, value : Element) {
	find Trustline(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'Trustline'.
 *
 * Parameters:
 * element: 'Dependency' object with the stereotype 'Trustline'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern Trustline_startBoundaryType(element : Dependency, value : Element) {
	find Trustline(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// MODAF - OperationalElements - Structure - Organizational

/*
 * Pattern that queries elements with the stereotype 'RoleType' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype RoleType.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern RoleType(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "RoleType");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'RoleType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'RoleType'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern RoleType_URI(element : Class, valuespec : LiteralString) {
	find RoleType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actsUpon' attribute of elements with the stereotype 'RoleType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'RoleType'.
 * value : Element : A value of the attribute 'actsUpon'.
 */
pattern RoleType_actsUpon(element : Class, value : Element) {
	find RoleType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actsUpon", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'RoleType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'RoleType'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern RoleType_actualPropertySet(element : Class, value : Element) {
	find RoleType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'affectedFunctions' attribute of elements with the stereotype 'RoleType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'RoleType'.
 * value : Element : A value of the attribute 'affectedFunctions'.
 */
pattern RoleType_affectedFunctions(element : Class, value : Element) {
	find RoleType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "affectedFunctions", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'appliesTo' attribute of elements with the stereotype 'RoleType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'RoleType'.
 * value : Element : A value of the attribute 'appliesTo'.
 */
pattern RoleType_appliesTo(element : Class, value : Element) {
	find RoleType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "appliesTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'RoleType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'RoleType'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern RoleType_conformsTo(element : Class, value : Element) {
	find RoleType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'RoleType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'RoleType'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern RoleType_endBoundaryType(element : Class, value : Element) {
	find RoleType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'milestone' attribute of elements with the stereotype 'RoleType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'RoleType'.
 * value : Element : A value of the attribute 'milestone'.
 */
pattern RoleType_milestone(element : Class, value : Element) {
	find RoleType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "milestone", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'physicalLocation' attribute of elements with the stereotype 'RoleType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'RoleType'.
 * value : Element : A value of the attribute 'physicalLocation'.
 */
pattern RoleType_physicalLocation(element : Class, value : Element) {
	find RoleType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "physicalLocation", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'RoleType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'RoleType'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern RoleType_propertySet(element : Class, value : Element) {
	find RoleType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'requiredEnvironment' attribute of elements with the stereotype 'RoleType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'RoleType'.
 * value : Element : A value of the attribute 'requiredEnvironment'.
 */
pattern RoleType_requiredEnvironment(element : Class, value : Element) {
	find RoleType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "requiredEnvironment", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'RoleType'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'RoleType'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern RoleType_startBoundaryType(element : Class, value : Element) {
	find RoleType(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// MODAF - StrategicElements - Milestones

/*
 * Pattern that queries elements with the stereotype 'DeployedMilestone' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype DeployedMilestone.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern DeployedMilestone(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "DeployedMilestone");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'DeployedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'DeployedMilestone'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern DeployedMilestone_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find DeployedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'DeployedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'DeployedMilestone'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern DeployedMilestone_actualPropertySet(element : InstanceSpecification, value : Element) {
	find DeployedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'DeployedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'DeployedMilestone'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern DeployedMilestone_conformsTo(element : InstanceSpecification, value : Element) {
	find DeployedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'date' attribute of elements with the stereotype 'DeployedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'DeployedMilestone'.
 * value : Element : A value of the attribute 'date'.
 */
pattern DeployedMilestone_date(element : InstanceSpecification, value : Element) {
	find DeployedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "date", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'description' attribute of elements with the stereotype 'DeployedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'DeployedMilestone'.
 * valuespec : LiteralString : A value of the attribute 'description'.
 */
pattern DeployedMilestone_description(element : InstanceSpecification, valuespec : LiteralString) {
	find DeployedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "description", valuespec);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'DeployedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'DeployedMilestone'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern DeployedMilestone_endBoundaryType(element : InstanceSpecification, value : Element) {
	find DeployedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'DeployedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'DeployedMilestone'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern DeployedMilestone_propertySet(element : InstanceSpecification, value : Element) {
	find DeployedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'resource' attribute of elements with the stereotype 'DeployedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'DeployedMilestone'.
 * value : Element : A value of the attribute 'resource'.
 */
pattern DeployedMilestone_resource(element : InstanceSpecification, value : Element) {
	find DeployedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "resource", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'DeployedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'DeployedMilestone'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern DeployedMilestone_startBoundaryType(element : InstanceSpecification, value : Element) {
	find DeployedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'usedBy' attribute of elements with the stereotype 'DeployedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'DeployedMilestone'.
 * value : Element : A value of the attribute 'usedBy'.
 */
pattern DeployedMilestone_usedBy(element : InstanceSpecification, value : Element) {
	find DeployedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "usedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'NoLongerUsedMilestone' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InstanceSpecification' object with the stereotype NoLongerUsedMilestone.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern NoLongerUsedMilestone(element : InstanceSpecification, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "NoLongerUsedMilestone");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'NoLongerUsedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'NoLongerUsedMilestone'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern NoLongerUsedMilestone_URI(element : InstanceSpecification, valuespec : LiteralString) {
	find NoLongerUsedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'NoLongerUsedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'NoLongerUsedMilestone'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern NoLongerUsedMilestone_actualPropertySet(element : InstanceSpecification, value : Element) {
	find NoLongerUsedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'NoLongerUsedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'NoLongerUsedMilestone'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern NoLongerUsedMilestone_conformsTo(element : InstanceSpecification, value : Element) {
	find NoLongerUsedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'date' attribute of elements with the stereotype 'NoLongerUsedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'NoLongerUsedMilestone'.
 * value : Element : A value of the attribute 'date'.
 */
pattern NoLongerUsedMilestone_date(element : InstanceSpecification, value : Element) {
	find NoLongerUsedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "date", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'description' attribute of elements with the stereotype 'NoLongerUsedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'NoLongerUsedMilestone'.
 * valuespec : LiteralString : A value of the attribute 'description'.
 */
pattern NoLongerUsedMilestone_description(element : InstanceSpecification, valuespec : LiteralString) {
	find NoLongerUsedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "description", valuespec);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'NoLongerUsedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'NoLongerUsedMilestone'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern NoLongerUsedMilestone_endBoundaryType(element : InstanceSpecification, value : Element) {
	find NoLongerUsedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'noLongerUsedBy' attribute of elements with the stereotype 'NoLongerUsedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'NoLongerUsedMilestone'.
 * value : Element : A value of the attribute 'noLongerUsedBy'.
 */
pattern NoLongerUsedMilestone_noLongerUsedBy(element : InstanceSpecification, value : Element) {
	find NoLongerUsedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "noLongerUsedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'NoLongerUsedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'NoLongerUsedMilestone'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern NoLongerUsedMilestone_propertySet(element : InstanceSpecification, value : Element) {
	find NoLongerUsedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'resource' attribute of elements with the stereotype 'NoLongerUsedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'NoLongerUsedMilestone'.
 * value : Element : A value of the attribute 'resource'.
 */
pattern NoLongerUsedMilestone_resource(element : InstanceSpecification, value : Element) {
	find NoLongerUsedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "resource", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'NoLongerUsedMilestone'.
 *
 * Parameters:
 * element: 'InstanceSpecification' object with the stereotype 'NoLongerUsedMilestone'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern NoLongerUsedMilestone_startBoundaryType(element : InstanceSpecification, value : Element) {
	find NoLongerUsedMilestone(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// MODAF - StrategicElements - Structure

/*
 * Pattern that queries elements with the stereotype 'EnduringTask' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Activity' object with the stereotype EnduringTask.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern EnduringTask(element : Activity, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "EnduringTask");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'EnduringTask'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'EnduringTask'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern EnduringTask_URI(element : Activity, valuespec : LiteralString) {
	find EnduringTask(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'EnduringTask'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'EnduringTask'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern EnduringTask_actualPropertySet(element : Activity, value : Element) {
	find EnduringTask(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'EnduringTask'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'EnduringTask'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern EnduringTask_conformsTo(element : Activity, value : Element) {
	find EnduringTask(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'EnduringTask'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'EnduringTask'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern EnduringTask_endBoundaryType(element : Activity, value : Element) {
	find EnduringTask(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'EnduringTask'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'EnduringTask'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern EnduringTask_propertySet(element : Activity, value : Element) {
	find EnduringTask(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'EnduringTask'.
 *
 * Parameters:
 * element: 'Activity' object with the stereotype 'EnduringTask'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern EnduringTask_startBoundaryType(element : Activity, value : Element) {
	find EnduringTask(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'WholeLifeEnterprise' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype WholeLifeEnterprise.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern WholeLifeEnterprise(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "WholeLifeEnterprise");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'WholeLifeEnterprise'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeEnterprise'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern WholeLifeEnterprise_URI(element : Class, valuespec : LiteralString) {
	find WholeLifeEnterprise(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'WholeLifeEnterprise'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeEnterprise'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern WholeLifeEnterprise_actualPropertySet(element : Class, value : Element) {
	find WholeLifeEnterprise(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'WholeLifeEnterprise'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeEnterprise'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern WholeLifeEnterprise_conformsTo(element : Class, value : Element) {
	find WholeLifeEnterprise(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'describedBy' attribute of elements with the stereotype 'WholeLifeEnterprise'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeEnterprise'.
 * value : Element : A value of the attribute 'describedBy'.
 */
pattern WholeLifeEnterprise_describedBy(element : Class, value : Element) {
	find WholeLifeEnterprise(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "describedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'WholeLifeEnterprise'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeEnterprise'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern WholeLifeEnterprise_endBoundaryType(element : Class, value : Element) {
	find WholeLifeEnterprise(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endDate' attribute of elements with the stereotype 'WholeLifeEnterprise'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeEnterprise'.
 * value : Element : A value of the attribute 'endDate'.
 */
pattern WholeLifeEnterprise_endDate(element : Class, value : Element) {
	find WholeLifeEnterprise(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'fulfills' attribute of elements with the stereotype 'WholeLifeEnterprise'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeEnterprise'.
 * value : Element : A value of the attribute 'fulfills'.
 */
pattern WholeLifeEnterprise_fulfills(element : Class, value : Element) {
	find WholeLifeEnterprise(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "fulfills", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'goals' attribute of elements with the stereotype 'WholeLifeEnterprise'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeEnterprise'.
 * value : Element : A value of the attribute 'goals'.
 */
pattern WholeLifeEnterprise_goals(element : Class, value : Element) {
	find WholeLifeEnterprise(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "goals", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'WholeLifeEnterprise'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeEnterprise'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern WholeLifeEnterprise_propertySet(element : Class, value : Element) {
	find WholeLifeEnterprise(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'WholeLifeEnterprise'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeEnterprise'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern WholeLifeEnterprise_startBoundaryType(element : Class, value : Element) {
	find WholeLifeEnterprise(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startDate' attribute of elements with the stereotype 'WholeLifeEnterprise'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeEnterprise'.
 * value : Element : A value of the attribute 'startDate'.
 */
pattern WholeLifeEnterprise_startDate(element : Class, value : Element) {
	find WholeLifeEnterprise(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startDate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'statementTasks' attribute of elements with the stereotype 'WholeLifeEnterprise'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeEnterprise'.
 * value : Activity : A value of the attribute 'statementTasks'.
 */
pattern WholeLifeEnterprise_statementTasks(element : Class, value : Activity) {
	find WholeLifeEnterprise(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "statementTasks", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'visions' attribute of elements with the stereotype 'WholeLifeEnterprise'.
 *
 * Parameters:
 * element: 'Class' object with the stereotype 'WholeLifeEnterprise'.
 * value : Element : A value of the attribute 'visions'.
 */
pattern WholeLifeEnterprise_visions(element : Class, value : Element) {
	find WholeLifeEnterprise(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "visions", valuespec);
	ElementValue.element(valuespec, value);
}

// MODAF - TechnicalStandardsElements

/*
 * Pattern that queries elements with the stereotype 'ProtocolLayer' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ProtocolLayer.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ProtocolLayer(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "ProtocolLayer");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'ProtocolLayer'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProtocolLayer'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern ProtocolLayer_URI(element : Property, valuespec : LiteralString) {
	find ProtocolLayer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'ProtocolLayer'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProtocolLayer'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern ProtocolLayer_actualPropertySet(element : Property, value : Element) {
	find ProtocolLayer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'ProtocolLayer'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProtocolLayer'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern ProtocolLayer_conformsTo(element : Property, value : Element) {
	find ProtocolLayer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'ProtocolLayer'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProtocolLayer'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern ProtocolLayer_endBoundaryType(element : Property, value : Element) {
	find ProtocolLayer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'ProtocolLayer'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProtocolLayer'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern ProtocolLayer_propertySet(element : Property, value : Element) {
	find ProtocolLayer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'ProtocolLayer'.
 *
 * Parameters:
 * element: 'Property' object with the stereotype 'ProtocolLayer'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern ProtocolLayer_startBoundaryType(element : Property, value : Element) {
	find ProtocolLayer(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}

// SOPES

/*
 * Pattern that queries elements with the stereotype 'Contract' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InformationFlow' object with the stereotype Contract.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Contract(element : InformationFlow, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Contract");
}
/*
 * Pattern that queries elements with the stereotype 'Semantic' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'DataType' object with the stereotype Semantic.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Semantic(element : DataType, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Semantic");
}
/*
 * Pattern that queries the 'containedTransactionals' attribute of elements with the stereotype 'Semantic'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Semantic'.
 * value : DataType : A value of the attribute 'containedTransactionals'.
 */
pattern Semantic_containedTransactionals(element : DataType, value : DataType) {
	find Semantic(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "containedTransactionals", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'identifier' attribute of elements with the stereotype 'Semantic'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Semantic'.
 * value : DataType : A value of the attribute 'identifier'.
 */
pattern Semantic_identifier(element : DataType, value : DataType) {
	find Semantic(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "identifier", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'SemanticAttribute' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype SemanticAttribute.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern SemanticAttribute(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "SemanticAttribute");
}
/*
 * Pattern that queries elements with the stereotype 'Transactional' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'DataType' object with the stereotype Transactional.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Transactional(element : DataType, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Transactional");
}
/*
 * Pattern that queries the 'containedTransactionals' attribute of elements with the stereotype 'Transactional'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Transactional'.
 * value : DataType : A value of the attribute 'containedTransactionals'.
 */
pattern Transactional_containedTransactionals(element : DataType, value : DataType) {
	find Transactional(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "containedTransactionals", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'identifier' attribute of elements with the stereotype 'Transactional'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Transactional'.
 * value : Class : A value of the attribute 'identifier'.
 */
pattern Transactional_identifier(element : DataType, value : Class) {
	find Transactional(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "identifier", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'representedWrappers' attribute of elements with the stereotype 'Transactional'.
 *
 * Parameters:
 * element: 'DataType' object with the stereotype 'Transactional'.
 * value : Class : A value of the attribute 'representedWrappers'.
 */
pattern Transactional_representedWrappers(element : DataType, value : Class) {
	find Transactional(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "representedWrappers", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'TransactionalAttribute' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype TransactionalAttribute.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern TransactionalAttribute(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "TransactionalAttribute");
}
/*
 * Pattern that queries elements with the stereotype 'Wrapper' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Wrapper.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Wrapper(element : Class, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "Wrapper");
}
/*
 * Pattern that queries elements with the stereotype 'WrapperAttribute' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype WrapperAttribute.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern WrapperAttribute(element : Property, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "WrapperAttribute");
}

// SwAF

/*
 * Pattern that queries elements with the stereotype 'DesignRule' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Constraint' object with the stereotype DesignRule.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern DesignRule(element : Constraint, domainStereotypeInstance : InstanceSpecification) {
	find com.incquerylabs.magicdraw.benchmark.queries.library.stereotypedElement(element, domainStereotypeInstance, "UPDM Profile", "DesignRule");
}
/*
 * Pattern that queries the 'URI' attribute of elements with the stereotype 'DesignRule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'DesignRule'.
 * valuespec : LiteralString : A value of the attribute 'URI'.
 */
pattern DesignRule_URI(element : Constraint, valuespec : LiteralString) {
	find DesignRule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "URI", valuespec);
}
/*
 * Pattern that queries the 'actualPropertySet' attribute of elements with the stereotype 'DesignRule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'DesignRule'.
 * value : Element : A value of the attribute 'actualPropertySet'.
 */
pattern DesignRule_actualPropertySet(element : Constraint, value : Element) {
	find DesignRule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "actualPropertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'analysis' attribute of elements with the stereotype 'DesignRule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'DesignRule'.
 * valuespec : LiteralString : A value of the attribute 'analysis'.
 */
pattern DesignRule_analysis(element : Constraint, valuespec : LiteralString) {
	find DesignRule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "analysis", valuespec);
}
/*
 * Pattern that queries the 'conformsTo' attribute of elements with the stereotype 'DesignRule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'DesignRule'.
 * value : Element : A value of the attribute 'conformsTo'.
 */
pattern DesignRule_conformsTo(element : Constraint, value : Element) {
	find DesignRule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "conformsTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'consequence' attribute of elements with the stereotype 'DesignRule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'DesignRule'.
 * valuespec : LiteralString : A value of the attribute 'consequence'.
 */
pattern DesignRule_consequence(element : Constraint, valuespec : LiteralString) {
	find DesignRule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "consequence", valuespec);
}
/*
 * Pattern that queries the 'context' attribute of elements with the stereotype 'DesignRule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'DesignRule'.
 * valuespec : LiteralString : A value of the attribute 'context'.
 */
pattern DesignRule_context(element : Constraint, valuespec : LiteralString) {
	find DesignRule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "context", valuespec);
}
/*
 * Pattern that queries the 'date' attribute of elements with the stereotype 'DesignRule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'DesignRule'.
 * value : Element : A value of the attribute 'date'.
 */
pattern DesignRule_date(element : Constraint, value : Element) {
	find DesignRule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "date", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'endBoundaryType' attribute of elements with the stereotype 'DesignRule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'DesignRule'.
 * value : Element : A value of the attribute 'endBoundaryType'.
 */
pattern DesignRule_endBoundaryType(element : Constraint, value : Element) {
	find DesignRule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "endBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'identifier' attribute of elements with the stereotype 'DesignRule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'DesignRule'.
 * valuespec : LiteralString : A value of the attribute 'identifier'.
 */
pattern DesignRule_identifier(element : Constraint, valuespec : LiteralString) {
	find DesignRule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "identifier", valuespec);
}
/*
 * Pattern that queries the 'metaData' attribute of elements with the stereotype 'DesignRule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'DesignRule'.
 * valuespec : LiteralString : A value of the attribute 'metaData'.
 */
pattern DesignRule_metaData(element : Constraint, valuespec : LiteralString) {
	find DesignRule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "metaData", valuespec);
}
/*
 * Pattern that queries the 'principles' attribute of elements with the stereotype 'DesignRule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'DesignRule'.
 * valuespec : LiteralString : A value of the attribute 'principles'.
 */
pattern DesignRule_principles(element : Constraint, valuespec : LiteralString) {
	find DesignRule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "principles", valuespec);
}
/*
 * Pattern that queries the 'problem' attribute of elements with the stereotype 'DesignRule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'DesignRule'.
 * valuespec : LiteralString : A value of the attribute 'problem'.
 */
pattern DesignRule_problem(element : Constraint, valuespec : LiteralString) {
	find DesignRule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "problem", valuespec);
}
/*
 * Pattern that queries the 'propertySet' attribute of elements with the stereotype 'DesignRule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'DesignRule'.
 * value : Element : A value of the attribute 'propertySet'.
 */
pattern DesignRule_propertySet(element : Constraint, value : Element) {
	find DesignRule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "propertySet", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'ruleKind' attribute of elements with the stereotype 'DesignRule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'DesignRule'.
 * value : EnumerationLiteral : A value of the attribute 'ruleKind'.
 */
pattern DesignRule_ruleKind(element : Constraint, value : EnumerationLiteral) {
	find DesignRule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "ruleKind", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'solution' attribute of elements with the stereotype 'DesignRule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'DesignRule'.
 * value : Element : A value of the attribute 'solution'.
 */
pattern DesignRule_solution(element : Constraint, value : Element) {
	find DesignRule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "solution", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'startBoundaryType' attribute of elements with the stereotype 'DesignRule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'DesignRule'.
 * value : Element : A value of the attribute 'startBoundaryType'.
 */
pattern DesignRule_startBoundaryType(element : Constraint, value : Element) {
	find DesignRule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "startBoundaryType", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'status' attribute of elements with the stereotype 'DesignRule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'DesignRule'.
 * value : EnumerationLiteral : A value of the attribute 'status'.
 */
pattern DesignRule_status(element : Constraint, value : EnumerationLiteral) {
	find DesignRule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "status", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'version' attribute of elements with the stereotype 'DesignRule'.
 *
 * Parameters:
 * element: 'Constraint' object with the stereotype 'DesignRule'.
 * valuespec : LiteralString : A value of the attribute 'version'.
 */
pattern DesignRule_version(element : Constraint, valuespec : LiteralString) {
	find DesignRule(element, domainStereotypeInstance);
	find com.incquerylabs.magicdraw.benchmark.queries.library.slotValue(domainStereotypeInstance, "version", valuespec);
}
